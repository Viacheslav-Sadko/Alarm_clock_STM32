
Alarm_clock_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000526c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800560c  0800560c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005614  08005614  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800561c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000074  08005690  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005690  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e29  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002814  00000000  00000000  00032ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000356e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  000366c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177ec  00000000  00000000  00037598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e36  00000000  00000000  0004ed84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff40  00000000  00000000  00062bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2afa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f0  00000000  00000000  000f2b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053f4 	.word	0x080053f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080053f4 	.word	0x080053f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SetBuzzerFrequency>:
#include "Buzzer.h"

void SetBuzzerFrequency(uint32_t frequency) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d104      	bne.n	80005ac <SetBuzzerFrequency+0x18>
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80005a2:	2100      	movs	r1, #0
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <SetBuzzerFrequency+0x44>)
 80005a6:	f003 fafd 	bl	8003ba4 <HAL_TIM_PWM_Stop>
        // Обчислення значення ARR для заданої частоти
        uint32_t arrValue = (SystemCoreClock / frequency) - 1;
        __HAL_TIM_SET_AUTORELOAD(&htim2, arrValue);
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
    }
}
 80005aa:	e011      	b.n	80005d0 <SetBuzzerFrequency+0x3c>
        uint32_t arrValue = (SystemCoreClock / frequency) - 1;
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <SetBuzzerFrequency+0x48>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	3b01      	subs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_AUTORELOAD(&htim2, arrValue);
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <SetBuzzerFrequency+0x44>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SetBuzzerFrequency+0x44>)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	60d3      	str	r3, [r2, #12]
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <SetBuzzerFrequency+0x44>)
 80005cc:	f003 fa3a 	bl	8003a44 <HAL_TIM_PWM_Start>
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000ec 	.word	0x200000ec
 80005dc:	20000004 	.word	0x20000004

080005e0 <PlayMelody>:

void PlayMelody(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b0a2      	sub	sp, #136	; 0x88
 80005e4:	af00      	add	r7, sp, #0
	int melody[] = {261, 293, 329, 349, 392, 440, 493, 523, 523, 493, 440, 392, 349, 329, 293, 261};
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <PlayMelody+0x94>)
 80005e8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int durations[] = {8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8};
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <PlayMelody+0x98>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


    for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000622:	e01e      	b.n	8000662 <PlayMelody+0x82>

        SetBuzzerFrequency(melody[i]);
 8000624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	3388      	adds	r3, #136	; 0x88
 800062c:	443b      	add	r3, r7
 800062e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffae 	bl	8000594 <SetBuzzerFrequency>
        HAL_Delay(durations[i]);  // Затримка для відтворення ноти
 8000638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3388      	adds	r3, #136	; 0x88
 8000640:	443b      	add	r3, r7
 8000642:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f96e 	bl	8001928 <HAL_Delay>
        SetBuzzerFrequency(0);  // Зупинка зумера
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff ffa1 	bl	8000594 <SetBuzzerFrequency>
        HAL_Delay(100);  // Затримка між нотами
 8000652:	2064      	movs	r0, #100	; 0x64
 8000654:	f001 f968 	bl	8001928 <HAL_Delay>
    for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
 8000658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800065c:	3301      	adds	r3, #1
 800065e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000666:	2b0f      	cmp	r3, #15
 8000668:	d9dc      	bls.n	8000624 <PlayMelody+0x44>
    }
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3788      	adds	r7, #136	; 0x88
 8000670:	46bd      	mov	sp, r7
 8000672:	bdb0      	pop	{r4, r5, r7, pc}
 8000674:	0800540c 	.word	0x0800540c
 8000678:	0800544c 	.word	0x0800544c

0800067c <getSelectedValuePtr>:
// Максимальні значення для кожного параметра
const uint8_t maxValues[] = {23, 59, 59, 31, 12, 99}; // год, хв, сек, день, міс, рік
uint8_t latestgetCurrentValue = 100;


uint8_t* getSelectedValuePtr() {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
    switch (selectedParameter) {
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <getSelectedValuePtr+0x28>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <getSelectedValuePtr+0x12>
 8000688:	2b01      	cmp	r3, #1
 800068a:	d002      	beq.n	8000692 <getSelectedValuePtr+0x16>
 800068c:	e003      	b.n	8000696 <getSelectedValuePtr+0x1a>
        case 0: return &hours;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <getSelectedValuePtr+0x2c>)
 8000690:	e002      	b.n	8000698 <getSelectedValuePtr+0x1c>
        case 1: return &minutes;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <getSelectedValuePtr+0x30>)
 8000694:	e000      	b.n	8000698 <getSelectedValuePtr+0x1c>
        default: return &hours; // За замовчуванням
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <getSelectedValuePtr+0x2c>)
    }
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000092 	.word	0x20000092
 80006a8:	20000001 	.word	0x20000001
 80006ac:	20000002 	.word	0x20000002

080006b0 <alarm_getSelectedValuePtr>:


uint8_t* alarm_getSelectedValuePtr() {
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
    switch (selectedParameter) {
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <alarm_getSelectedValuePtr+0x28>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <alarm_getSelectedValuePtr+0x12>
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d002      	beq.n	80006c6 <alarm_getSelectedValuePtr+0x16>
 80006c0:	e003      	b.n	80006ca <alarm_getSelectedValuePtr+0x1a>
        case 0: return &alarm_hours;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <alarm_getSelectedValuePtr+0x2c>)
 80006c4:	e002      	b.n	80006cc <alarm_getSelectedValuePtr+0x1c>
        case 1: return &alarm_minutes;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <alarm_getSelectedValuePtr+0x30>)
 80006c8:	e000      	b.n	80006cc <alarm_getSelectedValuePtr+0x1c>
        default: return &alarm_hours; // За замовчуванням
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <alarm_getSelectedValuePtr+0x2c>)
    }
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000092 	.word	0x20000092
 80006dc:	20000093 	.word	0x20000093
 80006e0:	20000094 	.word	0x20000094

080006e4 <alarm_increaseValue>:

void alarm_increaseValue() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
    uint8_t *valuePtr = alarm_getSelectedValuePtr();
 80006ea:	f7ff ffe1 	bl	80006b0 <alarm_getSelectedValuePtr>
 80006ee:	6078      	str	r0, [r7, #4]
    (*valuePtr)++;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	701a      	strb	r2, [r3, #0]

    if (*valuePtr > maxValues[selectedParameter]) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <alarm_increaseValue+0x38>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <alarm_increaseValue+0x3c>)
 8000708:	5c5b      	ldrb	r3, [r3, r1]
 800070a:	429a      	cmp	r2, r3
 800070c:	d902      	bls.n	8000714 <alarm_increaseValue+0x30>
        *valuePtr = 0;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
    }

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000092 	.word	0x20000092
 8000720:	080055b8 	.word	0x080055b8

08000724 <increaseValue>:

void increaseValue() {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
    uint8_t *valuePtr = getSelectedValuePtr();
 800072a:	f7ff ffa7 	bl	800067c <getSelectedValuePtr>
 800072e:	6078      	str	r0, [r7, #4]
    (*valuePtr)++;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	701a      	strb	r2, [r3, #0]

    if (*valuePtr > maxValues[selectedParameter]) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <increaseValue+0x38>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <increaseValue+0x3c>)
 8000748:	5c5b      	ldrb	r3, [r3, r1]
 800074a:	429a      	cmp	r2, r3
 800074c:	d902      	bls.n	8000754 <increaseValue+0x30>
        *valuePtr = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
    }

}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000092 	.word	0x20000092
 8000760:	080055b8 	.word	0x080055b8

08000764 <getCurrentValue>:

uint8_t getCurrentValue() {
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
    switch (selectedParameter) {
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <getCurrentValue+0x2c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <getCurrentValue+0x12>
 8000770:	2b01      	cmp	r3, #1
 8000772:	d003      	beq.n	800077c <getCurrentValue+0x18>
 8000774:	e005      	b.n	8000782 <getCurrentValue+0x1e>
        case 0: return hours;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <getCurrentValue+0x30>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	e003      	b.n	8000784 <getCurrentValue+0x20>
        case 1: return minutes;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <getCurrentValue+0x34>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	e000      	b.n	8000784 <getCurrentValue+0x20>
        default: return 0;
 8000782:	2300      	movs	r3, #0
    }
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000092 	.word	0x20000092
 8000794:	20000001 	.word	0x20000001
 8000798:	20000002 	.word	0x20000002

0800079c <alarm_getCurrentValue>:

uint8_t alarm_getCurrentValue() {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
    switch (selectedParameter) {
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <alarm_getCurrentValue+0x2c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <alarm_getCurrentValue+0x12>
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d003      	beq.n	80007b4 <alarm_getCurrentValue+0x18>
 80007ac:	e005      	b.n	80007ba <alarm_getCurrentValue+0x1e>
        case 0: return alarm_hours;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <alarm_getCurrentValue+0x30>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	e003      	b.n	80007bc <alarm_getCurrentValue+0x20>
        case 1: return alarm_minutes;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <alarm_getCurrentValue+0x34>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	e000      	b.n	80007bc <alarm_getCurrentValue+0x20>
        default: return 0;
 80007ba:	2300      	movs	r3, #0
    }
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000092 	.word	0x20000092
 80007cc:	20000093 	.word	0x20000093
 80007d0:	20000094 	.word	0x20000094

080007d4 <displayCurrentSetting>:


void displayCurrentSetting(uint8_t mode) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(80);
 80007de:	2050      	movs	r0, #80	; 0x50
 80007e0:	f001 f8a2 	bl	8001928 <HAL_Delay>
    char valueStr[3];

    switch(mode){
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <displayCurrentSetting+0x1c>
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d03a      	beq.n	8000864 <displayCurrentSetting+0x90>
    break;
    }



}
 80007ee:	e076      	b.n	80008de <displayCurrentSetting+0x10a>
		if(getCurrentValue() != latestgetCurrentValue){
 80007f0:	f7ff ffb8 	bl	8000764 <getCurrentValue>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <displayCurrentSetting+0x114>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d06b      	beq.n	80008d8 <displayCurrentSetting+0x104>
				latestgetCurrentValue = getCurrentValue();
 8000800:	f7ff ffb0 	bl	8000764 <getCurrentValue>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <displayCurrentSetting+0x114>)
 800080a:	701a      	strb	r2, [r3, #0]
				LCD_Clr();
 800080c:	f000 fba7 	bl	8000f5e <LCD_Clr>
				LCD_Set_Cursor(0, 0);
 8000810:	2100      	movs	r1, #0
 8000812:	2000      	movs	r0, #0
 8000814:	f000 fb73 	bl	8000efe <LCD_Set_Cursor>
					LCD_Str("Set ");
 8000818:	4834      	ldr	r0, [pc, #208]	; (80008ec <displayCurrentSetting+0x118>)
 800081a:	f000 fb8b 	bl	8000f34 <LCD_Str>
					switch (selectedParameter) {
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <displayCurrentSetting+0x11c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <displayCurrentSetting+0x58>
 8000826:	2b01      	cmp	r3, #1
 8000828:	d004      	beq.n	8000834 <displayCurrentSetting+0x60>
 800082a:	e007      	b.n	800083c <displayCurrentSetting+0x68>
						case 0: LCD_Str("Hour:"); break;
 800082c:	4831      	ldr	r0, [pc, #196]	; (80008f4 <displayCurrentSetting+0x120>)
 800082e:	f000 fb81 	bl	8000f34 <LCD_Str>
 8000832:	e003      	b.n	800083c <displayCurrentSetting+0x68>
						case 1: LCD_Str("Minute:"); break;
 8000834:	4830      	ldr	r0, [pc, #192]	; (80008f8 <displayCurrentSetting+0x124>)
 8000836:	f000 fb7d 	bl	8000f34 <LCD_Str>
 800083a:	bf00      	nop
					sprintf(valueStr, "%02d", getCurrentValue());
 800083c:	f7ff ff92 	bl	8000764 <getCurrentValue>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	492c      	ldr	r1, [pc, #176]	; (80008fc <displayCurrentSetting+0x128>)
 800084a:	4618      	mov	r0, r3
 800084c:	f004 f964 	bl	8004b18 <siprintf>
					LCD_Set_Cursor(0, 1);
 8000850:	2101      	movs	r1, #1
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fb53 	bl	8000efe <LCD_Set_Cursor>
				LCD_Str(valueStr);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fb69 	bl	8000f34 <LCD_Str>
    break;
 8000862:	e039      	b.n	80008d8 <displayCurrentSetting+0x104>
    	if(alarm_getCurrentValue() != latestgetCurrentValue){
 8000864:	f7ff ff9a 	bl	800079c <alarm_getCurrentValue>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <displayCurrentSetting+0x114>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	d033      	beq.n	80008dc <displayCurrentSetting+0x108>
    					latestgetCurrentValue = alarm_getCurrentValue();
 8000874:	f7ff ff92 	bl	800079c <alarm_getCurrentValue>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <displayCurrentSetting+0x114>)
 800087e:	701a      	strb	r2, [r3, #0]
    					LCD_Clr();
 8000880:	f000 fb6d 	bl	8000f5e <LCD_Clr>
    					LCD_Set_Cursor(0, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2000      	movs	r0, #0
 8000888:	f000 fb39 	bl	8000efe <LCD_Set_Cursor>
    						LCD_Str("Set ");
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <displayCurrentSetting+0x118>)
 800088e:	f000 fb51 	bl	8000f34 <LCD_Str>
    						switch (selectedParameter) {
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <displayCurrentSetting+0x11c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <displayCurrentSetting+0xcc>
 800089a:	2b01      	cmp	r3, #1
 800089c:	d004      	beq.n	80008a8 <displayCurrentSetting+0xd4>
 800089e:	e007      	b.n	80008b0 <displayCurrentSetting+0xdc>
    							case 0: LCD_Str("Hour:"); break;
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <displayCurrentSetting+0x120>)
 80008a2:	f000 fb47 	bl	8000f34 <LCD_Str>
 80008a6:	e003      	b.n	80008b0 <displayCurrentSetting+0xdc>
    							case 1: LCD_Str("Minute:"); break;
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <displayCurrentSetting+0x124>)
 80008aa:	f000 fb43 	bl	8000f34 <LCD_Str>
 80008ae:	bf00      	nop
    						sprintf(valueStr, "%02d", alarm_getCurrentValue());
 80008b0:	f7ff ff74 	bl	800079c <alarm_getCurrentValue>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	490f      	ldr	r1, [pc, #60]	; (80008fc <displayCurrentSetting+0x128>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 f92a 	bl	8004b18 <siprintf>
    						LCD_Set_Cursor(0, 1);
 80008c4:	2101      	movs	r1, #1
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fb19 	bl	8000efe <LCD_Set_Cursor>
    					LCD_Str(valueStr);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fb2f 	bl	8000f34 <LCD_Str>
    break;
 80008d6:	e001      	b.n	80008dc <displayCurrentSetting+0x108>
    break;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <displayCurrentSetting+0x10a>
    break;
 80008dc:	bf00      	nop
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000003 	.word	0x20000003
 80008ec:	0800548c 	.word	0x0800548c
 80008f0:	20000092 	.word	0x20000092
 80008f4:	08005494 	.word	0x08005494
 80008f8:	0800549c 	.word	0x0800549c
 80008fc:	080054a4 	.word	0x080054a4

08000900 <DS1307_Set_Time_alarm>:

DS1307_Set_Time_alarm(uint8_t hours, uint8_t minutes){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
	EEPROM_Write(0, &alarm_hours, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	4907      	ldr	r1, [pc, #28]	; (8000930 <DS1307_Set_Time_alarm+0x30>)
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fa63 	bl	8000de0 <EEPROM_Write>
	EEPROM_Write(1, &alarm_minutes, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	4905      	ldr	r1, [pc, #20]	; (8000934 <DS1307_Set_Time_alarm+0x34>)
 800091e:	2001      	movs	r0, #1
 8000920:	f000 fa5e 	bl	8000de0 <EEPROM_Write>
}
 8000924:	bf00      	nop
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000093 	.word	0x20000093
 8000934:	20000094 	.word	0x20000094

08000938 <saveSettings>:

void saveSettings(uint8_t mode) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d108      	bne.n	800095a <saveSettings+0x22>
		DS1307_Set_Time(hours, minutes);
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <saveSettings+0x40>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <saveSettings+0x44>)
 800094e:	7812      	ldrb	r2, [r2, #0]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f9aa 	bl	8000cac <DS1307_Set_Time>
	}else if(mode == 1){
		DS1307_Set_Time_alarm(alarm_hours, alarm_minutes);
	}

}
 8000958:	e00a      	b.n	8000970 <saveSettings+0x38>
	}else if(mode == 1){
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d107      	bne.n	8000970 <saveSettings+0x38>
		DS1307_Set_Time_alarm(alarm_hours, alarm_minutes);
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <saveSettings+0x48>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <saveSettings+0x4c>)
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffc8 	bl	8000900 <DS1307_Set_Time_alarm>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000001 	.word	0x20000001
 800097c:	20000002 	.word	0x20000002
 8000980:	20000093 	.word	0x20000093
 8000984:	20000094 	.word	0x20000094

08000988 <enterSetTimeMode>:

void enterSetTimeMode() {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    LCD_Clr();
 800098c:	f000 fae7 	bl	8000f5e <LCD_Clr>
    LCD_Set_Cursor(0, 0);
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fab3 	bl	8000efe <LCD_Set_Cursor>
    LCD_Str("Set Time/Date");
 8000998:	4818      	ldr	r0, [pc, #96]	; (80009fc <enterSetTimeMode+0x74>)
 800099a:	f000 facb 	bl	8000f34 <LCD_Str>

    while (1) {
        // Відображення параметра
        displayCurrentSetting(0);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff ff18 	bl	80007d4 <displayCurrentSetting>
        // Обробка натискання кнопок
        if (HAL_GPIO_ReadPin(GPIOB, OK_Pin) == 0) { // Кнопка для зміни значення
 80009a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a8:	4815      	ldr	r0, [pc, #84]	; (8000a00 <enterSetTimeMode+0x78>)
 80009aa:	f001 fa4b 	bl	8001e44 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d104      	bne.n	80009be <enterSetTimeMode+0x36>
            HAL_Delay(30); // Антидребезг
 80009b4:	201e      	movs	r0, #30
 80009b6:	f000 ffb7 	bl	8001928 <HAL_Delay>
            increaseValue();
 80009ba:	f7ff feb3 	bl	8000724 <increaseValue>
        }

        if (HAL_GPIO_ReadPin(GPIOB, SET_Pin) == 0) { // Кнопка для переходу до наступного параметра
 80009be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c2:	480f      	ldr	r0, [pc, #60]	; (8000a00 <enterSetTimeMode+0x78>)
 80009c4:	f001 fa3e 	bl	8001e44 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1e7      	bne.n	800099e <enterSetTimeMode+0x16>
            HAL_Delay(40); // Антидребезг
 80009ce:	2028      	movs	r0, #40	; 0x28
 80009d0:	f000 ffaa 	bl	8001928 <HAL_Delay>
            selectedParameter++;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <enterSetTimeMode+0x7c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <enterSetTimeMode+0x7c>)
 80009de:	701a      	strb	r2, [r3, #0]
            if (selectedParameter > 1) {
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <enterSetTimeMode+0x7c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d9da      	bls.n	800099e <enterSetTimeMode+0x16>
                selectedParameter = 0;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <enterSetTimeMode+0x7c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
                saveSettings(0);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ffa2 	bl	8000938 <saveSettings>
                break; // Вихід з режиму налаштування
 80009f4:	bf00      	nop
            }
        }
    }
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	080054ac 	.word	0x080054ac
 8000a00:	40020400 	.word	0x40020400
 8000a04:	20000092 	.word	0x20000092

08000a08 <enterSetAlarmMode>:

void enterSetAlarmMode(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	LCD_Clr();
 8000a0c:	f000 faa7 	bl	8000f5e <LCD_Clr>
	LCD_Set_Cursor(0, 0);
 8000a10:	2100      	movs	r1, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 fa73 	bl	8000efe <LCD_Set_Cursor>
	LCD_Str("Set alarm:");
 8000a18:	4818      	ldr	r0, [pc, #96]	; (8000a7c <enterSetAlarmMode+0x74>)
 8000a1a:	f000 fa8b 	bl	8000f34 <LCD_Str>
	while (1) {
		displayCurrentSetting(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff fed8 	bl	80007d4 <displayCurrentSetting>
		if (HAL_GPIO_ReadPin(GPIOB, OK_Pin) == 0) {
 8000a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a28:	4815      	ldr	r0, [pc, #84]	; (8000a80 <enterSetAlarmMode+0x78>)
 8000a2a:	f001 fa0b 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d104      	bne.n	8000a3e <enterSetAlarmMode+0x36>
			HAL_Delay(30);
 8000a34:	201e      	movs	r0, #30
 8000a36:	f000 ff77 	bl	8001928 <HAL_Delay>
			alarm_increaseValue();
 8000a3a:	f7ff fe53 	bl	80006e4 <alarm_increaseValue>
		}
		if (HAL_GPIO_ReadPin(GPIOB, SET_Pin) == 0) {
 8000a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <enterSetAlarmMode+0x78>)
 8000a44:	f001 f9fe 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1e7      	bne.n	8000a1e <enterSetAlarmMode+0x16>
			HAL_Delay(40);
 8000a4e:	2028      	movs	r0, #40	; 0x28
 8000a50:	f000 ff6a 	bl	8001928 <HAL_Delay>
			selectedParameter++;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <enterSetAlarmMode+0x7c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <enterSetAlarmMode+0x7c>)
 8000a5e:	701a      	strb	r2, [r3, #0]
			if (selectedParameter > 1) {
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <enterSetAlarmMode+0x7c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d9da      	bls.n	8000a1e <enterSetAlarmMode+0x16>
				selectedParameter = 0;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <enterSetAlarmMode+0x7c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
				saveSettings(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff ff62 	bl	8000938 <saveSettings>
				break;
 8000a74:	bf00      	nop
			}
		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	080054bc 	.word	0x080054bc
 8000a80:	40020400 	.word	0x40020400
 8000a84:	20000092 	.word	0x20000092

08000a88 <display_time>:


void display_time() {
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af02      	add	r7, sp, #8
    uint8_t timeData[7] = {0}; // Містить дані часу і дати: секунди, хвилини, години, день, місяць, рік
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2100      	movs	r1, #0
 8000a98:	460a      	mov	r2, r1
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	709a      	strb	r2, [r3, #2]
    uint8_t seconds = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	75fb      	strb	r3, [r7, #23]
    uint8_t minutes = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	75bb      	strb	r3, [r7, #22]
    uint8_t hours = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	757b      	strb	r3, [r7, #21]
    uint8_t day = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	753b      	strb	r3, [r7, #20]
    uint8_t month = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	74fb      	strb	r3, [r7, #19]
    uint8_t year = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	74bb      	strb	r3, [r7, #18]

    if (DS1307_Read_Time(timeData) == HAL_OK) {
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f928 	bl	8000d12 <DS1307_Read_Time>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d165      	bne.n	8000b94 <display_time+0x10c>
        minutes = BCD_to_Decimal(timeData[1]);
 8000ac8:	7a7b      	ldrb	r3, [r7, #9]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f898 	bl	8000c00 <BCD_to_Decimal>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	75bb      	strb	r3, [r7, #22]
        hours = BCD_to_Decimal(timeData[2]);
 8000ad4:	7abb      	ldrb	r3, [r7, #10]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f892 	bl	8000c00 <BCD_to_Decimal>
 8000adc:	4603      	mov	r3, r0
 8000ade:	757b      	strb	r3, [r7, #21]
        char timeStr[5];
        sprintf(timeStr, "%02d:%02d      %02d:%02d",hours, minutes, alarm_hours, alarm_minutes);
 8000ae0:	7d7a      	ldrb	r2, [r7, #21]
 8000ae2:	7dbb      	ldrb	r3, [r7, #22]
 8000ae4:	492d      	ldr	r1, [pc, #180]	; (8000b9c <display_time+0x114>)
 8000ae6:	7809      	ldrb	r1, [r1, #0]
 8000ae8:	460c      	mov	r4, r1
 8000aea:	492d      	ldr	r1, [pc, #180]	; (8000ba0 <display_time+0x118>)
 8000aec:	7809      	ldrb	r1, [r1, #0]
 8000aee:	4638      	mov	r0, r7
 8000af0:	9101      	str	r1, [sp, #4]
 8000af2:	9400      	str	r4, [sp, #0]
 8000af4:	492b      	ldr	r1, [pc, #172]	; (8000ba4 <display_time+0x11c>)
 8000af6:	f004 f80f 	bl	8004b18 <siprintf>

        if (minutes != last_minutes || finish_menu == 1) {
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <display_time+0x120>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	7dba      	ldrb	r2, [r7, #22]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d104      	bne.n	8000b10 <display_time+0x88>
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <display_time+0x124>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d120      	bne.n	8000b52 <display_time+0xca>
            finish_menu = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <display_time+0x124>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
            last_minutes = minutes;
 8000b16:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <display_time+0x120>)
 8000b18:	7dbb      	ldrb	r3, [r7, #22]
 8000b1a:	7013      	strb	r3, [r2, #0]
            LCD_Clr();
 8000b1c:	f000 fa1f 	bl	8000f5e <LCD_Clr>
            HAL_Delay(10); // Затримка після очищення дисплея
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 ff01 	bl	8001928 <HAL_Delay>
            LCD_Set_Cursor(0, 0);
 8000b26:	2100      	movs	r1, #0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f9e8 	bl	8000efe <LCD_Set_Cursor>
            LCD_Str("Time:     Alarm:");
 8000b2e:	4820      	ldr	r0, [pc, #128]	; (8000bb0 <display_time+0x128>)
 8000b30:	f000 fa00 	bl	8000f34 <LCD_Str>
            LCD_Set_Cursor(0, 1);
 8000b34:	2101      	movs	r1, #1
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f9e1 	bl	8000efe <LCD_Set_Cursor>
            LCD_Str(timeStr);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f9f8 	bl	8000f34 <LCD_Str>
            HAL_UART_Transmit(&huart1, timeStr, sizeof(timeStr), HAL_MAX_DELAY);
 8000b44:	4639      	mov	r1, r7
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	2205      	movs	r2, #5
 8000b4c:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <display_time+0x12c>)
 8000b4e:	f003 fc3c 	bl	80043ca <HAL_UART_Transmit>
        }

        // Перевірка для спрацювання будильника
        if (hours == alarm_hours && minutes == alarm_minutes) {
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <display_time+0x114>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	7d7a      	ldrb	r2, [r7, #21]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d11b      	bne.n	8000b94 <display_time+0x10c>
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <display_time+0x118>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	7dba      	ldrb	r2, [r7, #22]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d116      	bne.n	8000b94 <display_time+0x10c>
        	PlayMelody();
 8000b66:	f7ff fd3b 	bl	80005e0 <PlayMelody>
        	while(HAL_GPIO_ReadPin(GPIOB, OK_Pin) == 0){
 8000b6a:	e00b      	b.n	8000b84 <display_time+0xfc>
        		DS1307_Read_Time(timeData);
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f8ce 	bl	8000d12 <DS1307_Read_Time>
        		HAL_Delay(60000 -seconds);
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	f5c3 436a 	rsb	r3, r3, #59904	; 0xea00
 8000b7c:	3360      	adds	r3, #96	; 0x60
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fed2 	bl	8001928 <HAL_Delay>
        	while(HAL_GPIO_ReadPin(GPIOB, OK_Pin) == 0){
 8000b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <display_time+0x130>)
 8000b8a:	f001 f95b 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0eb      	beq.n	8000b6c <display_time+0xe4>
        	}
        }

    }
}
 8000b94:	bf00      	nop
 8000b96:	371c      	adds	r7, #28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	20000093 	.word	0x20000093
 8000ba0:	20000094 	.word	0x20000094
 8000ba4:	080054c8 	.word	0x080054c8
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000091 	.word	0x20000091
 8000bb0:	080054e4 	.word	0x080054e4
 8000bb4:	20000134 	.word	0x20000134
 8000bb8:	40020400 	.word	0x40020400

08000bbc <Decimal_to_BCD>:
#include "DS1307.h"
#include "main.h"


uint8_t Decimal_to_BCD(uint8_t val) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <Decimal_to_BCD+0x40>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	b2d8      	uxtb	r0, r3
 8000bd6:	79fa      	ldrb	r2, [r7, #7]
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <Decimal_to_BCD+0x40>)
 8000bda:	fba3 1302 	umull	r1, r3, r3, r2
 8000bde:	08d9      	lsrs	r1, r3, #3
 8000be0:	460b      	mov	r3, r1
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4403      	add	r3, r0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	cccccccd 	.word	0xcccccccd

08000c00 <BCD_to_Decimal>:

// Функція для перетворення BCD у десяткове число
uint8_t BCD_to_Decimal(uint8_t val) {
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	091b      	lsrs	r3, r3, #4
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4413      	add	r3, r2
 8000c24:	b2db      	uxtb	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <DS1307_Write_Register>:

HAL_StatusTypeDef DS1307_Write_Register(uint8_t reg, uint8_t data) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, DS1307_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	1dbb      	adds	r3, r7, #6
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	21d0      	movs	r1, #208	; 0xd0
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <DS1307_Write_Register+0x38>)
 8000c5c:	f001 fb4c 	bl	80022f8 <HAL_I2C_Mem_Write>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000098 	.word	0x20000098

08000c70 <DS1307_Read_Register>:

// Функція зчитування одного байту з DS1307
HAL_StatusTypeDef DS1307_Read_Register(uint8_t reg, uint8_t *data) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af04      	add	r7, sp, #16
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(50);
 8000c7c:	2032      	movs	r0, #50	; 0x32
 8000c7e:	f000 fe53 	bl	8001928 <HAL_Delay>
    return HAL_I2C_Mem_Read(&hi2c1, DS1307_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	21d0      	movs	r1, #208	; 0xd0
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <DS1307_Read_Register+0x38>)
 8000c9a:	f001 fc27 	bl	80024ec <HAL_I2C_Mem_Read>
 8000c9e:	4603      	mov	r3, r0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000098 	.word	0x20000098

08000cac <DS1307_Set_Time>:

// Функція для встановлення часу
HAL_StatusTypeDef DS1307_Set_Time(uint8_t hours, uint8_t minutes) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;


    // Записуємо хвилини
    HAL_Delay(20);
 8000cbc:	2014      	movs	r0, #20
 8000cbe:	f000 fe33 	bl	8001928 <HAL_Delay>
    status = DS1307_Write_Register(DS1307_MINUTES_REG, Decimal_to_BCD(minutes));
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff79 	bl	8000bbc <Decimal_to_BCD>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ffb0 	bl	8000c34 <DS1307_Write_Register>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <DS1307_Set_Time+0x36>
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	e013      	b.n	8000d0a <DS1307_Set_Time+0x5e>

    // Записуємо години
    HAL_Delay(20);
 8000ce2:	2014      	movs	r0, #20
 8000ce4:	f000 fe20 	bl	8001928 <HAL_Delay>
    status = DS1307_Write_Register(DS1307_HOURS_REG, Decimal_to_BCD(hours));
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff66 	bl	8000bbc <Decimal_to_BCD>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f7ff ff9d 	bl	8000c34 <DS1307_Write_Register>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <DS1307_Set_Time+0x5c>
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	e000      	b.n	8000d0a <DS1307_Set_Time+0x5e>

    return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <DS1307_Read_Time>:
    return HAL_OK;
}


// Функція для зчитування часу
HAL_StatusTypeDef DS1307_Read_Time(uint8_t *timeData) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Зчитуємо секунди
    HAL_Delay(50);
 8000d1a:	2032      	movs	r0, #50	; 0x32
 8000d1c:	f000 fe04 	bl	8001928 <HAL_Delay>
    status = DS1307_Read_Register(DS1307_SECONDS_REG, &timeData[0]);
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ffa4 	bl	8000c70 <DS1307_Read_Register>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <DS1307_Read_Time+0x24>
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	e050      	b.n	8000dd8 <DS1307_Read_Time+0xc6>

    // Зчитуємо хвилини
    HAL_Delay(50);
 8000d36:	2032      	movs	r0, #50	; 0x32
 8000d38:	f000 fdf6 	bl	8001928 <HAL_Delay>
    status = DS1307_Read_Register(DS1307_MINUTES_REG, &timeData[1]);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff ff94 	bl	8000c70 <DS1307_Read_Register>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <DS1307_Read_Time+0x44>
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	e040      	b.n	8000dd8 <DS1307_Read_Time+0xc6>

    // Зчитуємо години
    HAL_Delay(50);
 8000d56:	2032      	movs	r0, #50	; 0x32
 8000d58:	f000 fde6 	bl	8001928 <HAL_Delay>
    status = DS1307_Read_Register(DS1307_HOURS_REG, &timeData[2]);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3302      	adds	r3, #2
 8000d60:	4619      	mov	r1, r3
 8000d62:	2002      	movs	r0, #2
 8000d64:	f7ff ff84 	bl	8000c70 <DS1307_Read_Register>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <DS1307_Read_Time+0x64>
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	e030      	b.n	8000dd8 <DS1307_Read_Time+0xc6>
    HAL_Delay(50);
 8000d76:	2032      	movs	r0, #50	; 0x32
 8000d78:	f000 fdd6 	bl	8001928 <HAL_Delay>

    status = DS1307_Read_Register(DS1307_DAY_REG, &timeData[3]);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3303      	adds	r3, #3
 8000d80:	4619      	mov	r1, r3
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff ff74 	bl	8000c70 <DS1307_Read_Register>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <DS1307_Read_Time+0x84>
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	e020      	b.n	8000dd8 <DS1307_Read_Time+0xc6>
    HAL_Delay(50);
 8000d96:	2032      	movs	r0, #50	; 0x32
 8000d98:	f000 fdc6 	bl	8001928 <HAL_Delay>
    status = DS1307_Read_Register(DS1307_MONTH_REG, &timeData[4]);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	2005      	movs	r0, #5
 8000da4:	f7ff ff64 	bl	8000c70 <DS1307_Read_Register>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <DS1307_Read_Time+0xa4>
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	e010      	b.n	8000dd8 <DS1307_Read_Time+0xc6>
    HAL_Delay(50);
 8000db6:	2032      	movs	r0, #50	; 0x32
 8000db8:	f000 fdb6 	bl	8001928 <HAL_Delay>
    status = DS1307_Read_Register(DS1307_YEAR_REG, &timeData[5]);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3305      	adds	r3, #5
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2006      	movs	r0, #6
 8000dc4:	f7ff ff54 	bl	8000c70 <DS1307_Read_Register>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <DS1307_Read_Time+0xc4>
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	e000      	b.n	8000dd8 <DS1307_Read_Time+0xc6>

    return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <EEPROM_Write>:
#include "EEPROM.h"
#include "main.h"

HAL_StatusTypeDef EEPROM_Write(uint16_t memAddress, uint8_t* data, uint16_t size) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	80fb      	strh	r3, [r7, #6]
 8000dec:	4613      	mov	r3, r2
 8000dee:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2310      	movs	r3, #16
 8000e02:	21a0      	movs	r1, #160	; 0xa0
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <EEPROM_Write+0x4c>)
 8000e06:	f001 fa77 	bl	80022f8 <HAL_I2C_Mem_Write>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d103      	bne.n	8000e1c <EEPROM_Write+0x3c>
        UART_Send_Status("Data written successfully.\r\n");
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <EEPROM_Write+0x50>)
 8000e16:	f000 fa61 	bl	80012dc <UART_Send_Status>
 8000e1a:	e002      	b.n	8000e22 <EEPROM_Write+0x42>
    } else {
        UART_Send_Status("Failed to write data.\r\n");
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <EEPROM_Write+0x54>)
 8000e1e:	f000 fa5d 	bl	80012dc <UART_Send_Status>
    }
    return status;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000098 	.word	0x20000098
 8000e30:	080054f8 	.word	0x080054f8
 8000e34:	08005518 	.word	0x08005518

08000e38 <EEPROM_Read>:

HAL_StatusTypeDef EEPROM_Read(uint16_t memAddress, uint8_t* buffer, uint16_t size) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af04      	add	r7, sp, #16
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	80fb      	strh	r3, [r7, #6]
 8000e44:	4613      	mov	r3, r2
 8000e46:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, buffer, size, HAL_MAX_DELAY);
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2310      	movs	r3, #16
 8000e5a:	21a0      	movs	r1, #160	; 0xa0
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <EEPROM_Read+0x4c>)
 8000e5e:	f001 fb45 	bl	80024ec <HAL_I2C_Mem_Read>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <EEPROM_Read+0x3c>
        UART_Send_Status("Data read successfully.\r\n");
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <EEPROM_Read+0x50>)
 8000e6e:	f000 fa35 	bl	80012dc <UART_Send_Status>
 8000e72:	e002      	b.n	8000e7a <EEPROM_Read+0x42>
    } else {
        UART_Send_Status("Failed to read data.\r\n");
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <EEPROM_Read+0x54>)
 8000e76:	f000 fa31 	bl	80012dc <UART_Send_Status>
    }
    return status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000098 	.word	0x20000098
 8000e88:	08005530 	.word	0x08005530
 8000e8c:	0800554c 	.word	0x0800554c

08000e90 <LCD_Init>:
#include "LCD.h"
#include "main.h"

void LCD_Init()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    HAL_Delay(15);
 8000e94:	200f      	movs	r0, #15
 8000e96:	f000 fd47 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b11);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f000 f86a 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(5);
 8000ea0:	2005      	movs	r0, #5
 8000ea2:	f000 fd41 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b11);
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f000 f864 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fd3b 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b11);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f85e 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fd35 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b10);
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f000 f858 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 fd2f 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b101000);
 8000eca:	2028      	movs	r0, #40	; 0x28
 8000ecc:	f000 f852 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 fd29 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b1100);
 8000ed6:	200c      	movs	r0, #12
 8000ed8:	f000 f84c 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 fd23 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b110);
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f000 f846 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fd1d 	bl	8001928 <HAL_Delay>
    LCD_Send_Comand(0b1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 f840 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 fd17 	bl	8001928 <HAL_Delay>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t  x, uint8_t  y)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	460a      	mov	r2, r1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	71bb      	strb	r3, [r7, #6]
	uint8_t  addr = (0x40 * y + x) | (1 << 7);
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4413      	add	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	73fb      	strb	r3, [r7, #15]
	LCD_Send_Comand(addr);
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f824 	bl	8000f74 <LCD_Send_Comand>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <LCD_Str>:
{
    LCD_Send_Data(c);
}

void LCD_Str(uint8_t  str[])
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	  while (*str) LCD_Send_Data(*str++);
 8000f3c:	e006      	b.n	8000f4c <LCD_Str+0x18>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f844 	bl	8000fd4 <LCD_Send_Data>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f4      	bne.n	8000f3e <LCD_Str+0xa>
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <LCD_Clr>:

void LCD_Clr()
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
	LCD_Send_Comand(0b1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 f806 	bl	8000f74 <LCD_Send_Comand>
    HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f000 fcdd 	bl	8001928 <HAL_Delay>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <LCD_Send_Comand>:

void LCD_Send_Comand(uint8_t  Command){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	uint8_t  Data[4];
	Data[0] = (Command & 0b11110000) | 0b1100;
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	f023 030f 	bic.w	r3, r3, #15
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	f043 030c 	orr.w	r3, r3, #12
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	733b      	strb	r3, [r7, #12]
	Data[1] =(Command &  0b11110000);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f023 030f 	bic.w	r3, r3, #15
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	737b      	strb	r3, [r7, #13]
	Data[2] =(Command << 4) | 0b1100;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	f043 030c 	orr.w	r3, r3, #12
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73bb      	strb	r3, [r7, #14]
	Data[3] =(Command << 4) ;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, Data, 4, 100);
 8000fb4:	f107 020c 	add.w	r2, r7, #12
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	217e      	movs	r1, #126	; 0x7e
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <LCD_Send_Comand+0x5c>)
 8000fc2:	f001 f89b 	bl	80020fc <HAL_I2C_Master_Transmit>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000098 	.word	0x20000098

08000fd4 <LCD_Send_Data>:

void LCD_Send_Data(uint8_t  Command){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t  Data[4];
	Data[0] = (Command & 0b11110000)|0b1101;
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	f023 030f 	bic.w	r3, r3, #15
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f043 030d 	orr.w	r3, r3, #13
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	733b      	strb	r3, [r7, #12]
	Data[1] =(Command &  0b11110000)|0b1001;
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	f023 030f 	bic.w	r3, r3, #15
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	f043 0309 	orr.w	r3, r3, #9
 8001000:	b25b      	sxtb	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	737b      	strb	r3, [r7, #13]
	Data[2] =((Command << 4))| 0b1101;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	b25b      	sxtb	r3, r3
 800100c:	f043 030d 	orr.w	r3, r3, #13
 8001010:	b25b      	sxtb	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	73bb      	strb	r3, [r7, #14]
	Data[3] =((Command << 4))| 0b1001;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	b25b      	sxtb	r3, r3
 800101c:	f043 0309 	orr.w	r3, r3, #9
 8001020:	b25b      	sxtb	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, Data, 4, 100);
 8001026:	f107 020c 	add.w	r2, r7, #12
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2304      	movs	r3, #4
 8001030:	217e      	movs	r1, #126	; 0x7e
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <LCD_Send_Data+0x6c>)
 8001034:	f001 f862 	bl	80020fc <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000098 	.word	0x20000098

08001044 <SystemClock_Config>:
#include "main.h"
#include "System.h"

void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	; 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fd58 	bl	8004b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemClock_Config+0xb8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <SystemClock_Config+0xb8>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <SystemClock_Config+0xb8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <SystemClock_Config+0xbc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <SystemClock_Config+0xbc>)
 8001092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <SystemClock_Config+0xbc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f81b 	bl	80030f4 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010c4:	f000 fa0c 	bl	80014e0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fa7e 	bl	80035e4 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ee:	f000 f9f7 	bl	80014e0 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3750      	adds	r7, #80	; 0x50
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C1_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_I2C1_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C1_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_I2C1_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_I2C1_Init+0x50>)
 8001122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2C1_Init+0x50>)
 8001142:	f000 fe97 	bl	8001e74 <HAL_I2C_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f9c8 	bl	80014e0 <Error_Handler>
  }

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000098 	.word	0x20000098
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0


  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_TIM2_Init+0xac>)
 8001184:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001188:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_TIM2_Init+0xac>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_TIM2_Init+0xac>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_TIM2_Init+0xac>)
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_TIM2_Init+0xac>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_TIM2_Init+0xac>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <MX_TIM2_Init+0xac>)
 80011ac:	f002 fbfa 	bl	80039a4 <HAL_TIM_PWM_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011b6:	f000 f993 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	4619      	mov	r1, r3
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <MX_TIM2_Init+0xac>)
 80011ca:	f003 f843 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011d4:	f000 f984 	bl	80014e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM2_Init+0xac>)
 80011f0:	f002 fd3c 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011fa:	f000 f971 	bl	80014e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM2_Init+0xac>)
 8001200:	f000 fa04 	bl	800160c <HAL_TIM_MspPostInit>

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000ec 	.word	0x200000ec

08001210 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_USART1_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_USART1_UART_Init+0x4c>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART1_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001248:	f003 f872 	bl	8004330 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f000 f945 	bl	80014e0 <Error_Handler>
  }

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000134 	.word	0x20000134
 8001260:	40011000 	.word	0x40011000

08001264 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_GPIO_Init+0x70>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <MX_GPIO_Init+0x70>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_GPIO_Init+0x70>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_GPIO_Init+0x70>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <MX_GPIO_Init+0x70>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_GPIO_Init+0x70>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = SET_Pin|OK_Pin;
 80012b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_GPIO_Init+0x74>)
 80012c8:	f000 fc38 	bl	8001b3c <HAL_GPIO_Init>

}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400

080012dc <UART_Send_Status>:
#include "UART.h"

void UART_Send_Status(const char* message) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7fe ff7b 	bl	80001e0 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <UART_Send_Status+0x28>)
 80012f6:	f003 f868 	bl	80043ca <HAL_UART_Transmit>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000134 	.word	0x20000134

08001308 <main>:
UART_HandleTypeDef huart1;
uint8_t flag_set = 0;


int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
  HAL_Init();
 800130e:	f000 fa99 	bl	8001844 <HAL_Init>

  SystemClock_Config();
 8001312:	f7ff fe97 	bl	8001044 <SystemClock_Config>

  MX_GPIO_Init();
 8001316:	f7ff ffa5 	bl	8001264 <MX_GPIO_Init>
  MX_I2C1_Init();
 800131a:	f7ff fef3 	bl	8001104 <MX_I2C1_Init>
  MX_TIM2_Init();
 800131e:	f7ff ff1f 	bl	8001160 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001322:	f7ff ff75 	bl	8001210 <MX_USART1_UART_Init>
  LCD_Init();
 8001326:	f7ff fdb3 	bl	8000e90 <LCD_Init>
  LCD_Set_Cursor(2, 0);
 800132a:	2100      	movs	r1, #0
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff fde6 	bl	8000efe <LCD_Set_Cursor>
  LCD_Str("Alarm project");
 8001332:	4860      	ldr	r0, [pc, #384]	; (80014b4 <main+0x1ac>)
 8001334:	f7ff fdfe 	bl	8000f34 <LCD_Str>
  LCD_Set_Cursor(0, 1);
 8001338:	2101      	movs	r1, #1
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fddf 	bl	8000efe <LCD_Set_Cursor>
  LCD_Str("Viacheslav Sadko");
 8001340:	485d      	ldr	r0, [pc, #372]	; (80014b8 <main+0x1b0>)
 8001342:	f7ff fdf7 	bl	8000f34 <LCD_Str>
  HAL_Delay(2000);
 8001346:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800134a:	f000 faed 	bl	8001928 <HAL_Delay>
  uint8_t status = 255;
 800134e:	23ff      	movs	r3, #255	; 0xff
 8001350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t last_status = 255;
 8001354:	23ff      	movs	r3, #255	; 0xff
 8001356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  char buffer[31];
  EEPROM_Read(0, &alarm_hours, 1);
 800135a:	2201      	movs	r2, #1
 800135c:	4957      	ldr	r1, [pc, #348]	; (80014bc <main+0x1b4>)
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fd6a 	bl	8000e38 <EEPROM_Read>
  EEPROM_Read(1, &alarm_minutes, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	4956      	ldr	r1, [pc, #344]	; (80014c0 <main+0x1b8>)
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff fd65 	bl	8000e38 <EEPROM_Read>
  while (1)
  {
      // Відображаємо час в звичайному режимі
      if (currentMode == MODE_NORMAL) {
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <main+0x1bc>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <main+0x72>
          display_time();
 8001376:	f7ff fb87 	bl	8000a88 <display_time>
      }

      // Якщо натиснуто кнопку OK
      if (HAL_GPIO_ReadPin(GPIOB, OK_Pin) == 0) {
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	4852      	ldr	r0, [pc, #328]	; (80014c8 <main+0x1c0>)
 8001380:	f000 fd60 	bl	8001e44 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d169      	bne.n	800145e <main+0x156>
          HAL_Delay(50); // Дебаунс
 800138a:	2032      	movs	r0, #50	; 0x32
 800138c:	f000 facc 	bl	8001928 <HAL_Delay>
          while (HAL_GPIO_ReadPin(GPIOB, OK_Pin) == 0); // Очікуємо відпускання кнопки
 8001390:	bf00      	nop
 8001392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001396:	484c      	ldr	r0, [pc, #304]	; (80014c8 <main+0x1c0>)
 8001398:	f000 fd54 	bl	8001e44 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f7      	beq.n	8001392 <main+0x8a>

          switch (currentMode) {
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <main+0x1bc>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d85a      	bhi.n	8001460 <main+0x158>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <main+0xa8>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013ef 	.word	0x080013ef
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001453 	.word	0x08001453
              case MODE_NORMAL:
                  // Перехід до головного меню
                  currentMode = MODE_MENU;
 80013c0:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <main+0x1bc>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
                  flag_set = 0; // Початковий вибір — "Set time"
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <main+0x1c4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
                  LCD_Clr();
 80013cc:	f7ff fdc7 	bl	8000f5e <LCD_Clr>
                  LCD_Set_Cursor(0, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fd93 	bl	8000efe <LCD_Set_Cursor>
                  LCD_Str("* Set time");
 80013d8:	483d      	ldr	r0, [pc, #244]	; (80014d0 <main+0x1c8>)
 80013da:	f7ff fdab 	bl	8000f34 <LCD_Str>
                  LCD_Set_Cursor(0, 1);
 80013de:	2101      	movs	r1, #1
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fd8c 	bl	8000efe <LCD_Set_Cursor>
                  LCD_Str("  Set alarm");
 80013e6:	483b      	ldr	r0, [pc, #236]	; (80014d4 <main+0x1cc>)
 80013e8:	f7ff fda4 	bl	8000f34 <LCD_Str>
                  break;
 80013ec:	e038      	b.n	8001460 <main+0x158>

              case MODE_MENU:
                  // Перемикання між "Set time" і "Set alarm"
                  if (flag_set == 0) {
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <main+0x1c4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d113      	bne.n	800141e <main+0x116>
                      LCD_Clr();
 80013f6:	f7ff fdb2 	bl	8000f5e <LCD_Clr>

                      LCD_Set_Cursor(0, 0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fd7e 	bl	8000efe <LCD_Set_Cursor>
                      LCD_Str("  Set time");
 8001402:	4835      	ldr	r0, [pc, #212]	; (80014d8 <main+0x1d0>)
 8001404:	f7ff fd96 	bl	8000f34 <LCD_Str>
                      LCD_Set_Cursor(0, 1);
 8001408:	2101      	movs	r1, #1
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff fd77 	bl	8000efe <LCD_Set_Cursor>
                      LCD_Str("* Set alarm");
 8001410:	4832      	ldr	r0, [pc, #200]	; (80014dc <main+0x1d4>)
 8001412:	f7ff fd8f 	bl	8000f34 <LCD_Str>
                      flag_set = 1;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <main+0x1c4>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
                      LCD_Str("* Set time");
                      LCD_Set_Cursor(0, 1);
                      LCD_Str("  Set alarm");
                      flag_set = 0;
                  }
                  break;
 800141c:	e020      	b.n	8001460 <main+0x158>
                      LCD_Clr();
 800141e:	f7ff fd9e 	bl	8000f5e <LCD_Clr>
                      LCD_Set_Cursor(0, 0);
 8001422:	2100      	movs	r1, #0
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff fd6a 	bl	8000efe <LCD_Set_Cursor>
                      LCD_Str("* Set time");
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <main+0x1c8>)
 800142c:	f7ff fd82 	bl	8000f34 <LCD_Str>
                      LCD_Set_Cursor(0, 1);
 8001430:	2101      	movs	r1, #1
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fd63 	bl	8000efe <LCD_Set_Cursor>
                      LCD_Str("  Set alarm");
 8001438:	4826      	ldr	r0, [pc, #152]	; (80014d4 <main+0x1cc>)
 800143a:	f7ff fd7b 	bl	8000f34 <LCD_Str>
                      flag_set = 0;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <main+0x1c4>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
                  break;
 8001444:	e00c      	b.n	8001460 <main+0x158>

              case MODE_SET_TIME:
                  // Логіка для налаштування часу
                  enterSetTimeMode();
 8001446:	f7ff fa9f 	bl	8000988 <enterSetTimeMode>
                  currentMode = MODE_NORMAL; // Повертаємось до нормального режиму після налаштування
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <main+0x1bc>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
                  break;
 8001450:	e006      	b.n	8001460 <main+0x158>

              case MODE_SET_ALARM:
                  // Логіка для налаштування будильника
                  enterSetAlarmMode();
 8001452:	f7ff fad9 	bl	8000a08 <enterSetAlarmMode>
                  currentMode = MODE_NORMAL; // Повертаємось до нормального режиму після налаштування
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <main+0x1bc>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
                  break;
 800145c:	e000      	b.n	8001460 <main+0x158>
          }
      }
 800145e:	bf00      	nop

      // Якщо натиснуто кнопку SET у меню
      if (HAL_GPIO_ReadPin(GPIOB, SET_Pin) == 0 && currentMode == MODE_MENU) {
 8001460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001464:	4818      	ldr	r0, [pc, #96]	; (80014c8 <main+0x1c0>)
 8001466:	f000 fced 	bl	8001e44 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	f47f af7e 	bne.w	800136e <main+0x66>
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <main+0x1bc>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	f47f af79 	bne.w	800136e <main+0x66>
          HAL_Delay(50); // Дебаунс
 800147c:	2032      	movs	r0, #50	; 0x32
 800147e:	f000 fa53 	bl	8001928 <HAL_Delay>
          while (HAL_GPIO_ReadPin(GPIOB, SET_Pin) == 0); // Очікуємо відпускання кнопки
 8001482:	bf00      	nop
 8001484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001488:	480f      	ldr	r0, [pc, #60]	; (80014c8 <main+0x1c0>)
 800148a:	f000 fcdb 	bl	8001e44 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f7      	beq.n	8001484 <main+0x17c>

          if (flag_set == 0) {
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <main+0x1c4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <main+0x1a0>
        	  enterSetTimeMode();
 800149c:	f7ff fa74 	bl	8000988 <enterSetTimeMode>
        	  currentMode = MODE_NORMAL;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <main+0x1bc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e762      	b.n	800136e <main+0x66>

          } else {
        	  enterSetAlarmMode();
 80014a8:	f7ff faae 	bl	8000a08 <enterSetAlarmMode>
        	  currentMode = MODE_NORMAL;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <main+0x1bc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
      if (currentMode == MODE_NORMAL) {
 80014b2:	e75c      	b.n	800136e <main+0x66>
 80014b4:	08005564 	.word	0x08005564
 80014b8:	08005574 	.word	0x08005574
 80014bc:	20000093 	.word	0x20000093
 80014c0:	20000094 	.word	0x20000094
 80014c4:	20000090 	.word	0x20000090
 80014c8:	40020400 	.word	0x40020400
 80014cc:	20000178 	.word	0x20000178
 80014d0:	08005588 	.word	0x08005588
 80014d4:	08005594 	.word	0x08005594
 80014d8:	080055a0 	.word	0x080055a0
 80014dc:	080055ac 	.word	0x080055ac

080014e0 <Error_Handler>:




void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	2312      	movs	r3, #18
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158a:	2304      	movs	r3, #4
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <HAL_I2C_MspInit+0x8c>)
 8001596:	f000 fad1 	bl	8001b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015dc:	d10d      	bne.n	80015fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_TIM_PWM_MspInit+0x3c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_TIM_PWM_MspInit+0x3c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_TIM_PWM_MspInit+0x3c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162c:	d11d      	bne.n	800166a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_TIM_MspPostInit+0x68>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_TIM_MspPostInit+0x68>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_TIM_MspPostInit+0x68>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800164a:	2301      	movs	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165a:	2301      	movs	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <HAL_TIM_MspPostInit+0x6c>)
 8001666:	f000 fa69 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_UART_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12c      	bne.n	80016f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e8:	2307      	movs	r3, #7
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_UART_MspInit+0x8c>)
 80016f4:	f000 fa22 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40011000 	.word	0x40011000
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f8c6 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f003 f990 	bl	8004ab4 <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20010000 	.word	0x20010000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	2000017c 	.word	0x2000017c
 80017c8:	20000198 	.word	0x20000198

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff ffd7 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f003 f94f 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fd71 	bl	8001308 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001834:	0800561c 	.word	0x0800561c
  ldr r2, =_sbss
 8001838:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800183c:	20000194 	.word	0x20000194

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f931 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fe38 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f93b 	bl	8001b22 <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f911 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000004 	.word	0x20000004
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000000c 	.word	0x2000000c
 800190c:	20000180 	.word	0x20000180

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000180 	.word	0x20000180

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000000c 	.word	0x2000000c

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff47 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff5c 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffb0 	bl	8001a90 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e159      	b.n	8001e0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8148 	bne.w	8001e06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d005      	beq.n	8001b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d017      	beq.n	8001c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a2 	beq.w	8001e06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x202>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a48      	ldr	r2, [pc, #288]	; (8001e30 <HAL_GPIO_Init+0x2f4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x1fe>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a47      	ldr	r2, [pc, #284]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a46      	ldr	r2, [pc, #280]	; (8001e38 <HAL_GPIO_Init+0x2fc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x1f6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x1f2>
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	e008      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d50:	4935      	ldr	r1, [pc, #212]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dac:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e00:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <HAL_GPIO_Init+0x304>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	f67f aea2 	bls.w	8001b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40013800 	.word	0x40013800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020c00 	.word	0x40020c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e12b      	b.n	80020de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fb4e 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2224      	movs	r2, #36	; 0x24
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed8:	f001 fd3c 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8001edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a81      	ldr	r2, [pc, #516]	; (80020e8 <HAL_I2C_Init+0x274>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d807      	bhi.n	8001ef8 <HAL_I2C_Init+0x84>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a80      	ldr	r2, [pc, #512]	; (80020ec <HAL_I2C_Init+0x278>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e006      	b.n	8001f06 <HAL_I2C_Init+0x92>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a7d      	ldr	r2, [pc, #500]	; (80020f0 <HAL_I2C_Init+0x27c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	bf94      	ite	ls
 8001f00:	2301      	movls	r3, #1
 8001f02:	2300      	movhi	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0e7      	b.n	80020de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a78      	ldr	r2, [pc, #480]	; (80020f4 <HAL_I2C_Init+0x280>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0c9b      	lsrs	r3, r3, #18
 8001f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a6a      	ldr	r2, [pc, #424]	; (80020e8 <HAL_I2C_Init+0x274>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d802      	bhi.n	8001f48 <HAL_I2C_Init+0xd4>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3301      	adds	r3, #1
 8001f46:	e009      	b.n	8001f5c <HAL_I2C_Init+0xe8>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <HAL_I2C_Init+0x284>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	495c      	ldr	r1, [pc, #368]	; (80020e8 <HAL_I2C_Init+0x274>)
 8001f78:	428b      	cmp	r3, r1
 8001f7a:	d819      	bhi.n	8001fb0 <HAL_I2C_Init+0x13c>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1e59      	subs	r1, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8a:	1c59      	adds	r1, r3, #1
 8001f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f90:	400b      	ands	r3, r1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_I2C_Init+0x138>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1e59      	subs	r1, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001faa:	e051      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 8001fac:	2304      	movs	r3, #4
 8001fae:	e04f      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d111      	bne.n	8001fdc <HAL_I2C_Init+0x168>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e58      	subs	r0, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	440b      	add	r3, r1
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e012      	b.n	8002002 <HAL_I2C_Init+0x18e>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	0099      	lsls	r1, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Init+0x196>
 8002006:	2301      	movs	r3, #1
 8002008:	e022      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10e      	bne.n	8002030 <HAL_I2C_Init+0x1bc>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e58      	subs	r0, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	440b      	add	r3, r1
 8002020:	fbb0 f3f3 	udiv	r3, r0, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202e:	e00f      	b.n	8002050 <HAL_I2C_Init+0x1dc>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1e58      	subs	r0, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	0099      	lsls	r1, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	6809      	ldr	r1, [r1, #0]
 8002054:	4313      	orrs	r3, r2
 8002056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800207e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6911      	ldr	r1, [r2, #16]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68d2      	ldr	r2, [r2, #12]
 800208a:	4311      	orrs	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	430b      	orrs	r3, r1
 8002092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	000186a0 	.word	0x000186a0
 80020ec:	001e847f 	.word	0x001e847f
 80020f0:	003d08ff 	.word	0x003d08ff
 80020f4:	431bde83 	.word	0x431bde83
 80020f8:	10624dd3 	.word	0x10624dd3

080020fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	460b      	mov	r3, r1
 800210a:	817b      	strh	r3, [r7, #10]
 800210c:	4613      	mov	r3, r2
 800210e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff fbfe 	bl	8001910 <HAL_GetTick>
 8002114:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	f040 80e0 	bne.w	80022e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2319      	movs	r3, #25
 800212a:	2201      	movs	r2, #1
 800212c:	4970      	ldr	r1, [pc, #448]	; (80022f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fe02 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
 800213c:	e0d3      	b.n	80022e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2C_Master_Transmit+0x50>
 8002148:	2302      	movs	r3, #2
 800214a:	e0cc      	b.n	80022e6 <HAL_I2C_Master_Transmit+0x1ea>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d007      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2221      	movs	r2, #33	; 0x21
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2210      	movs	r2, #16
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	893a      	ldrh	r2, [r7, #8]
 80021a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a50      	ldr	r2, [pc, #320]	; (80022f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fbbc 	bl	8002938 <I2C_MasterRequestWrite>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e08d      	b.n	80022e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021e0:	e066      	b.n	80022b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	6a39      	ldr	r1, [r7, #32]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fe7c 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d107      	bne.n	800220a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06b      	b.n	80022e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b04      	cmp	r3, #4
 800224a:	d11b      	bne.n	8002284 <HAL_I2C_Master_Transmit+0x188>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	d017      	beq.n	8002284 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fe6c 	bl	8002f66 <I2C_WaitOnBTFFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b04      	cmp	r3, #4
 800229a:	d107      	bne.n	80022ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e01a      	b.n	80022e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d194      	bne.n	80021e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	00100002 	.word	0x00100002
 80022f4:	ffff0000 	.word	0xffff0000

080022f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4603      	mov	r3, r0
 8002308:	817b      	strh	r3, [r7, #10]
 800230a:	460b      	mov	r3, r1
 800230c:	813b      	strh	r3, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002312:	f7ff fafd 	bl	8001910 <HAL_GetTick>
 8002316:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	f040 80d9 	bne.w	80024d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2319      	movs	r3, #25
 800232c:	2201      	movs	r2, #1
 800232e:	496d      	ldr	r1, [pc, #436]	; (80024e4 <HAL_I2C_Mem_Write+0x1ec>)
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fd01 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
 800233e:	e0cc      	b.n	80024da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_I2C_Mem_Write+0x56>
 800234a:	2302      	movs	r3, #2
 800234c:	e0c5      	b.n	80024da <HAL_I2C_Mem_Write+0x1e2>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d007      	beq.n	8002374 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2221      	movs	r2, #33	; 0x21
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2240      	movs	r2, #64	; 0x40
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <HAL_I2C_Mem_Write+0x1f0>)
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023b6:	88f8      	ldrh	r0, [r7, #6]
 80023b8:	893a      	ldrh	r2, [r7, #8]
 80023ba:	8979      	ldrh	r1, [r7, #10]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	4603      	mov	r3, r0
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fb38 	bl	8002a3c <I2C_RequestMemoryWrite>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d052      	beq.n	8002478 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e081      	b.n	80024da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fd82 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d107      	bne.n	80023fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d11b      	bne.n	8002478 <HAL_I2C_Mem_Write+0x180>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d017      	beq.n	8002478 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1aa      	bne.n	80023d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fd6e 	bl	8002f66 <I2C_WaitOnBTFFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00d      	beq.n	80024ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2b04      	cmp	r3, #4
 8002496:	d107      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e016      	b.n	80024da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	00100002 	.word	0x00100002
 80024e8:	ffff0000 	.word	0xffff0000

080024ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	4608      	mov	r0, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	817b      	strh	r3, [r7, #10]
 80024fe:	460b      	mov	r3, r1
 8002500:	813b      	strh	r3, [r7, #8]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002506:	f7ff fa03 	bl	8001910 <HAL_GetTick>
 800250a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b20      	cmp	r3, #32
 8002516:	f040 8208 	bne.w	800292a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2319      	movs	r3, #25
 8002520:	2201      	movs	r2, #1
 8002522:	497b      	ldr	r1, [pc, #492]	; (8002710 <HAL_I2C_Mem_Read+0x224>)
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fc07 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002530:	2302      	movs	r3, #2
 8002532:	e1fb      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_I2C_Mem_Read+0x56>
 800253e:	2302      	movs	r3, #2
 8002540:	e1f4      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d007      	beq.n	8002568 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002576:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2222      	movs	r2, #34	; 0x22
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a5b      	ldr	r2, [pc, #364]	; (8002714 <HAL_I2C_Mem_Read+0x228>)
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025aa:	88f8      	ldrh	r0, [r7, #6]
 80025ac:	893a      	ldrh	r2, [r7, #8]
 80025ae:	8979      	ldrh	r1, [r7, #10]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4603      	mov	r3, r0
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fad4 	bl	8002b68 <I2C_RequestMemoryRead>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e1b0      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d113      	bne.n	80025fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e184      	b.n	8002904 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d11b      	bne.n	800263a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e164      	b.n	8002904 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	2b02      	cmp	r3, #2
 8002640:	d11b      	bne.n	800267a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	e144      	b.n	8002904 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002690:	e138      	b.n	8002904 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	2b03      	cmp	r3, #3
 8002698:	f200 80f1 	bhi.w	800287e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d123      	bne.n	80026ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fc9d 	bl	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e139      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ea:	e10b      	b.n	8002904 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d14e      	bne.n	8002792 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	2200      	movs	r2, #0
 80026fc:	4906      	ldr	r1, [pc, #24]	; (8002718 <HAL_I2C_Mem_Read+0x22c>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fb1a 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e10e      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
 800270e:	bf00      	nop
 8002710:	00100002 	.word	0x00100002
 8002714:	ffff0000 	.word	0xffff0000
 8002718:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002790:	e0b8      	b.n	8002904 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	2200      	movs	r2, #0
 800279a:	4966      	ldr	r1, [pc, #408]	; (8002934 <HAL_I2C_Mem_Read+0x448>)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 facb 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0bf      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	2200      	movs	r2, #0
 80027f6:	494f      	ldr	r1, [pc, #316]	; (8002934 <HAL_I2C_Mem_Read+0x448>)
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fa9d 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e091      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800287c:	e042      	b.n	8002904 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fbb0 	bl	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e04c      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d118      	bne.n	8002904 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f aec2 	bne.w	8002692 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	00010004 	.word	0x00010004

08002938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	460b      	mov	r3, r1
 8002946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d006      	beq.n	8002962 <I2C_MasterRequestWrite+0x2a>
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d003      	beq.n	8002962 <I2C_MasterRequestWrite+0x2a>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002960:	d108      	bne.n	8002974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e00b      	b.n	800298c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	2b12      	cmp	r3, #18
 800297a:	d107      	bne.n	800298c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f9cd 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b2:	d103      	bne.n	80029bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e035      	b.n	8002a2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c8:	d108      	bne.n	80029dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]
 80029da:	e01b      	b.n	8002a14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	11db      	asrs	r3, r3, #7
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0306 	and.w	r3, r3, #6
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f063 030f 	orn	r3, r3, #15
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	490e      	ldr	r1, [pc, #56]	; (8002a34 <I2C_MasterRequestWrite+0xfc>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f9f3 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e010      	b.n	8002a2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <I2C_MasterRequestWrite+0x100>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f9e3 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	00010008 	.word	0x00010008
 8002a38:	00010002 	.word	0x00010002

08002a3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f960 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00d      	beq.n	8002a9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8c:	d103      	bne.n	8002a96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e05f      	b.n	8002b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	6a3a      	ldr	r2, [r7, #32]
 8002aae:	492d      	ldr	r1, [pc, #180]	; (8002b64 <I2C_RequestMemoryWrite+0x128>)
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f998 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e04c      	b.n	8002b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad8:	6a39      	ldr	r1, [r7, #32]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa02 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d107      	bne.n	8002afe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e02b      	b.n	8002b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b08:	893b      	ldrh	r3, [r7, #8]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	e021      	b.n	8002b58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	6a39      	ldr	r1, [r7, #32]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f9dc 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d107      	bne.n	8002b4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e005      	b.n	8002b5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4e:	893b      	ldrh	r3, [r7, #8]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	00010002 	.word	0x00010002

08002b68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f8c2 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc8:	d103      	bne.n	8002bd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0aa      	b.n	8002d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	4952      	ldr	r1, [pc, #328]	; (8002d34 <I2C_RequestMemoryRead+0x1cc>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f8fa 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e097      	b.n	8002d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f964 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e076      	b.n	8002d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c44:	893b      	ldrh	r3, [r7, #8]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	e021      	b.n	8002c94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	6a39      	ldr	r1, [r7, #32]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f93e 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00d      	beq.n	8002c8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d107      	bne.n	8002c86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e050      	b.n	8002d2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	6a39      	ldr	r1, [r7, #32]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f923 	bl	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d107      	bne.n	8002cbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e035      	b.n	8002d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f82b 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	d103      	bne.n	8002d00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e013      	b.n	8002d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	6a3a      	ldr	r2, [r7, #32]
 8002d18:	4906      	ldr	r1, [pc, #24]	; (8002d34 <I2C_RequestMemoryRead+0x1cc>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f863 	bl	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	00010002 	.word	0x00010002

08002d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d48:	e025      	b.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d021      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe fddd 	bl	8001910 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e023      	b.n	8002dde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10d      	bne.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4013      	ands	r3, r2
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	e00c      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d0b6      	beq.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df4:	e051      	b.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d123      	bne.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e046      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d021      	beq.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe fd5b 	bl	8001910 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d116      	bne.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e020      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10c      	bne.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e00b      	b.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d18d      	bne.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef0:	e02d      	b.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8ce 	bl	8003094 <I2C_IsAcknowledgeFailed>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e02d      	b.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d021      	beq.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fd01 	bl	8001910 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e007      	b.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d1ca      	bne.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f72:	e02d      	b.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f88d 	bl	8003094 <I2C_IsAcknowledgeFailed>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e02d      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d021      	beq.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fe fcc0 	bl	8001910 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e007      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d1ca      	bne.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff4:	e042      	b.n	800307c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b10      	cmp	r3, #16
 8003002:	d119      	bne.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0210 	mvn.w	r2, #16
 800300c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e029      	b.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003038:	f7fe fc6a 	bl	8001910 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d1b5      	bne.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	d11b      	bne.n	80030e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0204 	orr.w	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e267      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d075      	beq.n	80031fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b04      	cmp	r3, #4
 800311c:	d00c      	beq.n	8003138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003126:	2b08      	cmp	r3, #8
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312a:	4b82      	ldr	r3, [pc, #520]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003136:	d10b      	bne.n	8003150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4b7e      	ldr	r3, [pc, #504]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05b      	beq.n	80031fc <HAL_RCC_OscConfig+0x108>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d157      	bne.n	80031fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e242      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d106      	bne.n	8003168 <HAL_RCC_OscConfig+0x74>
 800315a:	4b76      	ldr	r3, [pc, #472]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a75      	ldr	r2, [pc, #468]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xb0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x98>
 8003172:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a6f      	ldr	r2, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b6d      	ldr	r3, [pc, #436]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6c      	ldr	r2, [pc, #432]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xb0>
 800318c:	4b69      	ldr	r3, [pc, #420]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a68      	ldr	r2, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b66      	ldr	r3, [pc, #408]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a65      	ldr	r2, [pc, #404]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fbb0 	bl	8001910 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fbac 	bl	8001910 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e207      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xc0>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fb9c 	bl	8001910 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe fb98 	bl	8001910 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1f3      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0xe8>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11c      	bne.n	800325c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003222:	4b44      	ldr	r3, [pc, #272]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_RCC_OscConfig+0x152>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e1c7      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4937      	ldr	r1, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	e03a      	b.n	80032d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003264:	4b34      	ldr	r3, [pc, #208]	; (8003338 <HAL_RCC_OscConfig+0x244>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe fb51 	bl	8001910 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fb4d 	bl	8001910 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e1a8      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b28      	ldr	r3, [pc, #160]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4925      	ldr	r1, [pc, #148]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e015      	b.n	80032d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b24      	ldr	r3, [pc, #144]	; (8003338 <HAL_RCC_OscConfig+0x244>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fb30 	bl	8001910 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b4:	f7fe fb2c 	bl	8001910 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e187      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d036      	beq.n	800334c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_RCC_OscConfig+0x248>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fb10 	bl	8001910 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe fb0c 	bl	8001910 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e167      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x240>)
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x200>
 8003312:	e01b      	b.n	800334c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_RCC_OscConfig+0x248>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7fe faf9 	bl	8001910 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	e00e      	b.n	8003340 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003322:	f7fe faf5 	bl	8001910 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d907      	bls.n	8003340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e150      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
 8003334:	40023800 	.word	0x40023800
 8003338:	42470000 	.word	0x42470000
 800333c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ea      	bne.n	8003322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8097 	beq.w	8003488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335e:	4b81      	ldr	r3, [pc, #516]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10f      	bne.n	800338a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	4b7d      	ldr	r3, [pc, #500]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a7c      	ldr	r2, [pc, #496]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b7a      	ldr	r3, [pc, #488]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338a:	4b77      	ldr	r3, [pc, #476]	; (8003568 <HAL_RCC_OscConfig+0x474>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d118      	bne.n	80033c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003396:	4b74      	ldr	r3, [pc, #464]	; (8003568 <HAL_RCC_OscConfig+0x474>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a73      	ldr	r2, [pc, #460]	; (8003568 <HAL_RCC_OscConfig+0x474>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fab5 	bl	8001910 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033aa:	f7fe fab1 	bl	8001910 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e10c      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_OscConfig+0x474>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x2ea>
 80033d0:	4b64      	ldr	r3, [pc, #400]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a63      	ldr	r2, [pc, #396]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6713      	str	r3, [r2, #112]	; 0x70
 80033dc:	e01c      	b.n	8003418 <HAL_RCC_OscConfig+0x324>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x30c>
 80033e6:	4b5f      	ldr	r3, [pc, #380]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a5e      	ldr	r2, [pc, #376]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
 80033f2:	4b5c      	ldr	r3, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a5b      	ldr	r2, [pc, #364]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0x324>
 8003400:	4b58      	ldr	r3, [pc, #352]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	4a57      	ldr	r2, [pc, #348]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6713      	str	r3, [r2, #112]	; 0x70
 800340c:	4b55      	ldr	r3, [pc, #340]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a54      	ldr	r2, [pc, #336]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003412:	f023 0304 	bic.w	r3, r3, #4
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fe fa76 	bl	8001910 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe fa72 	bl	8001910 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0cb      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	4b49      	ldr	r3, [pc, #292]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ee      	beq.n	8003428 <HAL_RCC_OscConfig+0x334>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344c:	f7fe fa60 	bl	8001910 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe fa5c 	bl	8001910 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0b5      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346a:	4b3e      	ldr	r3, [pc, #248]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ee      	bne.n	8003454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d105      	bne.n	8003488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	4a38      	ldr	r2, [pc, #224]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003486:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80a1 	beq.w	80035d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003492:	4b34      	ldr	r3, [pc, #208]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b08      	cmp	r3, #8
 800349c:	d05c      	beq.n	8003558 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d141      	bne.n	800352a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_RCC_OscConfig+0x478>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fa30 	bl	8001910 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fe fa2c 	bl	8001910 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e087      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c6:	4b27      	ldr	r3, [pc, #156]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	3b01      	subs	r3, #1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	491b      	ldr	r1, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x478>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7fe fa05 	bl	8001910 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350a:	f7fe fa01 	bl	8001910 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e05c      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x416>
 8003528:	e054      	b.n	80035d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_RCC_OscConfig+0x478>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe f9ee 	bl	8001910 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fe f9ea 	bl	8001910 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e045      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_OscConfig+0x470>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x444>
 8003556:	e03d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e038      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
 8003564:	40023800 	.word	0x40023800
 8003568:	40007000 	.word	0x40007000
 800356c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x4ec>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d028      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d121      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d11a      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d111      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	3b01      	subs	r3, #1
 80035ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800

080035e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0cc      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d90c      	bls.n	8003620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0b8      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800365a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	494d      	ldr	r1, [pc, #308]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d044      	beq.n	8003704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d119      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e07f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e067      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c2:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f023 0203 	bic.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4934      	ldr	r1, [pc, #208]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d4:	f7fe f91c 	bl	8001910 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036dc:	f7fe f918 	bl	8001910 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e04f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 020c 	and.w	r2, r3, #12
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	429a      	cmp	r2, r3
 8003702:	d1eb      	bne.n	80036dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d20c      	bcs.n	800372c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e032      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4916      	ldr	r1, [pc, #88]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	490e      	ldr	r1, [pc, #56]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800376a:	f000 f821 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 800376e:	4602      	mov	r2, r0
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	490a      	ldr	r1, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 800377c:	5ccb      	ldrb	r3, [r1, r3]
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe f87c 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023c00 	.word	0x40023c00
 80037a0:	40023800 	.word	0x40023800
 80037a4:	080055c0 	.word	0x080055c0
 80037a8:	20000004 	.word	0x20000004
 80037ac:	20000008 	.word	0x20000008

080037b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b4:	b090      	sub	sp, #64	; 0x40
 80037b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
 80037bc:	2300      	movs	r3, #0
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c0:	2300      	movs	r3, #0
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d00d      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x40>
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	f200 80a1 	bhi.w	800391c <HAL_RCC_GetSysClockFreq+0x16c>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x34>
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x3a>
 80037e2:	e09b      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_GetSysClockFreq+0x184>)
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037e8:	e09b      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ea:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ee:	e098      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <HAL_RCC_GetSysClockFreq+0x180>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037fa:	4b4d      	ldr	r3, [pc, #308]	; (8003930 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d028      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003806:	4b4a      	ldr	r3, [pc, #296]	; (8003930 <HAL_RCC_GetSysClockFreq+0x180>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	099b      	lsrs	r3, r3, #6
 800380c:	2200      	movs	r2, #0
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	627a      	str	r2, [r7, #36]	; 0x24
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003818:	2100      	movs	r1, #0
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_GetSysClockFreq+0x188>)
 800381c:	fb03 f201 	mul.w	r2, r3, r1
 8003820:	2300      	movs	r3, #0
 8003822:	fb00 f303 	mul.w	r3, r0, r3
 8003826:	4413      	add	r3, r2
 8003828:	4a43      	ldr	r2, [pc, #268]	; (8003938 <HAL_RCC_GetSysClockFreq+0x188>)
 800382a:	fba0 1202 	umull	r1, r2, r0, r2
 800382e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003830:	460a      	mov	r2, r1
 8003832:	62ba      	str	r2, [r7, #40]	; 0x28
 8003834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003836:	4413      	add	r3, r2
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	2200      	movs	r2, #0
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	61fa      	str	r2, [r7, #28]
 8003842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003846:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800384a:	f7fc fd21 	bl	8000290 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4613      	mov	r3, r2
 8003854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003856:	e053      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003858:	4b35      	ldr	r3, [pc, #212]	; (8003930 <HAL_RCC_GetSysClockFreq+0x180>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	2200      	movs	r2, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	617a      	str	r2, [r7, #20]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800386a:	f04f 0b00 	mov.w	fp, #0
 800386e:	4652      	mov	r2, sl
 8003870:	465b      	mov	r3, fp
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	ebb2 080a 	subs.w	r8, r2, sl
 800388a:	eb63 090b 	sbc.w	r9, r3, fp
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800389a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800389e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038a2:	ebb2 0408 	subs.w	r4, r2, r8
 80038a6:	eb63 0509 	sbc.w	r5, r3, r9
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	00eb      	lsls	r3, r5, #3
 80038b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b8:	00e2      	lsls	r2, r4, #3
 80038ba:	4614      	mov	r4, r2
 80038bc:	461d      	mov	r5, r3
 80038be:	eb14 030a 	adds.w	r3, r4, sl
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	eb45 030b 	adc.w	r3, r5, fp
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038d6:	4629      	mov	r1, r5
 80038d8:	028b      	lsls	r3, r1, #10
 80038da:	4621      	mov	r1, r4
 80038dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e0:	4621      	mov	r1, r4
 80038e2:	028a      	lsls	r2, r1, #10
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	2200      	movs	r2, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	60fa      	str	r2, [r7, #12]
 80038f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f4:	f7fc fccc 	bl	8000290 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_GetSysClockFreq+0x180>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	3301      	adds	r3, #1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetSysClockFreq+0x184>)
 800391e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003924:	4618      	mov	r0, r3
 8003926:	3740      	adds	r7, #64	; 0x40
 8003928:	46bd      	mov	sp, r7
 800392a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	00f42400 	.word	0x00f42400
 8003938:	017d7840 	.word	0x017d7840

0800393c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_GetHCLKFreq+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000004 	.word	0x20000004

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff0 	bl	800393c <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800
 8003978:	080055d0 	.word	0x080055d0

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff ffdc 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0b5b      	lsrs	r3, r3, #13
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	080055d0 	.word	0x080055d0

080039a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e041      	b.n	8003a3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fdfe 	bl	80015cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f000 fa04 	bl	8003df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_TIM_PWM_Start+0x24>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e022      	b.n	8003aae <HAL_TIM_PWM_Start+0x6a>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d109      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x3e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e015      	b.n	8003aae <HAL_TIM_PWM_Start+0x6a>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d109      	bne.n	8003a9c <HAL_TIM_PWM_Start+0x58>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e008      	b.n	8003aae <HAL_TIM_PWM_Start+0x6a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e068      	b.n	8003b88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0x82>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac4:	e013      	b.n	8003aee <HAL_TIM_PWM_Start+0xaa>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0x92>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	e00b      	b.n	8003aee <HAL_TIM_PWM_Start+0xaa>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0xa2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	e003      	b.n	8003aee <HAL_TIM_PWM_Start+0xaa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fb86 	bl	8004208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <HAL_TIM_PWM_Start+0x14c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_TIM_PWM_Start+0x14c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d013      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <HAL_TIM_PWM_Start+0x150>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <HAL_TIM_PWM_Start+0x154>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_TIM_PWM_Start+0x158>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_TIM_PWM_Start+0x15c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d010      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	e007      	b.n	8003b86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40014000 	.word	0x40014000

08003ba4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fb26 	bl	8004208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <HAL_TIM_PWM_Stop+0xc4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d117      	bne.n	8003bf6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_TIM_PWM_Stop+0x52>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	f240 4344 	movw	r3, #1092	; 0x444
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <HAL_TIM_PWM_Stop+0x52>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_TIM_PWM_Stop+0x82>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	f240 4344 	movw	r3, #1092	; 0x444
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <HAL_TIM_PWM_Stop+0x82>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_PWM_Stop+0x92>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c34:	e013      	b.n	8003c5e <HAL_TIM_PWM_Stop+0xba>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_PWM_Stop+0xa2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c44:	e00b      	b.n	8003c5e <HAL_TIM_PWM_Stop+0xba>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PWM_Stop+0xb2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c54:	e003      	b.n	8003c5e <HAL_TIM_PWM_Stop+0xba>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40010000 	.word	0x40010000

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0ae      	b.n	8003de8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	f200 809f 	bhi.w	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cd5 	.word	0x08003cd5
 8003ca4:	08003dd9 	.word	0x08003dd9
 8003ca8:	08003dd9 	.word	0x08003dd9
 8003cac:	08003dd9 	.word	0x08003dd9
 8003cb0:	08003d15 	.word	0x08003d15
 8003cb4:	08003dd9 	.word	0x08003dd9
 8003cb8:	08003dd9 	.word	0x08003dd9
 8003cbc:	08003dd9 	.word	0x08003dd9
 8003cc0:	08003d57 	.word	0x08003d57
 8003cc4:	08003dd9 	.word	0x08003dd9
 8003cc8:	08003dd9 	.word	0x08003dd9
 8003ccc:	08003dd9 	.word	0x08003dd9
 8003cd0:	08003d97 	.word	0x08003d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f908 	bl	8003ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	619a      	str	r2, [r3, #24]
      break;
 8003d12:	e064      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f94e 	bl	8003fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	619a      	str	r2, [r3, #24]
      break;
 8003d54:	e043      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f999 	bl	8004094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]
      break;
 8003d94:	e023      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f9e3 	bl	8004168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69d9      	ldr	r1, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	61da      	str	r2, [r3, #28]
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	75fb      	strb	r3, [r7, #23]
      break;
 8003ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a34      	ldr	r2, [pc, #208]	; (8003ed4 <TIM_Base_SetConfig+0xe4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00f      	beq.n	8003e28 <TIM_Base_SetConfig+0x38>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0e:	d00b      	beq.n	8003e28 <TIM_Base_SetConfig+0x38>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a31      	ldr	r2, [pc, #196]	; (8003ed8 <TIM_Base_SetConfig+0xe8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <TIM_Base_SetConfig+0x38>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a30      	ldr	r2, [pc, #192]	; (8003edc <TIM_Base_SetConfig+0xec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_Base_SetConfig+0x38>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <TIM_Base_SetConfig+0xf0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a25      	ldr	r2, [pc, #148]	; (8003ed4 <TIM_Base_SetConfig+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01b      	beq.n	8003e7a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e48:	d017      	beq.n	8003e7a <TIM_Base_SetConfig+0x8a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <TIM_Base_SetConfig+0xe8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <TIM_Base_SetConfig+0x8a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a21      	ldr	r2, [pc, #132]	; (8003edc <TIM_Base_SetConfig+0xec>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00f      	beq.n	8003e7a <TIM_Base_SetConfig+0x8a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <TIM_Base_SetConfig+0xf0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <TIM_Base_SetConfig+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <TIM_Base_SetConfig+0xf4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <TIM_Base_SetConfig+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <TIM_Base_SetConfig+0xf8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_Base_SetConfig+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <TIM_Base_SetConfig+0xfc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <TIM_Base_SetConfig+0xe4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d103      	bne.n	8003ec0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400
 8003eec:	40014800 	.word	0x40014800

08003ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f023 0201 	bic.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f023 0302 	bic.w	r3, r3, #2
 8003f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <TIM_OC1_SetConfig+0xc8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10c      	bne.n	8003f66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0308 	bic.w	r3, r3, #8
 8003f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f023 0304 	bic.w	r3, r3, #4
 8003f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a13      	ldr	r2, [pc, #76]	; (8003fb8 <TIM_OC1_SetConfig+0xc8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d111      	bne.n	8003f92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	621a      	str	r2, [r3, #32]
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40010000 	.word	0x40010000

08003fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f023 0210 	bic.w	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <TIM_OC2_SetConfig+0xd4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10d      	bne.n	8004038 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC2_SetConfig+0xd4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d113      	bne.n	8004068 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800404e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000

08004094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <TIM_OC3_SetConfig+0xd0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10d      	bne.n	800410e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800410c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a14      	ldr	r2, [pc, #80]	; (8004164 <TIM_OC3_SetConfig+0xd0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d113      	bne.n	800413e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800411c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40010000 	.word	0x40010000

08004168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	031b      	lsls	r3, r3, #12
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a10      	ldr	r2, [pc, #64]	; (8004204 <TIM_OC4_SetConfig+0x9c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d109      	bne.n	80041dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	621a      	str	r2, [r3, #32]
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000

08004208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2201      	movs	r2, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1a      	ldr	r2, [r3, #32]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	43db      	mvns	r3, r3
 800422a:	401a      	ands	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004268:	2302      	movs	r3, #2
 800426a:	e050      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d018      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d013      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40014000 	.word	0x40014000

08004330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e03f      	b.n	80043c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd f990 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f929 	bl	80045cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b08a      	sub	sp, #40	; 0x28
 80043ce:	af02      	add	r7, sp, #8
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d17c      	bne.n	80044e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_UART_Transmit+0x2c>
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e075      	b.n	80044e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_UART_Transmit+0x3e>
 8004404:	2302      	movs	r3, #2
 8004406:	e06e      	b.n	80044e6 <HAL_UART_Transmit+0x11c>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2221      	movs	r2, #33	; 0x21
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800441e:	f7fd fa77 	bl	8001910 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d108      	bne.n	800444c <HAL_UART_Transmit+0x82>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e003      	b.n	8004454 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800445c:	e02a      	b.n	80044b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	2180      	movs	r1, #128	; 0x80
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f840 	bl	80044ee <UART_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e036      	b.n	80044e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	3302      	adds	r3, #2
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e007      	b.n	80044a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1cf      	bne.n	800445e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2140      	movs	r1, #64	; 0x40
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f810 	bl	80044ee <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e006      	b.n	80044e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b090      	sub	sp, #64	; 0x40
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fe:	e050      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d04c      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0x30>
 800450e:	f7fd f9ff 	bl	8001910 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451a:	429a      	cmp	r2, r3
 800451c:	d241      	bcs.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800453e:	637a      	str	r2, [r7, #52]	; 0x34
 8004540:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	613b      	str	r3, [r7, #16]
   return(result);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	63bb      	str	r3, [r7, #56]	; 0x38
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004572:	623a      	str	r2, [r7, #32]
 8004574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	69f9      	ldr	r1, [r7, #28]
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e00f      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d09f      	beq.n	8004500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3740      	adds	r7, #64	; 0x40
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d0:	b0c0      	sub	sp, #256	; 0x100
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	68d9      	ldr	r1, [r3, #12]
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	ea40 0301 	orr.w	r3, r0, r1
 80045f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	431a      	orrs	r2, r3
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004624:	f021 010c 	bic.w	r1, r1, #12
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004632:	430b      	orrs	r3, r1
 8004634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	6999      	ldr	r1, [r3, #24]
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	ea40 0301 	orr.w	r3, r0, r1
 8004652:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b8f      	ldr	r3, [pc, #572]	; (8004898 <UART_SetConfig+0x2cc>)
 800465c:	429a      	cmp	r2, r3
 800465e:	d005      	beq.n	800466c <UART_SetConfig+0xa0>
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b8d      	ldr	r3, [pc, #564]	; (800489c <UART_SetConfig+0x2d0>)
 8004668:	429a      	cmp	r2, r3
 800466a:	d104      	bne.n	8004676 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7ff f986 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8004670:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004674:	e003      	b.n	800467e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004676:	f7ff f96d 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 800467a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004688:	f040 810c 	bne.w	80048a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800468c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004690:	2200      	movs	r2, #0
 8004692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004696:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800469a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800469e:	4622      	mov	r2, r4
 80046a0:	462b      	mov	r3, r5
 80046a2:	1891      	adds	r1, r2, r2
 80046a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80046a6:	415b      	adcs	r3, r3
 80046a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046ae:	4621      	mov	r1, r4
 80046b0:	eb12 0801 	adds.w	r8, r2, r1
 80046b4:	4629      	mov	r1, r5
 80046b6:	eb43 0901 	adc.w	r9, r3, r1
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ce:	4690      	mov	r8, r2
 80046d0:	4699      	mov	r9, r3
 80046d2:	4623      	mov	r3, r4
 80046d4:	eb18 0303 	adds.w	r3, r8, r3
 80046d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046dc:	462b      	mov	r3, r5
 80046de:	eb49 0303 	adc.w	r3, r9, r3
 80046e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046fa:	460b      	mov	r3, r1
 80046fc:	18db      	adds	r3, r3, r3
 80046fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004700:	4613      	mov	r3, r2
 8004702:	eb42 0303 	adc.w	r3, r2, r3
 8004706:	657b      	str	r3, [r7, #84]	; 0x54
 8004708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800470c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004710:	f7fb fdbe 	bl	8000290 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4b61      	ldr	r3, [pc, #388]	; (80048a0 <UART_SetConfig+0x2d4>)
 800471a:	fba3 2302 	umull	r2, r3, r3, r2
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	011c      	lsls	r4, r3, #4
 8004722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800472c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004730:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	1891      	adds	r1, r2, r2
 800473a:	64b9      	str	r1, [r7, #72]	; 0x48
 800473c:	415b      	adcs	r3, r3
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004744:	4641      	mov	r1, r8
 8004746:	eb12 0a01 	adds.w	sl, r2, r1
 800474a:	4649      	mov	r1, r9
 800474c:	eb43 0b01 	adc.w	fp, r3, r1
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800475c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004764:	4692      	mov	sl, r2
 8004766:	469b      	mov	fp, r3
 8004768:	4643      	mov	r3, r8
 800476a:	eb1a 0303 	adds.w	r3, sl, r3
 800476e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004772:	464b      	mov	r3, r9
 8004774:	eb4b 0303 	adc.w	r3, fp, r3
 8004778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004788:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800478c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004790:	460b      	mov	r3, r1
 8004792:	18db      	adds	r3, r3, r3
 8004794:	643b      	str	r3, [r7, #64]	; 0x40
 8004796:	4613      	mov	r3, r2
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	647b      	str	r3, [r7, #68]	; 0x44
 800479e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047a6:	f7fb fd73 	bl	8000290 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4611      	mov	r1, r2
 80047b0:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <UART_SetConfig+0x2d4>)
 80047b2:	fba3 2301 	umull	r2, r3, r3, r1
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2264      	movs	r2, #100	; 0x64
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	1acb      	subs	r3, r1, r3
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <UART_SetConfig+0x2d4>)
 80047c8:	fba3 2302 	umull	r2, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047d4:	441c      	add	r4, r3
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80047f0:	415b      	adcs	r3, r3
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047f8:	4641      	mov	r1, r8
 80047fa:	1851      	adds	r1, r2, r1
 80047fc:	6339      	str	r1, [r7, #48]	; 0x30
 80047fe:	4649      	mov	r1, r9
 8004800:	414b      	adcs	r3, r1
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004810:	4659      	mov	r1, fp
 8004812:	00cb      	lsls	r3, r1, #3
 8004814:	4651      	mov	r1, sl
 8004816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481a:	4651      	mov	r1, sl
 800481c:	00ca      	lsls	r2, r1, #3
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4603      	mov	r3, r0
 8004824:	4642      	mov	r2, r8
 8004826:	189b      	adds	r3, r3, r2
 8004828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800482c:	464b      	mov	r3, r9
 800482e:	460a      	mov	r2, r1
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004844:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800484c:	460b      	mov	r3, r1
 800484e:	18db      	adds	r3, r3, r3
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
 8004852:	4613      	mov	r3, r2
 8004854:	eb42 0303 	adc.w	r3, r2, r3
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800485e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004862:	f7fb fd15 	bl	8000290 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <UART_SetConfig+0x2d4>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <UART_SetConfig+0x2d4>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 0207 	and.w	r2, r3, #7
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4422      	add	r2, r4
 8004892:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004894:	e105      	b.n	8004aa2 <UART_SetConfig+0x4d6>
 8004896:	bf00      	nop
 8004898:	40011000 	.word	0x40011000
 800489c:	40011400 	.word	0x40011400
 80048a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048b6:	4642      	mov	r2, r8
 80048b8:	464b      	mov	r3, r9
 80048ba:	1891      	adds	r1, r2, r2
 80048bc:	6239      	str	r1, [r7, #32]
 80048be:	415b      	adcs	r3, r3
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c6:	4641      	mov	r1, r8
 80048c8:	1854      	adds	r4, r2, r1
 80048ca:	4649      	mov	r1, r9
 80048cc:	eb43 0501 	adc.w	r5, r3, r1
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	00eb      	lsls	r3, r5, #3
 80048da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048de:	00e2      	lsls	r2, r4, #3
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	18e3      	adds	r3, r4, r3
 80048e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048ec:	464b      	mov	r3, r9
 80048ee:	eb45 0303 	adc.w	r3, r5, r3
 80048f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004912:	4629      	mov	r1, r5
 8004914:	008b      	lsls	r3, r1, #2
 8004916:	4621      	mov	r1, r4
 8004918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491c:	4621      	mov	r1, r4
 800491e:	008a      	lsls	r2, r1, #2
 8004920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004924:	f7fb fcb4 	bl	8000290 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4b60      	ldr	r3, [pc, #384]	; (8004ab0 <UART_SetConfig+0x4e4>)
 800492e:	fba3 2302 	umull	r2, r3, r3, r2
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	011c      	lsls	r4, r3, #4
 8004936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493a:	2200      	movs	r2, #0
 800493c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004940:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004944:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004948:	4642      	mov	r2, r8
 800494a:	464b      	mov	r3, r9
 800494c:	1891      	adds	r1, r2, r2
 800494e:	61b9      	str	r1, [r7, #24]
 8004950:	415b      	adcs	r3, r3
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004958:	4641      	mov	r1, r8
 800495a:	1851      	adds	r1, r2, r1
 800495c:	6139      	str	r1, [r7, #16]
 800495e:	4649      	mov	r1, r9
 8004960:	414b      	adcs	r3, r1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004970:	4659      	mov	r1, fp
 8004972:	00cb      	lsls	r3, r1, #3
 8004974:	4651      	mov	r1, sl
 8004976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497a:	4651      	mov	r1, sl
 800497c:	00ca      	lsls	r2, r1, #3
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	4603      	mov	r3, r0
 8004984:	4642      	mov	r2, r8
 8004986:	189b      	adds	r3, r3, r2
 8004988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800498c:	464b      	mov	r3, r9
 800498e:	460a      	mov	r2, r1
 8004990:	eb42 0303 	adc.w	r3, r2, r3
 8004994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80049a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049b0:	4649      	mov	r1, r9
 80049b2:	008b      	lsls	r3, r1, #2
 80049b4:	4641      	mov	r1, r8
 80049b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ba:	4641      	mov	r1, r8
 80049bc:	008a      	lsls	r2, r1, #2
 80049be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049c2:	f7fb fc65 	bl	8000290 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <UART_SetConfig+0x4e4>)
 80049cc:	fba3 1302 	umull	r1, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	2164      	movs	r1, #100	; 0x64
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	3332      	adds	r3, #50	; 0x32
 80049de:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <UART_SetConfig+0x4e4>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ea:	441c      	add	r4, r3
 80049ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f0:	2200      	movs	r2, #0
 80049f2:	673b      	str	r3, [r7, #112]	; 0x70
 80049f4:	677a      	str	r2, [r7, #116]	; 0x74
 80049f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049fa:	4642      	mov	r2, r8
 80049fc:	464b      	mov	r3, r9
 80049fe:	1891      	adds	r1, r2, r2
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	415b      	adcs	r3, r3
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	1851      	adds	r1, r2, r1
 8004a0e:	6039      	str	r1, [r7, #0]
 8004a10:	4649      	mov	r1, r9
 8004a12:	414b      	adcs	r3, r1
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a22:	4659      	mov	r1, fp
 8004a24:	00cb      	lsls	r3, r1, #3
 8004a26:	4651      	mov	r1, sl
 8004a28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	00ca      	lsls	r2, r1, #3
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	4603      	mov	r3, r0
 8004a36:	4642      	mov	r2, r8
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	460a      	mov	r2, r1
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a50:	667a      	str	r2, [r7, #100]	; 0x64
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a5e:	4649      	mov	r1, r9
 8004a60:	008b      	lsls	r3, r1, #2
 8004a62:	4641      	mov	r1, r8
 8004a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a68:	4641      	mov	r1, r8
 8004a6a:	008a      	lsls	r2, r1, #2
 8004a6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a70:	f7fb fc0e 	bl	8000290 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <UART_SetConfig+0x4e4>)
 8004a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2164      	movs	r1, #100	; 0x64
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	3332      	adds	r3, #50	; 0x32
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <UART_SetConfig+0x4e4>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4422      	add	r2, r4
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	bf00      	nop
 8004aa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aae:	bf00      	nop
 8004ab0:	51eb851f 	.word	0x51eb851f

08004ab4 <__errno>:
 8004ab4:	4b01      	ldr	r3, [pc, #4]	; (8004abc <__errno+0x8>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000010 	.word	0x20000010

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4d0d      	ldr	r5, [pc, #52]	; (8004af8 <__libc_init_array+0x38>)
 8004ac4:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac6:	1b64      	subs	r4, r4, r5
 8004ac8:	10a4      	asrs	r4, r4, #2
 8004aca:	2600      	movs	r6, #0
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	4d0b      	ldr	r5, [pc, #44]	; (8004b00 <__libc_init_array+0x40>)
 8004ad2:	4c0c      	ldr	r4, [pc, #48]	; (8004b04 <__libc_init_array+0x44>)
 8004ad4:	f000 fc8e 	bl	80053f4 <_init>
 8004ad8:	1b64      	subs	r4, r4, r5
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	2600      	movs	r6, #0
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08005614 	.word	0x08005614
 8004afc:	08005614 	.word	0x08005614
 8004b00:	08005614 	.word	0x08005614
 8004b04:	08005618 	.word	0x08005618

08004b08 <memset>:
 8004b08:	4402      	add	r2, r0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d100      	bne.n	8004b12 <memset+0xa>
 8004b10:	4770      	bx	lr
 8004b12:	f803 1b01 	strb.w	r1, [r3], #1
 8004b16:	e7f9      	b.n	8004b0c <memset+0x4>

08004b18 <siprintf>:
 8004b18:	b40e      	push	{r1, r2, r3}
 8004b1a:	b500      	push	{lr}
 8004b1c:	b09c      	sub	sp, #112	; 0x70
 8004b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b20:	9002      	str	r0, [sp, #8]
 8004b22:	9006      	str	r0, [sp, #24]
 8004b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b28:	4809      	ldr	r0, [pc, #36]	; (8004b50 <siprintf+0x38>)
 8004b2a:	9107      	str	r1, [sp, #28]
 8004b2c:	9104      	str	r1, [sp, #16]
 8004b2e:	4909      	ldr	r1, [pc, #36]	; (8004b54 <siprintf+0x3c>)
 8004b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	6800      	ldr	r0, [r0, #0]
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	a902      	add	r1, sp, #8
 8004b3c:	f000 f868 	bl	8004c10 <_svfiprintf_r>
 8004b40:	9b02      	ldr	r3, [sp, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	b01c      	add	sp, #112	; 0x70
 8004b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b4c:	b003      	add	sp, #12
 8004b4e:	4770      	bx	lr
 8004b50:	20000010 	.word	0x20000010
 8004b54:	ffff0208 	.word	0xffff0208

08004b58 <__ssputs_r>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	688e      	ldr	r6, [r1, #8]
 8004b5e:	429e      	cmp	r6, r3
 8004b60:	4682      	mov	sl, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	4690      	mov	r8, r2
 8004b66:	461f      	mov	r7, r3
 8004b68:	d838      	bhi.n	8004bdc <__ssputs_r+0x84>
 8004b6a:	898a      	ldrh	r2, [r1, #12]
 8004b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b70:	d032      	beq.n	8004bd8 <__ssputs_r+0x80>
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	6909      	ldr	r1, [r1, #16]
 8004b76:	eba5 0901 	sub.w	r9, r5, r1
 8004b7a:	6965      	ldr	r5, [r4, #20]
 8004b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b84:	3301      	adds	r3, #1
 8004b86:	444b      	add	r3, r9
 8004b88:	106d      	asrs	r5, r5, #1
 8004b8a:	429d      	cmp	r5, r3
 8004b8c:	bf38      	it	cc
 8004b8e:	461d      	movcc	r5, r3
 8004b90:	0553      	lsls	r3, r2, #21
 8004b92:	d531      	bpl.n	8004bf8 <__ssputs_r+0xa0>
 8004b94:	4629      	mov	r1, r5
 8004b96:	f000 fb63 	bl	8005260 <_malloc_r>
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	b950      	cbnz	r0, 8004bb4 <__ssputs_r+0x5c>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	f8ca 3000 	str.w	r3, [sl]
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	6921      	ldr	r1, [r4, #16]
 8004bb6:	464a      	mov	r2, r9
 8004bb8:	f000 fabe 	bl	8005138 <memcpy>
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	6126      	str	r6, [r4, #16]
 8004bca:	6165      	str	r5, [r4, #20]
 8004bcc:	444e      	add	r6, r9
 8004bce:	eba5 0509 	sub.w	r5, r5, r9
 8004bd2:	6026      	str	r6, [r4, #0]
 8004bd4:	60a5      	str	r5, [r4, #8]
 8004bd6:	463e      	mov	r6, r7
 8004bd8:	42be      	cmp	r6, r7
 8004bda:	d900      	bls.n	8004bde <__ssputs_r+0x86>
 8004bdc:	463e      	mov	r6, r7
 8004bde:	6820      	ldr	r0, [r4, #0]
 8004be0:	4632      	mov	r2, r6
 8004be2:	4641      	mov	r1, r8
 8004be4:	f000 fab6 	bl	8005154 <memmove>
 8004be8:	68a3      	ldr	r3, [r4, #8]
 8004bea:	1b9b      	subs	r3, r3, r6
 8004bec:	60a3      	str	r3, [r4, #8]
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	4433      	add	r3, r6
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e7db      	b.n	8004bb0 <__ssputs_r+0x58>
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	f000 fba5 	bl	8005348 <_realloc_r>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d1e1      	bne.n	8004bc8 <__ssputs_r+0x70>
 8004c04:	6921      	ldr	r1, [r4, #16]
 8004c06:	4650      	mov	r0, sl
 8004c08:	f000 fabe 	bl	8005188 <_free_r>
 8004c0c:	e7c7      	b.n	8004b9e <__ssputs_r+0x46>
	...

08004c10 <_svfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	4698      	mov	r8, r3
 8004c16:	898b      	ldrh	r3, [r1, #12]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	b09d      	sub	sp, #116	; 0x74
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	d50e      	bpl.n	8004c42 <_svfiprintf_r+0x32>
 8004c24:	690b      	ldr	r3, [r1, #16]
 8004c26:	b963      	cbnz	r3, 8004c42 <_svfiprintf_r+0x32>
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	f000 fb19 	bl	8005260 <_malloc_r>
 8004c2e:	6028      	str	r0, [r5, #0]
 8004c30:	6128      	str	r0, [r5, #16]
 8004c32:	b920      	cbnz	r0, 8004c3e <_svfiprintf_r+0x2e>
 8004c34:	230c      	movs	r3, #12
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	e0d1      	b.n	8004de2 <_svfiprintf_r+0x1d2>
 8004c3e:	2340      	movs	r3, #64	; 0x40
 8004c40:	616b      	str	r3, [r5, #20]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9309      	str	r3, [sp, #36]	; 0x24
 8004c46:	2320      	movs	r3, #32
 8004c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c50:	2330      	movs	r3, #48	; 0x30
 8004c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dfc <_svfiprintf_r+0x1ec>
 8004c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c5a:	f04f 0901 	mov.w	r9, #1
 8004c5e:	4623      	mov	r3, r4
 8004c60:	469a      	mov	sl, r3
 8004c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c66:	b10a      	cbz	r2, 8004c6c <_svfiprintf_r+0x5c>
 8004c68:	2a25      	cmp	r2, #37	; 0x25
 8004c6a:	d1f9      	bne.n	8004c60 <_svfiprintf_r+0x50>
 8004c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c70:	d00b      	beq.n	8004c8a <_svfiprintf_r+0x7a>
 8004c72:	465b      	mov	r3, fp
 8004c74:	4622      	mov	r2, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f7ff ff6d 	bl	8004b58 <__ssputs_r>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f000 80aa 	beq.w	8004dd8 <_svfiprintf_r+0x1c8>
 8004c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c86:	445a      	add	r2, fp
 8004c88:	9209      	str	r2, [sp, #36]	; 0x24
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80a2 	beq.w	8004dd8 <_svfiprintf_r+0x1c8>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9307      	str	r3, [sp, #28]
 8004ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004caa:	931a      	str	r3, [sp, #104]	; 0x68
 8004cac:	4654      	mov	r4, sl
 8004cae:	2205      	movs	r2, #5
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	4851      	ldr	r0, [pc, #324]	; (8004dfc <_svfiprintf_r+0x1ec>)
 8004cb6:	f7fb fa9b 	bl	80001f0 <memchr>
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	b9d8      	cbnz	r0, 8004cf6 <_svfiprintf_r+0xe6>
 8004cbe:	06d0      	lsls	r0, r2, #27
 8004cc0:	bf44      	itt	mi
 8004cc2:	2320      	movmi	r3, #32
 8004cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc8:	0711      	lsls	r1, r2, #28
 8004cca:	bf44      	itt	mi
 8004ccc:	232b      	movmi	r3, #43	; 0x2b
 8004cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd8:	d015      	beq.n	8004d06 <_svfiprintf_r+0xf6>
 8004cda:	9a07      	ldr	r2, [sp, #28]
 8004cdc:	4654      	mov	r4, sl
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f04f 0c0a 	mov.w	ip, #10
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cea:	3b30      	subs	r3, #48	; 0x30
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	d94e      	bls.n	8004d8e <_svfiprintf_r+0x17e>
 8004cf0:	b1b0      	cbz	r0, 8004d20 <_svfiprintf_r+0x110>
 8004cf2:	9207      	str	r2, [sp, #28]
 8004cf4:	e014      	b.n	8004d20 <_svfiprintf_r+0x110>
 8004cf6:	eba0 0308 	sub.w	r3, r0, r8
 8004cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	46a2      	mov	sl, r4
 8004d04:	e7d2      	b.n	8004cac <_svfiprintf_r+0x9c>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9103      	str	r1, [sp, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfbb      	ittet	lt
 8004d12:	425b      	neglt	r3, r3
 8004d14:	f042 0202 	orrlt.w	r2, r2, #2
 8004d18:	9307      	strge	r3, [sp, #28]
 8004d1a:	9307      	strlt	r3, [sp, #28]
 8004d1c:	bfb8      	it	lt
 8004d1e:	9204      	strlt	r2, [sp, #16]
 8004d20:	7823      	ldrb	r3, [r4, #0]
 8004d22:	2b2e      	cmp	r3, #46	; 0x2e
 8004d24:	d10c      	bne.n	8004d40 <_svfiprintf_r+0x130>
 8004d26:	7863      	ldrb	r3, [r4, #1]
 8004d28:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2a:	d135      	bne.n	8004d98 <_svfiprintf_r+0x188>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	1d1a      	adds	r2, r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	9203      	str	r2, [sp, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bfb8      	it	lt
 8004d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d3c:	3402      	adds	r4, #2
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e0c <_svfiprintf_r+0x1fc>
 8004d44:	7821      	ldrb	r1, [r4, #0]
 8004d46:	2203      	movs	r2, #3
 8004d48:	4650      	mov	r0, sl
 8004d4a:	f7fb fa51 	bl	80001f0 <memchr>
 8004d4e:	b140      	cbz	r0, 8004d62 <_svfiprintf_r+0x152>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	eba0 000a 	sub.w	r0, r0, sl
 8004d56:	fa03 f000 	lsl.w	r0, r3, r0
 8004d5a:	9b04      	ldr	r3, [sp, #16]
 8004d5c:	4303      	orrs	r3, r0
 8004d5e:	3401      	adds	r4, #1
 8004d60:	9304      	str	r3, [sp, #16]
 8004d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d66:	4826      	ldr	r0, [pc, #152]	; (8004e00 <_svfiprintf_r+0x1f0>)
 8004d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d6c:	2206      	movs	r2, #6
 8004d6e:	f7fb fa3f 	bl	80001f0 <memchr>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d038      	beq.n	8004de8 <_svfiprintf_r+0x1d8>
 8004d76:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <_svfiprintf_r+0x1f4>)
 8004d78:	bb1b      	cbnz	r3, 8004dc2 <_svfiprintf_r+0x1b2>
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	f023 0307 	bic.w	r3, r3, #7
 8004d82:	3308      	adds	r3, #8
 8004d84:	9303      	str	r3, [sp, #12]
 8004d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d88:	4433      	add	r3, r6
 8004d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8c:	e767      	b.n	8004c5e <_svfiprintf_r+0x4e>
 8004d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d92:	460c      	mov	r4, r1
 8004d94:	2001      	movs	r0, #1
 8004d96:	e7a5      	b.n	8004ce4 <_svfiprintf_r+0xd4>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	3401      	adds	r4, #1
 8004d9c:	9305      	str	r3, [sp, #20]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0c0a 	mov.w	ip, #10
 8004da4:	4620      	mov	r0, r4
 8004da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004daa:	3a30      	subs	r2, #48	; 0x30
 8004dac:	2a09      	cmp	r2, #9
 8004dae:	d903      	bls.n	8004db8 <_svfiprintf_r+0x1a8>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0c5      	beq.n	8004d40 <_svfiprintf_r+0x130>
 8004db4:	9105      	str	r1, [sp, #20]
 8004db6:	e7c3      	b.n	8004d40 <_svfiprintf_r+0x130>
 8004db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e7f0      	b.n	8004da4 <_svfiprintf_r+0x194>
 8004dc2:	ab03      	add	r3, sp, #12
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <_svfiprintf_r+0x1f8>)
 8004dca:	a904      	add	r1, sp, #16
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f3af 8000 	nop.w
 8004dd2:	1c42      	adds	r2, r0, #1
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	d1d6      	bne.n	8004d86 <_svfiprintf_r+0x176>
 8004dd8:	89ab      	ldrh	r3, [r5, #12]
 8004dda:	065b      	lsls	r3, r3, #25
 8004ddc:	f53f af2c 	bmi.w	8004c38 <_svfiprintf_r+0x28>
 8004de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de2:	b01d      	add	sp, #116	; 0x74
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	462a      	mov	r2, r5
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <_svfiprintf_r+0x1f8>)
 8004df0:	a904      	add	r1, sp, #16
 8004df2:	4638      	mov	r0, r7
 8004df4:	f000 f87a 	bl	8004eec <_printf_i>
 8004df8:	e7eb      	b.n	8004dd2 <_svfiprintf_r+0x1c2>
 8004dfa:	bf00      	nop
 8004dfc:	080055d8 	.word	0x080055d8
 8004e00:	080055e2 	.word	0x080055e2
 8004e04:	00000000 	.word	0x00000000
 8004e08:	08004b59 	.word	0x08004b59
 8004e0c:	080055de 	.word	0x080055de

08004e10 <_printf_common>:
 8004e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	4616      	mov	r6, r2
 8004e16:	4699      	mov	r9, r3
 8004e18:	688a      	ldr	r2, [r1, #8]
 8004e1a:	690b      	ldr	r3, [r1, #16]
 8004e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e20:	4293      	cmp	r3, r2
 8004e22:	bfb8      	it	lt
 8004e24:	4613      	movlt	r3, r2
 8004e26:	6033      	str	r3, [r6, #0]
 8004e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e2c:	4607      	mov	r7, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	b10a      	cbz	r2, 8004e36 <_printf_common+0x26>
 8004e32:	3301      	adds	r3, #1
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	0699      	lsls	r1, r3, #26
 8004e3a:	bf42      	ittt	mi
 8004e3c:	6833      	ldrmi	r3, [r6, #0]
 8004e3e:	3302      	addmi	r3, #2
 8004e40:	6033      	strmi	r3, [r6, #0]
 8004e42:	6825      	ldr	r5, [r4, #0]
 8004e44:	f015 0506 	ands.w	r5, r5, #6
 8004e48:	d106      	bne.n	8004e58 <_printf_common+0x48>
 8004e4a:	f104 0a19 	add.w	sl, r4, #25
 8004e4e:	68e3      	ldr	r3, [r4, #12]
 8004e50:	6832      	ldr	r2, [r6, #0]
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	42ab      	cmp	r3, r5
 8004e56:	dc26      	bgt.n	8004ea6 <_printf_common+0x96>
 8004e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e5c:	1e13      	subs	r3, r2, #0
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	bf18      	it	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	0692      	lsls	r2, r2, #26
 8004e66:	d42b      	bmi.n	8004ec0 <_printf_common+0xb0>
 8004e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	4638      	mov	r0, r7
 8004e70:	47c0      	blx	r8
 8004e72:	3001      	adds	r0, #1
 8004e74:	d01e      	beq.n	8004eb4 <_printf_common+0xa4>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	68e5      	ldr	r5, [r4, #12]
 8004e7a:	6832      	ldr	r2, [r6, #0]
 8004e7c:	f003 0306 	and.w	r3, r3, #6
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	bf08      	it	eq
 8004e84:	1aad      	subeq	r5, r5, r2
 8004e86:	68a3      	ldr	r3, [r4, #8]
 8004e88:	6922      	ldr	r2, [r4, #16]
 8004e8a:	bf0c      	ite	eq
 8004e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e90:	2500      	movne	r5, #0
 8004e92:	4293      	cmp	r3, r2
 8004e94:	bfc4      	itt	gt
 8004e96:	1a9b      	subgt	r3, r3, r2
 8004e98:	18ed      	addgt	r5, r5, r3
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	341a      	adds	r4, #26
 8004e9e:	42b5      	cmp	r5, r6
 8004ea0:	d11a      	bne.n	8004ed8 <_printf_common+0xc8>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e008      	b.n	8004eb8 <_printf_common+0xa8>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4652      	mov	r2, sl
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4638      	mov	r0, r7
 8004eae:	47c0      	blx	r8
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d103      	bne.n	8004ebc <_printf_common+0xac>
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	e7c6      	b.n	8004e4e <_printf_common+0x3e>
 8004ec0:	18e1      	adds	r1, r4, r3
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	2030      	movs	r0, #48	; 0x30
 8004ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eca:	4422      	add	r2, r4
 8004ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	e7c7      	b.n	8004e68 <_printf_common+0x58>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4622      	mov	r2, r4
 8004edc:	4649      	mov	r1, r9
 8004ede:	4638      	mov	r0, r7
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d0e6      	beq.n	8004eb4 <_printf_common+0xa4>
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7d9      	b.n	8004e9e <_printf_common+0x8e>
	...

08004eec <_printf_i>:
 8004eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	7e0f      	ldrb	r7, [r1, #24]
 8004ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ef4:	2f78      	cmp	r7, #120	; 0x78
 8004ef6:	4691      	mov	r9, r2
 8004ef8:	4680      	mov	r8, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	469a      	mov	sl, r3
 8004efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f02:	d807      	bhi.n	8004f14 <_printf_i+0x28>
 8004f04:	2f62      	cmp	r7, #98	; 0x62
 8004f06:	d80a      	bhi.n	8004f1e <_printf_i+0x32>
 8004f08:	2f00      	cmp	r7, #0
 8004f0a:	f000 80d8 	beq.w	80050be <_printf_i+0x1d2>
 8004f0e:	2f58      	cmp	r7, #88	; 0x58
 8004f10:	f000 80a3 	beq.w	800505a <_printf_i+0x16e>
 8004f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f1c:	e03a      	b.n	8004f94 <_printf_i+0xa8>
 8004f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f22:	2b15      	cmp	r3, #21
 8004f24:	d8f6      	bhi.n	8004f14 <_printf_i+0x28>
 8004f26:	a101      	add	r1, pc, #4	; (adr r1, 8004f2c <_printf_i+0x40>)
 8004f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f2c:	08004f85 	.word	0x08004f85
 8004f30:	08004f99 	.word	0x08004f99
 8004f34:	08004f15 	.word	0x08004f15
 8004f38:	08004f15 	.word	0x08004f15
 8004f3c:	08004f15 	.word	0x08004f15
 8004f40:	08004f15 	.word	0x08004f15
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004f15 	.word	0x08004f15
 8004f4c:	08004f15 	.word	0x08004f15
 8004f50:	08004f15 	.word	0x08004f15
 8004f54:	08004f15 	.word	0x08004f15
 8004f58:	080050a5 	.word	0x080050a5
 8004f5c:	08004fc9 	.word	0x08004fc9
 8004f60:	08005087 	.word	0x08005087
 8004f64:	08004f15 	.word	0x08004f15
 8004f68:	08004f15 	.word	0x08004f15
 8004f6c:	080050c7 	.word	0x080050c7
 8004f70:	08004f15 	.word	0x08004f15
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004f15 	.word	0x08004f15
 8004f7c:	08004f15 	.word	0x08004f15
 8004f80:	0800508f 	.word	0x0800508f
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	1d1a      	adds	r2, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	602a      	str	r2, [r5, #0]
 8004f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0a3      	b.n	80050e0 <_printf_i+0x1f4>
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	6829      	ldr	r1, [r5, #0]
 8004f9c:	0606      	lsls	r6, r0, #24
 8004f9e:	f101 0304 	add.w	r3, r1, #4
 8004fa2:	d50a      	bpl.n	8004fba <_printf_i+0xce>
 8004fa4:	680e      	ldr	r6, [r1, #0]
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	2e00      	cmp	r6, #0
 8004faa:	da03      	bge.n	8004fb4 <_printf_i+0xc8>
 8004fac:	232d      	movs	r3, #45	; 0x2d
 8004fae:	4276      	negs	r6, r6
 8004fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb4:	485e      	ldr	r0, [pc, #376]	; (8005130 <_printf_i+0x244>)
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	e019      	b.n	8004fee <_printf_i+0x102>
 8004fba:	680e      	ldr	r6, [r1, #0]
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fc2:	bf18      	it	ne
 8004fc4:	b236      	sxthne	r6, r6
 8004fc6:	e7ef      	b.n	8004fa8 <_printf_i+0xbc>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	1d19      	adds	r1, r3, #4
 8004fce:	6029      	str	r1, [r5, #0]
 8004fd0:	0601      	lsls	r1, r0, #24
 8004fd2:	d501      	bpl.n	8004fd8 <_printf_i+0xec>
 8004fd4:	681e      	ldr	r6, [r3, #0]
 8004fd6:	e002      	b.n	8004fde <_printf_i+0xf2>
 8004fd8:	0646      	lsls	r6, r0, #25
 8004fda:	d5fb      	bpl.n	8004fd4 <_printf_i+0xe8>
 8004fdc:	881e      	ldrh	r6, [r3, #0]
 8004fde:	4854      	ldr	r0, [pc, #336]	; (8005130 <_printf_i+0x244>)
 8004fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2308      	moveq	r3, #8
 8004fe6:	230a      	movne	r3, #10
 8004fe8:	2100      	movs	r1, #0
 8004fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fee:	6865      	ldr	r5, [r4, #4]
 8004ff0:	60a5      	str	r5, [r4, #8]
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	bfa2      	ittt	ge
 8004ff6:	6821      	ldrge	r1, [r4, #0]
 8004ff8:	f021 0104 	bicge.w	r1, r1, #4
 8004ffc:	6021      	strge	r1, [r4, #0]
 8004ffe:	b90e      	cbnz	r6, 8005004 <_printf_i+0x118>
 8005000:	2d00      	cmp	r5, #0
 8005002:	d04d      	beq.n	80050a0 <_printf_i+0x1b4>
 8005004:	4615      	mov	r5, r2
 8005006:	fbb6 f1f3 	udiv	r1, r6, r3
 800500a:	fb03 6711 	mls	r7, r3, r1, r6
 800500e:	5dc7      	ldrb	r7, [r0, r7]
 8005010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005014:	4637      	mov	r7, r6
 8005016:	42bb      	cmp	r3, r7
 8005018:	460e      	mov	r6, r1
 800501a:	d9f4      	bls.n	8005006 <_printf_i+0x11a>
 800501c:	2b08      	cmp	r3, #8
 800501e:	d10b      	bne.n	8005038 <_printf_i+0x14c>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	07de      	lsls	r6, r3, #31
 8005024:	d508      	bpl.n	8005038 <_printf_i+0x14c>
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	6861      	ldr	r1, [r4, #4]
 800502a:	4299      	cmp	r1, r3
 800502c:	bfde      	ittt	le
 800502e:	2330      	movle	r3, #48	; 0x30
 8005030:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005034:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005038:	1b52      	subs	r2, r2, r5
 800503a:	6122      	str	r2, [r4, #16]
 800503c:	f8cd a000 	str.w	sl, [sp]
 8005040:	464b      	mov	r3, r9
 8005042:	aa03      	add	r2, sp, #12
 8005044:	4621      	mov	r1, r4
 8005046:	4640      	mov	r0, r8
 8005048:	f7ff fee2 	bl	8004e10 <_printf_common>
 800504c:	3001      	adds	r0, #1
 800504e:	d14c      	bne.n	80050ea <_printf_i+0x1fe>
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	b004      	add	sp, #16
 8005056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505a:	4835      	ldr	r0, [pc, #212]	; (8005130 <_printf_i+0x244>)
 800505c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005060:	6829      	ldr	r1, [r5, #0]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f851 6b04 	ldr.w	r6, [r1], #4
 8005068:	6029      	str	r1, [r5, #0]
 800506a:	061d      	lsls	r5, r3, #24
 800506c:	d514      	bpl.n	8005098 <_printf_i+0x1ac>
 800506e:	07df      	lsls	r7, r3, #31
 8005070:	bf44      	itt	mi
 8005072:	f043 0320 	orrmi.w	r3, r3, #32
 8005076:	6023      	strmi	r3, [r4, #0]
 8005078:	b91e      	cbnz	r6, 8005082 <_printf_i+0x196>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	f023 0320 	bic.w	r3, r3, #32
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	2310      	movs	r3, #16
 8005084:	e7b0      	b.n	8004fe8 <_printf_i+0xfc>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	f043 0320 	orr.w	r3, r3, #32
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	2378      	movs	r3, #120	; 0x78
 8005090:	4828      	ldr	r0, [pc, #160]	; (8005134 <_printf_i+0x248>)
 8005092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005096:	e7e3      	b.n	8005060 <_printf_i+0x174>
 8005098:	0659      	lsls	r1, r3, #25
 800509a:	bf48      	it	mi
 800509c:	b2b6      	uxthmi	r6, r6
 800509e:	e7e6      	b.n	800506e <_printf_i+0x182>
 80050a0:	4615      	mov	r5, r2
 80050a2:	e7bb      	b.n	800501c <_printf_i+0x130>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	6826      	ldr	r6, [r4, #0]
 80050a8:	6961      	ldr	r1, [r4, #20]
 80050aa:	1d18      	adds	r0, r3, #4
 80050ac:	6028      	str	r0, [r5, #0]
 80050ae:	0635      	lsls	r5, r6, #24
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	d501      	bpl.n	80050b8 <_printf_i+0x1cc>
 80050b4:	6019      	str	r1, [r3, #0]
 80050b6:	e002      	b.n	80050be <_printf_i+0x1d2>
 80050b8:	0670      	lsls	r0, r6, #25
 80050ba:	d5fb      	bpl.n	80050b4 <_printf_i+0x1c8>
 80050bc:	8019      	strh	r1, [r3, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	6123      	str	r3, [r4, #16]
 80050c2:	4615      	mov	r5, r2
 80050c4:	e7ba      	b.n	800503c <_printf_i+0x150>
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	1d1a      	adds	r2, r3, #4
 80050ca:	602a      	str	r2, [r5, #0]
 80050cc:	681d      	ldr	r5, [r3, #0]
 80050ce:	6862      	ldr	r2, [r4, #4]
 80050d0:	2100      	movs	r1, #0
 80050d2:	4628      	mov	r0, r5
 80050d4:	f7fb f88c 	bl	80001f0 <memchr>
 80050d8:	b108      	cbz	r0, 80050de <_printf_i+0x1f2>
 80050da:	1b40      	subs	r0, r0, r5
 80050dc:	6060      	str	r0, [r4, #4]
 80050de:	6863      	ldr	r3, [r4, #4]
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	2300      	movs	r3, #0
 80050e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e8:	e7a8      	b.n	800503c <_printf_i+0x150>
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	462a      	mov	r2, r5
 80050ee:	4649      	mov	r1, r9
 80050f0:	4640      	mov	r0, r8
 80050f2:	47d0      	blx	sl
 80050f4:	3001      	adds	r0, #1
 80050f6:	d0ab      	beq.n	8005050 <_printf_i+0x164>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	079b      	lsls	r3, r3, #30
 80050fc:	d413      	bmi.n	8005126 <_printf_i+0x23a>
 80050fe:	68e0      	ldr	r0, [r4, #12]
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	4298      	cmp	r0, r3
 8005104:	bfb8      	it	lt
 8005106:	4618      	movlt	r0, r3
 8005108:	e7a4      	b.n	8005054 <_printf_i+0x168>
 800510a:	2301      	movs	r3, #1
 800510c:	4632      	mov	r2, r6
 800510e:	4649      	mov	r1, r9
 8005110:	4640      	mov	r0, r8
 8005112:	47d0      	blx	sl
 8005114:	3001      	adds	r0, #1
 8005116:	d09b      	beq.n	8005050 <_printf_i+0x164>
 8005118:	3501      	adds	r5, #1
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	9903      	ldr	r1, [sp, #12]
 800511e:	1a5b      	subs	r3, r3, r1
 8005120:	42ab      	cmp	r3, r5
 8005122:	dcf2      	bgt.n	800510a <_printf_i+0x21e>
 8005124:	e7eb      	b.n	80050fe <_printf_i+0x212>
 8005126:	2500      	movs	r5, #0
 8005128:	f104 0619 	add.w	r6, r4, #25
 800512c:	e7f5      	b.n	800511a <_printf_i+0x22e>
 800512e:	bf00      	nop
 8005130:	080055e9 	.word	0x080055e9
 8005134:	080055fa 	.word	0x080055fa

08005138 <memcpy>:
 8005138:	440a      	add	r2, r1
 800513a:	4291      	cmp	r1, r2
 800513c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005140:	d100      	bne.n	8005144 <memcpy+0xc>
 8005142:	4770      	bx	lr
 8005144:	b510      	push	{r4, lr}
 8005146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800514e:	4291      	cmp	r1, r2
 8005150:	d1f9      	bne.n	8005146 <memcpy+0xe>
 8005152:	bd10      	pop	{r4, pc}

08005154 <memmove>:
 8005154:	4288      	cmp	r0, r1
 8005156:	b510      	push	{r4, lr}
 8005158:	eb01 0402 	add.w	r4, r1, r2
 800515c:	d902      	bls.n	8005164 <memmove+0x10>
 800515e:	4284      	cmp	r4, r0
 8005160:	4623      	mov	r3, r4
 8005162:	d807      	bhi.n	8005174 <memmove+0x20>
 8005164:	1e43      	subs	r3, r0, #1
 8005166:	42a1      	cmp	r1, r4
 8005168:	d008      	beq.n	800517c <memmove+0x28>
 800516a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800516e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005172:	e7f8      	b.n	8005166 <memmove+0x12>
 8005174:	4402      	add	r2, r0
 8005176:	4601      	mov	r1, r0
 8005178:	428a      	cmp	r2, r1
 800517a:	d100      	bne.n	800517e <memmove+0x2a>
 800517c:	bd10      	pop	{r4, pc}
 800517e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005186:	e7f7      	b.n	8005178 <memmove+0x24>

08005188 <_free_r>:
 8005188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800518a:	2900      	cmp	r1, #0
 800518c:	d044      	beq.n	8005218 <_free_r+0x90>
 800518e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005192:	9001      	str	r0, [sp, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f1a1 0404 	sub.w	r4, r1, #4
 800519a:	bfb8      	it	lt
 800519c:	18e4      	addlt	r4, r4, r3
 800519e:	f000 f913 	bl	80053c8 <__malloc_lock>
 80051a2:	4a1e      	ldr	r2, [pc, #120]	; (800521c <_free_r+0x94>)
 80051a4:	9801      	ldr	r0, [sp, #4]
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	b933      	cbnz	r3, 80051b8 <_free_r+0x30>
 80051aa:	6063      	str	r3, [r4, #4]
 80051ac:	6014      	str	r4, [r2, #0]
 80051ae:	b003      	add	sp, #12
 80051b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051b4:	f000 b90e 	b.w	80053d4 <__malloc_unlock>
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	d908      	bls.n	80051ce <_free_r+0x46>
 80051bc:	6825      	ldr	r5, [r4, #0]
 80051be:	1961      	adds	r1, r4, r5
 80051c0:	428b      	cmp	r3, r1
 80051c2:	bf01      	itttt	eq
 80051c4:	6819      	ldreq	r1, [r3, #0]
 80051c6:	685b      	ldreq	r3, [r3, #4]
 80051c8:	1949      	addeq	r1, r1, r5
 80051ca:	6021      	streq	r1, [r4, #0]
 80051cc:	e7ed      	b.n	80051aa <_free_r+0x22>
 80051ce:	461a      	mov	r2, r3
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	b10b      	cbz	r3, 80051d8 <_free_r+0x50>
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	d9fa      	bls.n	80051ce <_free_r+0x46>
 80051d8:	6811      	ldr	r1, [r2, #0]
 80051da:	1855      	adds	r5, r2, r1
 80051dc:	42a5      	cmp	r5, r4
 80051de:	d10b      	bne.n	80051f8 <_free_r+0x70>
 80051e0:	6824      	ldr	r4, [r4, #0]
 80051e2:	4421      	add	r1, r4
 80051e4:	1854      	adds	r4, r2, r1
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	6011      	str	r1, [r2, #0]
 80051ea:	d1e0      	bne.n	80051ae <_free_r+0x26>
 80051ec:	681c      	ldr	r4, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	6053      	str	r3, [r2, #4]
 80051f2:	4421      	add	r1, r4
 80051f4:	6011      	str	r1, [r2, #0]
 80051f6:	e7da      	b.n	80051ae <_free_r+0x26>
 80051f8:	d902      	bls.n	8005200 <_free_r+0x78>
 80051fa:	230c      	movs	r3, #12
 80051fc:	6003      	str	r3, [r0, #0]
 80051fe:	e7d6      	b.n	80051ae <_free_r+0x26>
 8005200:	6825      	ldr	r5, [r4, #0]
 8005202:	1961      	adds	r1, r4, r5
 8005204:	428b      	cmp	r3, r1
 8005206:	bf04      	itt	eq
 8005208:	6819      	ldreq	r1, [r3, #0]
 800520a:	685b      	ldreq	r3, [r3, #4]
 800520c:	6063      	str	r3, [r4, #4]
 800520e:	bf04      	itt	eq
 8005210:	1949      	addeq	r1, r1, r5
 8005212:	6021      	streq	r1, [r4, #0]
 8005214:	6054      	str	r4, [r2, #4]
 8005216:	e7ca      	b.n	80051ae <_free_r+0x26>
 8005218:	b003      	add	sp, #12
 800521a:	bd30      	pop	{r4, r5, pc}
 800521c:	20000184 	.word	0x20000184

08005220 <sbrk_aligned>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4e0e      	ldr	r6, [pc, #56]	; (800525c <sbrk_aligned+0x3c>)
 8005224:	460c      	mov	r4, r1
 8005226:	6831      	ldr	r1, [r6, #0]
 8005228:	4605      	mov	r5, r0
 800522a:	b911      	cbnz	r1, 8005232 <sbrk_aligned+0x12>
 800522c:	f000 f8bc 	bl	80053a8 <_sbrk_r>
 8005230:	6030      	str	r0, [r6, #0]
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f8b7 	bl	80053a8 <_sbrk_r>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	d00a      	beq.n	8005254 <sbrk_aligned+0x34>
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d007      	beq.n	8005258 <sbrk_aligned+0x38>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f8ac 	bl	80053a8 <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d101      	bne.n	8005258 <sbrk_aligned+0x38>
 8005254:	f04f 34ff 	mov.w	r4, #4294967295
 8005258:	4620      	mov	r0, r4
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	20000188 	.word	0x20000188

08005260 <_malloc_r>:
 8005260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005264:	1ccd      	adds	r5, r1, #3
 8005266:	f025 0503 	bic.w	r5, r5, #3
 800526a:	3508      	adds	r5, #8
 800526c:	2d0c      	cmp	r5, #12
 800526e:	bf38      	it	cc
 8005270:	250c      	movcc	r5, #12
 8005272:	2d00      	cmp	r5, #0
 8005274:	4607      	mov	r7, r0
 8005276:	db01      	blt.n	800527c <_malloc_r+0x1c>
 8005278:	42a9      	cmp	r1, r5
 800527a:	d905      	bls.n	8005288 <_malloc_r+0x28>
 800527c:	230c      	movs	r3, #12
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	2600      	movs	r6, #0
 8005282:	4630      	mov	r0, r6
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	4e2e      	ldr	r6, [pc, #184]	; (8005344 <_malloc_r+0xe4>)
 800528a:	f000 f89d 	bl	80053c8 <__malloc_lock>
 800528e:	6833      	ldr	r3, [r6, #0]
 8005290:	461c      	mov	r4, r3
 8005292:	bb34      	cbnz	r4, 80052e2 <_malloc_r+0x82>
 8005294:	4629      	mov	r1, r5
 8005296:	4638      	mov	r0, r7
 8005298:	f7ff ffc2 	bl	8005220 <sbrk_aligned>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	4604      	mov	r4, r0
 80052a0:	d14d      	bne.n	800533e <_malloc_r+0xde>
 80052a2:	6834      	ldr	r4, [r6, #0]
 80052a4:	4626      	mov	r6, r4
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	d140      	bne.n	800532c <_malloc_r+0xcc>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	4631      	mov	r1, r6
 80052ae:	4638      	mov	r0, r7
 80052b0:	eb04 0803 	add.w	r8, r4, r3
 80052b4:	f000 f878 	bl	80053a8 <_sbrk_r>
 80052b8:	4580      	cmp	r8, r0
 80052ba:	d13a      	bne.n	8005332 <_malloc_r+0xd2>
 80052bc:	6821      	ldr	r1, [r4, #0]
 80052be:	3503      	adds	r5, #3
 80052c0:	1a6d      	subs	r5, r5, r1
 80052c2:	f025 0503 	bic.w	r5, r5, #3
 80052c6:	3508      	adds	r5, #8
 80052c8:	2d0c      	cmp	r5, #12
 80052ca:	bf38      	it	cc
 80052cc:	250c      	movcc	r5, #12
 80052ce:	4629      	mov	r1, r5
 80052d0:	4638      	mov	r0, r7
 80052d2:	f7ff ffa5 	bl	8005220 <sbrk_aligned>
 80052d6:	3001      	adds	r0, #1
 80052d8:	d02b      	beq.n	8005332 <_malloc_r+0xd2>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	442b      	add	r3, r5
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	e00e      	b.n	8005300 <_malloc_r+0xa0>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	1b52      	subs	r2, r2, r5
 80052e6:	d41e      	bmi.n	8005326 <_malloc_r+0xc6>
 80052e8:	2a0b      	cmp	r2, #11
 80052ea:	d916      	bls.n	800531a <_malloc_r+0xba>
 80052ec:	1961      	adds	r1, r4, r5
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	6025      	str	r5, [r4, #0]
 80052f2:	bf18      	it	ne
 80052f4:	6059      	strne	r1, [r3, #4]
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	bf08      	it	eq
 80052fa:	6031      	streq	r1, [r6, #0]
 80052fc:	5162      	str	r2, [r4, r5]
 80052fe:	604b      	str	r3, [r1, #4]
 8005300:	4638      	mov	r0, r7
 8005302:	f104 060b 	add.w	r6, r4, #11
 8005306:	f000 f865 	bl	80053d4 <__malloc_unlock>
 800530a:	f026 0607 	bic.w	r6, r6, #7
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	1af2      	subs	r2, r6, r3
 8005312:	d0b6      	beq.n	8005282 <_malloc_r+0x22>
 8005314:	1b9b      	subs	r3, r3, r6
 8005316:	50a3      	str	r3, [r4, r2]
 8005318:	e7b3      	b.n	8005282 <_malloc_r+0x22>
 800531a:	6862      	ldr	r2, [r4, #4]
 800531c:	42a3      	cmp	r3, r4
 800531e:	bf0c      	ite	eq
 8005320:	6032      	streq	r2, [r6, #0]
 8005322:	605a      	strne	r2, [r3, #4]
 8005324:	e7ec      	b.n	8005300 <_malloc_r+0xa0>
 8005326:	4623      	mov	r3, r4
 8005328:	6864      	ldr	r4, [r4, #4]
 800532a:	e7b2      	b.n	8005292 <_malloc_r+0x32>
 800532c:	4634      	mov	r4, r6
 800532e:	6876      	ldr	r6, [r6, #4]
 8005330:	e7b9      	b.n	80052a6 <_malloc_r+0x46>
 8005332:	230c      	movs	r3, #12
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	4638      	mov	r0, r7
 8005338:	f000 f84c 	bl	80053d4 <__malloc_unlock>
 800533c:	e7a1      	b.n	8005282 <_malloc_r+0x22>
 800533e:	6025      	str	r5, [r4, #0]
 8005340:	e7de      	b.n	8005300 <_malloc_r+0xa0>
 8005342:	bf00      	nop
 8005344:	20000184 	.word	0x20000184

08005348 <_realloc_r>:
 8005348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534c:	4680      	mov	r8, r0
 800534e:	4614      	mov	r4, r2
 8005350:	460e      	mov	r6, r1
 8005352:	b921      	cbnz	r1, 800535e <_realloc_r+0x16>
 8005354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	4611      	mov	r1, r2
 800535a:	f7ff bf81 	b.w	8005260 <_malloc_r>
 800535e:	b92a      	cbnz	r2, 800536c <_realloc_r+0x24>
 8005360:	f7ff ff12 	bl	8005188 <_free_r>
 8005364:	4625      	mov	r5, r4
 8005366:	4628      	mov	r0, r5
 8005368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800536c:	f000 f838 	bl	80053e0 <_malloc_usable_size_r>
 8005370:	4284      	cmp	r4, r0
 8005372:	4607      	mov	r7, r0
 8005374:	d802      	bhi.n	800537c <_realloc_r+0x34>
 8005376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800537a:	d812      	bhi.n	80053a2 <_realloc_r+0x5a>
 800537c:	4621      	mov	r1, r4
 800537e:	4640      	mov	r0, r8
 8005380:	f7ff ff6e 	bl	8005260 <_malloc_r>
 8005384:	4605      	mov	r5, r0
 8005386:	2800      	cmp	r0, #0
 8005388:	d0ed      	beq.n	8005366 <_realloc_r+0x1e>
 800538a:	42bc      	cmp	r4, r7
 800538c:	4622      	mov	r2, r4
 800538e:	4631      	mov	r1, r6
 8005390:	bf28      	it	cs
 8005392:	463a      	movcs	r2, r7
 8005394:	f7ff fed0 	bl	8005138 <memcpy>
 8005398:	4631      	mov	r1, r6
 800539a:	4640      	mov	r0, r8
 800539c:	f7ff fef4 	bl	8005188 <_free_r>
 80053a0:	e7e1      	b.n	8005366 <_realloc_r+0x1e>
 80053a2:	4635      	mov	r5, r6
 80053a4:	e7df      	b.n	8005366 <_realloc_r+0x1e>
	...

080053a8 <_sbrk_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d06      	ldr	r5, [pc, #24]	; (80053c4 <_sbrk_r+0x1c>)
 80053ac:	2300      	movs	r3, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fc f9d4 	bl	8001760 <_sbrk>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_sbrk_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_sbrk_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	2000018c 	.word	0x2000018c

080053c8 <__malloc_lock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__malloc_lock+0x8>)
 80053ca:	f000 b811 	b.w	80053f0 <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000190 	.word	0x20000190

080053d4 <__malloc_unlock>:
 80053d4:	4801      	ldr	r0, [pc, #4]	; (80053dc <__malloc_unlock+0x8>)
 80053d6:	f000 b80c 	b.w	80053f2 <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	20000190 	.word	0x20000190

080053e0 <_malloc_usable_size_r>:
 80053e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e4:	1f18      	subs	r0, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bfbc      	itt	lt
 80053ea:	580b      	ldrlt	r3, [r1, r0]
 80053ec:	18c0      	addlt	r0, r0, r3
 80053ee:	4770      	bx	lr

080053f0 <__retarget_lock_acquire_recursive>:
 80053f0:	4770      	bx	lr

080053f2 <__retarget_lock_release_recursive>:
 80053f2:	4770      	bx	lr

080053f4 <_init>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr

08005400 <_fini>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr
