
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb0  08005bb0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb8  08005bb8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000078  08005c38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08005c38  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffe4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00031df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00032d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167ac  00000000  00000000  00033ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cbd  00000000  00000000  0004a354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3fb  00000000  00000000  0005b011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea40c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  000ea45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005958 	.word	0x08005958

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005958 	.word	0x08005958

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getSelectedValuePtr>:
const uint8_t maxValues[] = {23, 59, 59, 31, 12, 99}; // год, хв, сек, день, міс, рік
uint8_t latestgetCurrentValue = 100;
volatile uint8_t HOURS = 0;
volatile uint8_t MINUTES = 0;

uint8_t* getSelectedValuePtr() {
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
    switch (selectedParameter) {
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <getSelectedValuePtr+0x50>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b05      	cmp	r3, #5
 800059e:	d81b      	bhi.n	80005d8 <getSelectedValuePtr+0x44>
 80005a0:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <getSelectedValuePtr+0x14>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005c1 	.word	0x080005c1
 80005ac:	080005c5 	.word	0x080005c5
 80005b0:	080005c9 	.word	0x080005c9
 80005b4:	080005cd 	.word	0x080005cd
 80005b8:	080005d1 	.word	0x080005d1
 80005bc:	080005d5 	.word	0x080005d5
        case 0: return &hours;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <getSelectedValuePtr+0x54>)
 80005c2:	e00a      	b.n	80005da <getSelectedValuePtr+0x46>
        case 1: return &minutes;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <getSelectedValuePtr+0x58>)
 80005c6:	e008      	b.n	80005da <getSelectedValuePtr+0x46>
        case 2: return &seconds;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <getSelectedValuePtr+0x5c>)
 80005ca:	e006      	b.n	80005da <getSelectedValuePtr+0x46>
        case 3: return &day;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <getSelectedValuePtr+0x60>)
 80005ce:	e004      	b.n	80005da <getSelectedValuePtr+0x46>
        case 4: return &month;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <getSelectedValuePtr+0x64>)
 80005d2:	e002      	b.n	80005da <getSelectedValuePtr+0x46>
        case 5: return &year;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <getSelectedValuePtr+0x68>)
 80005d6:	e000      	b.n	80005da <getSelectedValuePtr+0x46>
        default: return &hours; // За замовчуванням
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <getSelectedValuePtr+0x54>)
    }
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	20000176 	.word	0x20000176
 80005e8:	20000001 	.word	0x20000001
 80005ec:	20000002 	.word	0x20000002
 80005f0:	20000177 	.word	0x20000177
 80005f4:	20000003 	.word	0x20000003
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000005 	.word	0x20000005

08000600 <increaseValue>:


void increaseValue() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
    uint8_t *valuePtr = getSelectedValuePtr();
 8000606:	f7ff ffc5 	bl	8000594 <getSelectedValuePtr>
 800060a:	6078      	str	r0, [r7, #4]
    (*valuePtr)++;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	701a      	strb	r2, [r3, #0]

    if (*valuePtr > maxValues[selectedParameter]) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781a      	ldrb	r2, [r3, #0]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <increaseValue+0x38>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <increaseValue+0x3c>)
 8000624:	5c5b      	ldrb	r3, [r3, r1]
 8000626:	429a      	cmp	r2, r3
 8000628:	d902      	bls.n	8000630 <increaseValue+0x30>
        *valuePtr = 0;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
    }

}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000176 	.word	0x20000176
 800063c:	08005b5c 	.word	0x08005b5c

08000640 <getCurrentValue>:

uint8_t getCurrentValue() {
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
    switch (selectedParameter) {
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <getCurrentValue+0x5c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d821      	bhi.n	8000690 <getCurrentValue+0x50>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <getCurrentValue+0x14>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	0800066d 	.word	0x0800066d
 8000658:	08000673 	.word	0x08000673
 800065c:	08000679 	.word	0x08000679
 8000660:	0800067f 	.word	0x0800067f
 8000664:	08000685 	.word	0x08000685
 8000668:	0800068b 	.word	0x0800068b
        case 0: return hours;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <getCurrentValue+0x60>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	e00f      	b.n	8000692 <getCurrentValue+0x52>
        case 1: return minutes;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <getCurrentValue+0x64>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	e00c      	b.n	8000692 <getCurrentValue+0x52>
        case 2: return seconds;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <getCurrentValue+0x68>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	e009      	b.n	8000692 <getCurrentValue+0x52>
        case 3: return day;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <getCurrentValue+0x6c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	e006      	b.n	8000692 <getCurrentValue+0x52>
        case 4: return month;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <getCurrentValue+0x70>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	e003      	b.n	8000692 <getCurrentValue+0x52>
        case 5: return year;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <getCurrentValue+0x74>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	e000      	b.n	8000692 <getCurrentValue+0x52>
        default: return 0;
 8000690:	2300      	movs	r3, #0
    }
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20000176 	.word	0x20000176
 80006a0:	20000001 	.word	0x20000001
 80006a4:	20000002 	.word	0x20000002
 80006a8:	20000177 	.word	0x20000177
 80006ac:	20000003 	.word	0x20000003
 80006b0:	20000004 	.word	0x20000004
 80006b4:	20000005 	.word	0x20000005

080006b8 <displayCurrentSetting>:

void displayCurrentSetting() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0


    char valueStr[3];


    if(getCurrentValue() != latestgetCurrentValue){
 80006be:	f7ff ffbf 	bl	8000640 <getCurrentValue>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <displayCurrentSetting+0xb8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d04b      	beq.n	8000766 <displayCurrentSetting+0xae>
    	latestgetCurrentValue = getCurrentValue();
 80006ce:	f7ff ffb7 	bl	8000640 <getCurrentValue>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <displayCurrentSetting+0xb8>)
 80006d8:	701a      	strb	r2, [r3, #0]
    	lcd_clr();
 80006da:	f000 fce8 	bl	80010ae <lcd_clr>
    	    set_cursor(0, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fcb4 	bl	800104e <set_cursor>
    	    lcd_str("Set ");
 80006e6:	4823      	ldr	r0, [pc, #140]	; (8000774 <displayCurrentSetting+0xbc>)
 80006e8:	f000 fccc 	bl	8001084 <lcd_str>

    	    switch (selectedParameter) {
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <displayCurrentSetting+0xc0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d827      	bhi.n	8000744 <displayCurrentSetting+0x8c>
 80006f4:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <displayCurrentSetting+0x44>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000715 	.word	0x08000715
 8000700:	0800071d 	.word	0x0800071d
 8000704:	08000725 	.word	0x08000725
 8000708:	0800072d 	.word	0x0800072d
 800070c:	08000735 	.word	0x08000735
 8000710:	0800073d 	.word	0x0800073d
    	        case 0: lcd_str("Hour:"); break;
 8000714:	4819      	ldr	r0, [pc, #100]	; (800077c <displayCurrentSetting+0xc4>)
 8000716:	f000 fcb5 	bl	8001084 <lcd_str>
 800071a:	e013      	b.n	8000744 <displayCurrentSetting+0x8c>
    	        case 1: lcd_str("Minute:"); break;
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <displayCurrentSetting+0xc8>)
 800071e:	f000 fcb1 	bl	8001084 <lcd_str>
 8000722:	e00f      	b.n	8000744 <displayCurrentSetting+0x8c>
    	        case 2: lcd_str("Second:"); break;
 8000724:	4817      	ldr	r0, [pc, #92]	; (8000784 <displayCurrentSetting+0xcc>)
 8000726:	f000 fcad 	bl	8001084 <lcd_str>
 800072a:	e00b      	b.n	8000744 <displayCurrentSetting+0x8c>
    	        case 3: lcd_str("Day:"); break;
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <displayCurrentSetting+0xd0>)
 800072e:	f000 fca9 	bl	8001084 <lcd_str>
 8000732:	e007      	b.n	8000744 <displayCurrentSetting+0x8c>
    	        case 4: lcd_str("Month:"); break;
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <displayCurrentSetting+0xd4>)
 8000736:	f000 fca5 	bl	8001084 <lcd_str>
 800073a:	e003      	b.n	8000744 <displayCurrentSetting+0x8c>
    	        case 5: lcd_str("Year:"); break;
 800073c:	4814      	ldr	r0, [pc, #80]	; (8000790 <displayCurrentSetting+0xd8>)
 800073e:	f000 fca1 	bl	8001084 <lcd_str>
 8000742:	bf00      	nop
    	    }
    	    sprintf(valueStr, "%02d", getCurrentValue());
 8000744:	f7ff ff7c 	bl	8000640 <getCurrentValue>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4911      	ldr	r1, [pc, #68]	; (8000794 <displayCurrentSetting+0xdc>)
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fc93 	bl	800507c <siprintf>
    	set_cursor(0, 1);
 8000756:	2101      	movs	r1, #1
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fc78 	bl	800104e <set_cursor>
    	lcd_str(valueStr);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fc8f 	bl	8001084 <lcd_str>
    }


}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000006 	.word	0x20000006
 8000774:	08005970 	.word	0x08005970
 8000778:	20000176 	.word	0x20000176
 800077c:	08005978 	.word	0x08005978
 8000780:	08005980 	.word	0x08005980
 8000784:	08005988 	.word	0x08005988
 8000788:	08005990 	.word	0x08005990
 800078c:	08005998 	.word	0x08005998
 8000790:	080059a0 	.word	0x080059a0
 8000794:	080059a8 	.word	0x080059a8

08000798 <saveSettings>:



void saveSettings() {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    // Наприклад, зберігання налаштувань у DS1307
    DS1307_Set_Time(hours, minutes, seconds);
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <saveSettings+0x2c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <saveSettings+0x30>)
 80007a2:	7811      	ldrb	r1, [r2, #0]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <saveSettings+0x34>)
 80007a6:	7812      	ldrb	r2, [r2, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fa95 	bl	8000cd8 <DS1307_Set_Time>
    DS1307_Set_Date(day, month, year);
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <saveSettings+0x38>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <saveSettings+0x3c>)
 80007b4:	7811      	ldrb	r1, [r2, #0]
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <saveSettings+0x40>)
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 facd 	bl	8000d5a <DS1307_Set_Date>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000001 	.word	0x20000001
 80007c8:	20000002 	.word	0x20000002
 80007cc:	20000177 	.word	0x20000177
 80007d0:	20000003 	.word	0x20000003
 80007d4:	20000004 	.word	0x20000004
 80007d8:	20000005 	.word	0x20000005

080007dc <main>:


int main(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	af02      	add	r7, sp, #8
	char str[15];
	uint8_t writeData[EEPROM_PAGE_SIZE] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
 80007e2:	4a44      	ldr	r2, [pc, #272]	; (80008f4 <main+0x118>)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ec:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t readData[EEPROM_PAGE_SIZE] = {0};
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]

	HAL_Init();
 80007f8:	f000 fffa 	bl	80017f0 <HAL_Init>

	SystemClock_Config();
 80007fc:	f000 fcca 	bl	8001194 <SystemClock_Config>
	MX_GPIO_Init();
 8000800:	f000 fdda 	bl	80013b8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000804:	f000 fd26 	bl	8001254 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000808:	f000 fdac 	bl	8001364 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 800080c:	f000 fd50 	bl	80012b0 <MX_TIM2_Init>

	lcd_init();
 8000810:	f000 fbe6 	bl	8000fe0 <lcd_init>
  	//DS1307_Set_Time(17, 52, 0);
  	I2C_ScanBus(&hi2c1);
 8000814:	4838      	ldr	r0, [pc, #224]	; (80008f8 <main+0x11c>)
 8000816:	f000 fba1 	bl	8000f5c <I2C_ScanBus>
  	EEPROM_Write(0x0000, writeData, EEPROM_PAGE_SIZE);
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2208      	movs	r2, #8
 8000820:	4619      	mov	r1, r3
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fb2c 	bl	8000e80 <EEPROM_Write>
  	HAL_Delay(50);
 8000828:	2032      	movs	r0, #50	; 0x32
 800082a:	f001 f853 	bl	80018d4 <HAL_Delay>
  	EEPROM_Read(0x0000, readData, EEPROM_PAGE_SIZE);
 800082e:	463b      	mov	r3, r7
 8000830:	2208      	movs	r2, #8
 8000832:	4619      	mov	r1, r3
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fb4f 	bl	8000ed8 <EEPROM_Read>
  	sprintf(str, "%0.2x, %0.2x, %0.2x, %0.2x", readData[0], readData[1], readData[2], readData[3]);
 800083a:	783b      	ldrb	r3, [r7, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	787b      	ldrb	r3, [r7, #1]
 8000840:	461c      	mov	r4, r3
 8000842:	78bb      	ldrb	r3, [r7, #2]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	f107 0010 	add.w	r0, r7, #16
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4623      	mov	r3, r4
 8000850:	460a      	mov	r2, r1
 8000852:	492a      	ldr	r1, [pc, #168]	; (80008fc <main+0x120>)
 8000854:	f004 fc12 	bl	800507c <siprintf>
  	//set_cursor(0, 0);
  	//lcd_str("Time:");
  	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  	display_time();
 8000858:	f000 f8a6 	bl	80009a8 <display_time>
  	uint8_t after_exti = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	77fb      	strb	r3, [r7, #31]

	while (1) {
  		if (HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) == 0) {
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	4826      	ldr	r0, [pc, #152]	; (8000900 <main+0x124>)
 8000866:	f001 faef 	bl	8001e48 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d13a      	bne.n	80008e6 <main+0x10a>
  		            HAL_Delay(50);
 8000870:	2032      	movs	r0, #50	; 0x32
 8000872:	f001 f82f 	bl	80018d4 <HAL_Delay>
  		            if (HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) == 0) {
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <main+0x124>)
 800087c:	f001 fae4 	bl	8001e48 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d12f      	bne.n	80008e6 <main+0x10a>

  		                if (currentMode == MODE_NORMAL) {
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <main+0x128>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d105      	bne.n	800089a <main+0xbe>
  		                    currentMode = MODE_SET_TIME;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <main+0x128>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
  		                    enterSetTimeMode();
 8000894:	f000 f83a 	bl	800090c <enterSetTimeMode>
 8000898:	e01d      	b.n	80008d6 <main+0xfa>
  		                } else if (currentMode == MODE_SET_TIME) {
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <main+0x128>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10c      	bne.n	80008bc <main+0xe0>
  		                    currentMode = MODE_SET_ALARM;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <main+0x128>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	701a      	strb	r2, [r3, #0]
  		                    enterSetAlarmMode();
 80008a8:	f000 f86e 	bl	8000988 <enterSetAlarmMode>
  		                    finish_menu++;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <main+0x12c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <main+0x12c>)
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e00c      	b.n	80008d6 <main+0xfa>
  		                } else if (currentMode == MODE_SET_ALARM) {
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <main+0x128>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d108      	bne.n	80008d6 <main+0xfa>
  		                    currentMode = MODE_NORMAL;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <main+0x128>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
  		                    display_time();
 80008ca:	f000 f86d 	bl	80009a8 <display_time>
  		                }


  		                while (HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) == 0) {
 80008ce:	e002      	b.n	80008d6 <main+0xfa>
  		                    HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f000 ffff 	bl	80018d4 <HAL_Delay>
  		                while (HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) == 0) {
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <main+0x124>)
 80008dc:	f001 fab4 	bl	8001e48 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f4      	beq.n	80008d0 <main+0xf4>
  		                }
  		            }
  		        }
  		if (currentMode == MODE_NORMAL) {
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <main+0x128>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1b8      	bne.n	8000860 <main+0x84>
  		        display_time();
 80008ee:	f000 f85b 	bl	80009a8 <display_time>
  		if (HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) == 0) {
 80008f2:	e7b5      	b.n	8000860 <main+0x84>
 80008f4:	080059cc 	.word	0x080059cc
 80008f8:	20000094 	.word	0x20000094
 80008fc:	080059b0 	.word	0x080059b0
 8000900:	40020400 	.word	0x40020400
 8000904:	20000175 	.word	0x20000175
 8000908:	20000174 	.word	0x20000174

0800090c <enterSetTimeMode>:
}




void enterSetTimeMode() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    lcd_clr();
 8000910:	f000 fbcd 	bl	80010ae <lcd_clr>
    set_cursor(0, 0);
 8000914:	2100      	movs	r1, #0
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fb99 	bl	800104e <set_cursor>
    lcd_str("Set Time/Date");
 800091c:	4817      	ldr	r0, [pc, #92]	; (800097c <enterSetTimeMode+0x70>)
 800091e:	f000 fbb1 	bl	8001084 <lcd_str>

    while (1) {
        // Відображення параметра
        displayCurrentSetting();
 8000922:	f7ff fec9 	bl	80006b8 <displayCurrentSetting>


        // Обробка натискання кнопок
        if (HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) == 0) { // Кнопка для зміни значення
 8000926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <enterSetTimeMode+0x74>)
 800092c:	f001 fa8c 	bl	8001e48 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d104      	bne.n	8000940 <enterSetTimeMode+0x34>
            HAL_Delay(200); // Антидребезг
 8000936:	20c8      	movs	r0, #200	; 0xc8
 8000938:	f000 ffcc 	bl	80018d4 <HAL_Delay>
            increaseValue();
 800093c:	f7ff fe60 	bl	8000600 <increaseValue>


        }

        if (HAL_GPIO_ReadPin(GPIOB, Alarm_setting_Pin) == 0) { // Кнопка для переходу до наступного параметра
 8000940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000944:	480e      	ldr	r0, [pc, #56]	; (8000980 <enterSetTimeMode+0x74>)
 8000946:	f001 fa7f 	bl	8001e48 <HAL_GPIO_ReadPin>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1e8      	bne.n	8000922 <enterSetTimeMode+0x16>
            HAL_Delay(200); // Антидребезг
 8000950:	20c8      	movs	r0, #200	; 0xc8
 8000952:	f000 ffbf 	bl	80018d4 <HAL_Delay>
            selectedParameter++;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <enterSetTimeMode+0x78>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <enterSetTimeMode+0x78>)
 8000960:	701a      	strb	r2, [r3, #0]
            if (selectedParameter > 5) {
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <enterSetTimeMode+0x78>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b05      	cmp	r3, #5
 8000968:	d9db      	bls.n	8000922 <enterSetTimeMode+0x16>
                selectedParameter = 0;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <enterSetTimeMode+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
                saveSettings();
 8000970:	f7ff ff12 	bl	8000798 <saveSettings>
                break; // Вихід з режиму налаштування
 8000974:	bf00      	nop
            }
        }
    }
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	080059d4 	.word	0x080059d4
 8000980:	40020400 	.word	0x40020400
 8000984:	20000176 	.word	0x20000176

08000988 <enterSetAlarmMode>:

void enterSetAlarmMode(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	lcd_clr();
 800098c:	f000 fb8f 	bl	80010ae <lcd_clr>
	set_cursor(0, 0);
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fb5b 	bl	800104e <set_cursor>
	lcd_str("Set alarm:");
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <enterSetAlarmMode+0x1c>)
 800099a:	f000 fb73 	bl	8001084 <lcd_str>

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	080059e4 	.word	0x080059e4

080009a8 <display_time>:


void display_time() {
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b08e      	sub	sp, #56	; 0x38
 80009ac:	af04      	add	r7, sp, #16
    uint8_t timeData[7] = {0}; // Містить дані часу і дати: секунди, хвилини, години, день, місяць, рік
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2100      	movs	r1, #0
 80009b8:	460a      	mov	r2, r1
 80009ba:	801a      	strh	r2, [r3, #0]
 80009bc:	460a      	mov	r2, r1
 80009be:	709a      	strb	r2, [r3, #2]
    uint8_t seconds = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t minutes = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t hours = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t day = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t month = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t year = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    if (DS1307_Read_Time(timeData) == HAL_OK) {
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f9f4 	bl	8000dd6 <DS1307_Read_Time>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d179      	bne.n	8000ae8 <display_time+0x140>

        // Розпаковка даних
        seconds = BCD_to_Decimal(timeData[0] & 0x7F); // Очистка CH біт
 80009f4:	7e3b      	ldrb	r3, [r7, #24]
 80009f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f917 	bl	8000c30 <BCD_to_Decimal>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        minutes = BCD_to_Decimal(timeData[1]);
 8000a08:	7e7b      	ldrb	r3, [r7, #25]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f910 	bl	8000c30 <BCD_to_Decimal>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        hours = BCD_to_Decimal(timeData[2]);
 8000a16:	7ebb      	ldrb	r3, [r7, #26]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f909 	bl	8000c30 <BCD_to_Decimal>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        day = BCD_to_Decimal(timeData[3]);
 8000a24:	7efb      	ldrb	r3, [r7, #27]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f902 	bl	8000c30 <BCD_to_Decimal>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        month = BCD_to_Decimal(timeData[4]);
 8000a32:	7f3b      	ldrb	r3, [r7, #28]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f8fb 	bl	8000c30 <BCD_to_Decimal>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        year = BCD_to_Decimal(timeData[5]);
 8000a40:	7f7b      	ldrb	r3, [r7, #29]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f8f4 	bl	8000c30 <BCD_to_Decimal>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        // Формування рядка часу і дати
        char timeStr[20];
        sprintf(timeStr, "%02d/%02d/%02d %02d:%02d", day, month, year, hours, minutes);
 8000a4e:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8000a52:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 8000a56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a5a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000a5e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000a62:	1d38      	adds	r0, r7, #4
 8000a64:	9102      	str	r1, [sp, #8]
 8000a66:	9201      	str	r2, [sp, #4]
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	462b      	mov	r3, r5
 8000a6c:	4622      	mov	r2, r4
 8000a6e:	4920      	ldr	r1, [pc, #128]	; (8000af0 <display_time+0x148>)
 8000a70:	f004 fb04 	bl	800507c <siprintf>

        // Оновлення екрану, якщо потрібно
        if (minutes != last_minutes || finish_menu == 1) {
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <display_time+0x14c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d104      	bne.n	8000a8c <display_time+0xe4>
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <display_time+0x150>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d11a      	bne.n	8000ac2 <display_time+0x11a>
            finish_menu = 0;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <display_time+0x150>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
            last_minutes = minutes;
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <display_time+0x14c>)
 8000a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a98:	7013      	strb	r3, [r2, #0]
            lcd_clr();
 8000a9a:	f000 fb08 	bl	80010ae <lcd_clr>
            HAL_Delay(10); // Затримка після очищення дисплея
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f000 ff18 	bl	80018d4 <HAL_Delay>
            set_cursor(0, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 fad1 	bl	800104e <set_cursor>
            lcd_str("Date & Time:");
 8000aac:	4813      	ldr	r0, [pc, #76]	; (8000afc <display_time+0x154>)
 8000aae:	f000 fae9 	bl	8001084 <lcd_str>
            set_cursor(0, 1);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 faca 	bl	800104e <set_cursor>
            lcd_str(timeStr);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fae1 	bl	8001084 <lcd_str>
        }

        // Перевірка для спрацювання будильника
        if (hours == 9 && minutes == 30) {
 8000ac2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	d10e      	bne.n	8000ae8 <display_time+0x140>
 8000aca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ace:	2b1e      	cmp	r3, #30
 8000ad0:	d10a      	bne.n	8000ae8 <display_time+0x140>
        	while(HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) != 0){
 8000ad2:	e001      	b.n	8000ad8 <display_time+0x130>
        		PlayMelody();
 8000ad4:	f000 f83c 	bl	8000b50 <PlayMelody>
        	while(HAL_GPIO_ReadPin(GPIOB, Alarm_button_Pin) != 0){
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <display_time+0x158>)
 8000ade:	f001 f9b3 	bl	8001e48 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f5      	bne.n	8000ad4 <display_time+0x12c>
        	}
        }
    }
}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bdb0      	pop	{r4, r5, r7, pc}
 8000af0:	080059f0 	.word	0x080059f0
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000174 	.word	0x20000174
 8000afc:	08005a0c 	.word	0x08005a0c
 8000b00:	40020400 	.word	0x40020400

08000b04 <SetBuzzerFrequency>:


void SetBuzzerFrequency(uint32_t frequency) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d104      	bne.n	8000b1c <SetBuzzerFrequency+0x18>
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000b12:	2100      	movs	r1, #0
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <SetBuzzerFrequency+0x44>)
 8000b16:	f003 f975 	bl	8003e04 <HAL_TIM_PWM_Stop>
        // Обчислення значення ARR для заданої частоти
        uint32_t arrValue = (SystemCoreClock / frequency) - 1;
        __HAL_TIM_SET_AUTORELOAD(&htim2, arrValue);
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
    }
}
 8000b1a:	e011      	b.n	8000b40 <SetBuzzerFrequency+0x3c>
        uint32_t arrValue = (SystemCoreClock / frequency) - 1;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <SetBuzzerFrequency+0x48>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	3b01      	subs	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_AUTORELOAD(&htim2, arrValue);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <SetBuzzerFrequency+0x44>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SetBuzzerFrequency+0x44>)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	60d3      	str	r3, [r2, #12]
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <SetBuzzerFrequency+0x44>)
 8000b3c:	f003 f8b2 	bl	8003ca4 <HAL_TIM_PWM_Start>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000e8 	.word	0x200000e8
 8000b4c:	20000008 	.word	0x20000008

08000b50 <PlayMelody>:

void PlayMelody(void) {
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b0a2      	sub	sp, #136	; 0x88
 8000b54:	af00      	add	r7, sp, #0
	int melody[] = {261, 293, 329, 349, 392, 440, 493, 523, 523, 493, 440, 392, 349, 329, 293, 261};
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <PlayMelody+0x94>)
 8000b58:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int durations[] = {8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8};
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <PlayMelody+0x98>)
 8000b74:	1d3c      	adds	r4, r7, #4
 8000b76:	461d      	mov	r5, r3
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


    for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b92:	e01e      	b.n	8000bd2 <PlayMelody+0x82>
        SetBuzzerFrequency(melody[i]);
 8000b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	3388      	adds	r3, #136	; 0x88
 8000b9c:	443b      	add	r3, r7
 8000b9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ffae 	bl	8000b04 <SetBuzzerFrequency>
        HAL_Delay(durations[i]);  // Затримка для відтворення ноти
 8000ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	3388      	adds	r3, #136	; 0x88
 8000bb0:	443b      	add	r3, r7
 8000bb2:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fe8c 	bl	80018d4 <HAL_Delay>
        SetBuzzerFrequency(0);  // Зупинка зумера
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff ffa1 	bl	8000b04 <SetBuzzerFrequency>
        HAL_Delay(100);  // Затримка між нотами
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f000 fe86 	bl	80018d4 <HAL_Delay>
    for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
 8000bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d9dc      	bls.n	8000b94 <PlayMelody+0x44>
    }
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3788      	adds	r7, #136	; 0x88
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}
 8000be4:	08005a1c 	.word	0x08005a1c
 8000be8:	08005a5c 	.word	0x08005a5c

08000bec <Decimal_to_BCD>:

uint8_t Decimal_to_BCD(uint8_t val) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <Decimal_to_BCD+0x40>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	b2d8      	uxtb	r0, r3
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <Decimal_to_BCD+0x40>)
 8000c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c0e:	08d9      	lsrs	r1, r3, #3
 8000c10:	460b      	mov	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4403      	add	r3, r0
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	cccccccd 	.word	0xcccccccd

08000c30 <BCD_to_Decimal>:

// Функція для перетворення BCD у десяткове число
uint8_t BCD_to_Decimal(uint8_t val) {
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4413      	add	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <DS1307_Write_Register>:

// Функція запису одного байту до DS1307
HAL_StatusTypeDef DS1307_Write_Register(uint8_t reg, uint8_t data) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af04      	add	r7, sp, #16
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, DS1307_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	1dbb      	adds	r3, r7, #6
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2301      	movs	r3, #1
 8000c88:	21d0      	movs	r1, #208	; 0xd0
 8000c8a:	4804      	ldr	r0, [pc, #16]	; (8000c9c <DS1307_Write_Register+0x38>)
 8000c8c:	f001 fb36 	bl	80022fc <HAL_I2C_Mem_Write>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000094 	.word	0x20000094

08000ca0 <DS1307_Read_Register>:

// Функція зчитування одного байту з DS1307
HAL_StatusTypeDef DS1307_Read_Register(uint8_t reg, uint8_t *data) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af04      	add	r7, sp, #16
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, DS1307_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	21d0      	movs	r1, #208	; 0xd0
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <DS1307_Read_Register+0x34>)
 8000cc4:	f001 fc14 	bl	80024f0 <HAL_I2C_Mem_Read>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000094 	.word	0x20000094

08000cd8 <DS1307_Set_Time>:

// Функція для встановлення часу
HAL_StatusTypeDef DS1307_Set_Time(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	71bb      	strb	r3, [r7, #6]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;

    // Записуємо секунди
    status = DS1307_Write_Register(DS1307_SECONDS_REG, Decimal_to_BCD(seconds) & 0x7F); // Clear CH bit
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff7d 	bl	8000bec <Decimal_to_BCD>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff ffb1 	bl	8000c64 <DS1307_Write_Register>
 8000d02:	4603      	mov	r3, r0
 8000d04:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <DS1307_Set_Time+0x38>
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	e020      	b.n	8000d52 <DS1307_Set_Time+0x7a>

    // Записуємо хвилини
    status = DS1307_Write_Register(DS1307_MINUTES_REG, Decimal_to_BCD(minutes));
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff6a 	bl	8000bec <Decimal_to_BCD>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff ffa1 	bl	8000c64 <DS1307_Write_Register>
 8000d22:	4603      	mov	r3, r0
 8000d24:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <DS1307_Set_Time+0x58>
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	e010      	b.n	8000d52 <DS1307_Set_Time+0x7a>

    // Записуємо години
    status = DS1307_Write_Register(DS1307_HOURS_REG, Decimal_to_BCD(hours));
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff5a 	bl	8000bec <Decimal_to_BCD>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff ff91 	bl	8000c64 <DS1307_Write_Register>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <DS1307_Set_Time+0x78>
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	e000      	b.n	8000d52 <DS1307_Set_Time+0x7a>

    return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <DS1307_Set_Date>:

HAL_StatusTypeDef DS1307_Set_Date(uint8_t day, uint8_t month, uint8_t year) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	460b      	mov	r3, r1
 8000d66:	71bb      	strb	r3, [r7, #6]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;

    // Записуємо день
    status = DS1307_Write_Register(DS1307_DAY_REG, Decimal_to_BCD(day));
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff3c 	bl	8000bec <Decimal_to_BCD>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4619      	mov	r1, r3
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f7ff ff73 	bl	8000c64 <DS1307_Write_Register>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <DS1307_Set_Date+0x32>
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	e020      	b.n	8000dce <DS1307_Set_Date+0x74>

    // Записуємо місяць
    status = DS1307_Write_Register(DS1307_MONTH_REG, Decimal_to_BCD(month));
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff2c 	bl	8000bec <Decimal_to_BCD>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4619      	mov	r1, r3
 8000d98:	2005      	movs	r0, #5
 8000d9a:	f7ff ff63 	bl	8000c64 <DS1307_Write_Register>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <DS1307_Set_Date+0x52>
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	e010      	b.n	8000dce <DS1307_Set_Date+0x74>

    // Записуємо рік
    status = DS1307_Write_Register(DS1307_YEAR_REG, Decimal_to_BCD(year));
 8000dac:	797b      	ldrb	r3, [r7, #5]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff1c 	bl	8000bec <Decimal_to_BCD>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4619      	mov	r1, r3
 8000db8:	2006      	movs	r0, #6
 8000dba:	f7ff ff53 	bl	8000c64 <DS1307_Write_Register>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <DS1307_Set_Date+0x72>
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	e000      	b.n	8000dce <DS1307_Set_Date+0x74>

    return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <DS1307_Read_Time>:


// Функція для зчитування часу
HAL_StatusTypeDef DS1307_Read_Time(uint8_t *timeData) {
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Зчитуємо секунди
    status = DS1307_Read_Register(DS1307_SECONDS_REG, &timeData[0]);
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ff5d 	bl	8000ca0 <DS1307_Read_Register>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <DS1307_Read_Time+0x1e>
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	e041      	b.n	8000e78 <DS1307_Read_Time+0xa2>

    // Зчитуємо хвилини
    status = DS1307_Read_Register(DS1307_MINUTES_REG, &timeData[1]);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3301      	adds	r3, #1
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff ff50 	bl	8000ca0 <DS1307_Read_Register>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <DS1307_Read_Time+0x38>
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	e034      	b.n	8000e78 <DS1307_Read_Time+0xa2>

    // Зчитуємо години
    status = DS1307_Read_Register(DS1307_HOURS_REG, &timeData[2]);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3302      	adds	r3, #2
 8000e12:	4619      	mov	r1, r3
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff ff43 	bl	8000ca0 <DS1307_Read_Register>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <DS1307_Read_Time+0x52>
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	e027      	b.n	8000e78 <DS1307_Read_Time+0xa2>

    status = DS1307_Read_Register(DS1307_DAY_REG, &timeData[3]);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3303      	adds	r3, #3
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f7ff ff36 	bl	8000ca0 <DS1307_Read_Register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <DS1307_Read_Time+0x6c>
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	e01a      	b.n	8000e78 <DS1307_Read_Time+0xa2>
    status = DS1307_Read_Register(DS1307_MONTH_REG, &timeData[4]);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3304      	adds	r3, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	2005      	movs	r0, #5
 8000e4a:	f7ff ff29 	bl	8000ca0 <DS1307_Read_Register>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <DS1307_Read_Time+0x86>
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	e00d      	b.n	8000e78 <DS1307_Read_Time+0xa2>
    status = DS1307_Read_Register(DS1307_YEAR_REG, &timeData[5]);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	4619      	mov	r1, r3
 8000e62:	2006      	movs	r0, #6
 8000e64:	f7ff ff1c 	bl	8000ca0 <DS1307_Read_Register>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <DS1307_Read_Time+0xa0>
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	e000      	b.n	8000e78 <DS1307_Read_Time+0xa2>

    return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <EEPROM_Write>:

HAL_StatusTypeDef EEPROM_Write(uint16_t memAddress, uint8_t* data, uint16_t size) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	80fb      	strh	r3, [r7, #6]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	21a0      	movs	r1, #160	; 0xa0
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <EEPROM_Write+0x4c>)
 8000ea6:	f001 fa29 	bl	80022fc <HAL_I2C_Mem_Write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <EEPROM_Write+0x3c>
        UART_Send_Status("Data written successfully.\r\n");
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <EEPROM_Write+0x50>)
 8000eb6:	f000 f83b 	bl	8000f30 <UART_Send_Status>
 8000eba:	e002      	b.n	8000ec2 <EEPROM_Write+0x42>
    } else {
        UART_Send_Status("Failed to write data.\r\n");
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <EEPROM_Write+0x54>)
 8000ebe:	f000 f837 	bl	8000f30 <UART_Send_Status>
    }
    return status;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000094 	.word	0x20000094
 8000ed0:	08005a9c 	.word	0x08005a9c
 8000ed4:	08005abc 	.word	0x08005abc

08000ed8 <EEPROM_Read>:

HAL_StatusTypeDef EEPROM_Read(uint16_t memAddress, uint8_t* buffer, uint16_t size) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, buffer, size, HAL_MAX_DELAY);
 8000ee8:	88fa      	ldrh	r2, [r7, #6]
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2310      	movs	r3, #16
 8000efa:	21a0      	movs	r1, #160	; 0xa0
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <EEPROM_Read+0x4c>)
 8000efe:	f001 faf7 	bl	80024f0 <HAL_I2C_Mem_Read>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d103      	bne.n	8000f14 <EEPROM_Read+0x3c>
        UART_Send_Status("Data read successfully.\r\n");
 8000f0c:	4806      	ldr	r0, [pc, #24]	; (8000f28 <EEPROM_Read+0x50>)
 8000f0e:	f000 f80f 	bl	8000f30 <UART_Send_Status>
 8000f12:	e002      	b.n	8000f1a <EEPROM_Read+0x42>
    } else {
        UART_Send_Status("Failed to read data.\r\n");
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <EEPROM_Read+0x54>)
 8000f16:	f000 f80b 	bl	8000f30 <UART_Send_Status>
    }
    return status;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000094 	.word	0x20000094
 8000f28:	08005ad4 	.word	0x08005ad4
 8000f2c:	08005af0 	.word	0x08005af0

08000f30 <UART_Send_Status>:

void UART_Send_Status(const char* message) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f951 	bl	80001e0 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <UART_Send_Status+0x28>)
 8000f4a:	f003 fcbc 	bl	80048c6 <HAL_UART_Transmit>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000130 	.word	0x20000130

08000f5c <I2C_ScanBus>:

void I2C_ScanBus(I2C_HandleTypeDef *hi2c) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    UART_Send_Status("Scanning I2C bus...\r\n");
 8000f64:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <I2C_ScanBus+0x78>)
 8000f66:	f7ff ffe3 	bl	8000f30 <UART_Send_Status>

    for (uint8_t address = 1; address < 128; address++) {
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000f70:	e025      	b.n	8000fbe <I2C_ScanBus+0x62>
        // Зсув адреси на один біт вліво для створення 8-бітної адреси
        uint8_t i2cAddress = address << 1;
 8000f72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        // Перевіряємо, чи пристрій відповідає на цю адресу
        HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(hi2c, i2cAddress, 1, 10);
 8000f7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f80:	b299      	uxth	r1, r3
 8000f82:	230a      	movs	r3, #10
 8000f84:	2201      	movs	r2, #1
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f001 fcd8 	bl	800293c <HAL_I2C_IsDeviceReady>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

        if (result == HAL_OK) {
 8000f92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <I2C_ScanBus+0x58>
            // Пристрій знайдено
            char msg[64];
            snprintf(msg, sizeof(msg), "Device found at address 0x%02X\r\n", address);
 8000f9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f9e:	f107 000c 	add.w	r0, r7, #12
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <I2C_ScanBus+0x7c>)
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	f004 f835 	bl	8005014 <sniprintf>
            UART_Send_Status(msg);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffbe 	bl	8000f30 <UART_Send_Status>
    for (uint8_t address = 1; address < 128; address++) {
 8000fb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000fbe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dad5      	bge.n	8000f72 <I2C_ScanBus+0x16>
        }
    }

    UART_Send_Status("I2C scan completed.\r\n");
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <I2C_ScanBus+0x80>)
 8000fc8:	f7ff ffb2 	bl	8000f30 <UART_Send_Status>
}
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	; 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08005b08 	.word	0x08005b08
 8000fd8:	08005b20 	.word	0x08005b20
 8000fdc:	08005b44 	.word	0x08005b44

08000fe0 <lcd_init>:

void lcd_init()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    HAL_Delay(15);
 8000fe4:	200f      	movs	r0, #15
 8000fe6:	f000 fc75 	bl	80018d4 <HAL_Delay>
    send_comand(0b11);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 f86a 	bl	80010c4 <send_comand>
    HAL_Delay(5);
 8000ff0:	2005      	movs	r0, #5
 8000ff2:	f000 fc6f 	bl	80018d4 <HAL_Delay>
    send_comand(0b11);
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f000 f864 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fc69 	bl	80018d4 <HAL_Delay>
    send_comand(0b11);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 f85e 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f000 fc63 	bl	80018d4 <HAL_Delay>
    send_comand(0b10);
 800100e:	2002      	movs	r0, #2
 8001010:	f000 f858 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 fc5d 	bl	80018d4 <HAL_Delay>
    send_comand(0b101000);
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f000 f852 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fc57 	bl	80018d4 <HAL_Delay>
    send_comand(0b1100);
 8001026:	200c      	movs	r0, #12
 8001028:	f000 f84c 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f000 fc51 	bl	80018d4 <HAL_Delay>
    send_comand(0b110);
 8001032:	2006      	movs	r0, #6
 8001034:	f000 f846 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f000 fc4b 	bl	80018d4 <HAL_Delay>
    send_comand(0b1);
 800103e:	2001      	movs	r0, #1
 8001040:	f000 f840 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fc45 	bl	80018d4 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}

0800104e <set_cursor>:

void set_cursor(uint8_t  x, uint8_t  y)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	460a      	mov	r2, r1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4613      	mov	r3, r2
 800105c:	71bb      	strb	r3, [r7, #6]
	uint8_t  addr = (0x40 * y + x) | (1 << 7);
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	b2da      	uxtb	r2, r3
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4413      	add	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001070:	b25b      	sxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]
	send_comand(addr);
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f824 	bl	80010c4 <send_comand>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <lcd_str>:
{
    send_data(c);
}

void lcd_str(uint8_t  str[])
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	  while (*str) send_data(*str++);
 800108c:	e006      	b.n	800109c <lcd_str+0x18>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f844 	bl	8001124 <send_data>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f4      	bne.n	800108e <lcd_str+0xa>
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <lcd_clr>:

void lcd_clr()
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
	send_comand(0b1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 f806 	bl	80010c4 <send_comand>
    HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fc0b 	bl	80018d4 <HAL_Delay>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <send_comand>:

void send_comand(uint8_t  cmd){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t  data[4];
	data[0] = (cmd & 0b11110000) | 0b1100;
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	f043 030c 	orr.w	r3, r3, #12
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	733b      	strb	r3, [r7, #12]
	data[1] =(cmd &  0b11110000);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f023 030f 	bic.w	r3, r3, #15
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	737b      	strb	r3, [r7, #13]
	data[2] =(cmd << 4) | 0b1100;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f043 030c 	orr.w	r3, r3, #12
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	73bb      	strb	r3, [r7, #14]
	data[3] =(cmd << 4) ;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	b2db      	uxtb	r3, r3
 8001102:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 4, 100);
 8001104:	f107 020c 	add.w	r2, r7, #12
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2304      	movs	r3, #4
 800110e:	217e      	movs	r1, #126	; 0x7e
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <send_comand+0x5c>)
 8001112:	f000 fff5 	bl	8002100 <HAL_I2C_Master_Transmit>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000094 	.word	0x20000094

08001124 <send_data>:

void send_data(uint8_t  cmd){
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	uint8_t  data[4];
	data[0] = (cmd & 0b11110000)|0b1101;
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	f023 030f 	bic.w	r3, r3, #15
 8001136:	b25b      	sxtb	r3, r3
 8001138:	f043 030d 	orr.w	r3, r3, #13
 800113c:	b25b      	sxtb	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	733b      	strb	r3, [r7, #12]
	data[1] =(cmd &  0b11110000)|0b1001;
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	b25b      	sxtb	r3, r3
 800114c:	f043 0309 	orr.w	r3, r3, #9
 8001150:	b25b      	sxtb	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	737b      	strb	r3, [r7, #13]
	data[2] =((cmd << 4))| 0b1101;
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	b25b      	sxtb	r3, r3
 800115c:	f043 030d 	orr.w	r3, r3, #13
 8001160:	b25b      	sxtb	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73bb      	strb	r3, [r7, #14]
	data[3] =((cmd << 4))| 0b1001;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	b25b      	sxtb	r3, r3
 800116c:	f043 0309 	orr.w	r3, r3, #9
 8001170:	b25b      	sxtb	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 4, 100);
 8001176:	f107 020c 	add.w	r2, r7, #12
 800117a:	2364      	movs	r3, #100	; 0x64
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2304      	movs	r3, #4
 8001180:	217e      	movs	r1, #126	; 0x7e
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <send_data+0x6c>)
 8001184:	f000 ffbc 	bl	8002100 <HAL_I2C_Master_Transmit>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000094 	.word	0x20000094

08001194 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	; 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 ff2e 	bl	8005004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <SystemClock_Config+0xb8>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <SystemClock_Config+0xb8>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <SystemClock_Config+0xb8>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <SystemClock_Config+0xbc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <SystemClock_Config+0xbc>)
 80011e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <SystemClock_Config+0xbc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2310      	movs	r3, #16
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4618      	mov	r0, r3
 800120a:	f002 f8a3 	bl	8003354 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001214:	f000 f928 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f002 fb05 	bl	8003844 <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001240:	f000 f912 	bl	8001468 <Error_Handler>
  }
}
 8001244:	bf00      	nop
 8001246:	3750      	adds	r7, #80	; 0x50
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x50>)
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_I2C1_Init+0x54>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_I2C1_Init+0x58>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001292:	f000 fdf1 	bl	8001e78 <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 f8e4 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000094 	.word	0x20000094
 80012a8:	40005400 	.word	0x40005400
 80012ac:	000186a0 	.word	0x000186a0

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_TIM2_Init+0xac>)
 80012d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_TIM2_Init+0xac>)
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_TIM2_Init+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM2_Init+0xac>)
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM2_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM2_Init+0xac>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <MX_TIM2_Init+0xac>)
 80012fa:	f002 fc83 	bl	8003c04 <HAL_TIM_PWM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001304:	f000 f8b0 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_TIM2_Init+0xac>)
 8001318:	f003 fa06 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001322:	f000 f8a1 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	; 0x60
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800132a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800132e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM2_Init+0xac>)
 8001340:	f002 fecc 	bl	80040dc <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800134a:	f000 f88d 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM2_Init+0xac>)
 8001350:	f000 f928 	bl	80015a4 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000e8 	.word	0x200000e8
 8001360:	000f423f 	.word	0x000f423f

08001364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART1_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800139c:	f003 fa46 	bl	800482c <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f85f 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000130 	.word	0x20000130
 80013b4:	40011000 	.word	0x40011000

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <MX_GPIO_Init+0xa8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a22      	ldr	r2, [pc, #136]	; (8001460 <MX_GPIO_Init+0xa8>)
 80013d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_GPIO_Init+0xa8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_GPIO_Init+0xa8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <MX_GPIO_Init+0xa8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_GPIO_Init+0xa8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_GPIO_Init+0xa8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <MX_GPIO_Init+0xa8>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_GPIO_Init+0xa8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Alarm_button_Pin */
  GPIO_InitStruct.Pin = Alarm_button_Pin;
 8001422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alarm_button_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	480b      	ldr	r0, [pc, #44]	; (8001464 <MX_GPIO_Init+0xac>)
 8001438:	f000 fb82 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Alarm_setting_Pin */
  GPIO_InitStruct.Pin = Alarm_setting_Pin;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alarm_setting_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_GPIO_Init+0xac>)
 8001452:	f000 fb75 	bl	8001b40 <HAL_GPIO_Init>


}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_I2C_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001516:	2304      	movs	r3, #4
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 8001522:	f000 fb0d 	bl	8001b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_I2C_MspInit+0x88>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_I2C_MspInit+0x88>)
 8001530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_I2C_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40005400 	.word	0x40005400
 8001550:	40023800 	.word	0x40023800
 8001554:	40020400 	.word	0x40020400

08001558 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001568:	d115      	bne.n	8001596 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_TIM_PWM_MspInit+0x48>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_TIM_PWM_MspInit+0x48>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_TIM_PWM_MspInit+0x48>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	201c      	movs	r0, #28
 800158c:	f000 faa1 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001590:	201c      	movs	r0, #28
 8001592:	f000 faba 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c4:	d11d      	bne.n	8001602 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_TIM_MspPostInit+0x68>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_TIM_MspPostInit+0x68>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_TIM_MspPostInit+0x68>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e2:	2301      	movs	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <HAL_TIM_MspPostInit+0x6c>)
 80015fe:	f000 fa9f 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_UART_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12c      	bne.n	8001690 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_UART_MspInit+0x88>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_UART_MspInit+0x88>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_UART_MspInit+0x88>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_UART_MspInit+0x88>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_UART_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800166e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001680:	2307      	movs	r3, #7
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0x8c>)
 800168c:	f000 fa58 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40011000 	.word	0x40011000
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020000 	.word	0x40020000

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 f8d0 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM2_IRQHandler+0x10>)
 80016fe:	f002 fbe5 	bl	8003ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000e8 	.word	0x200000e8

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f003 fc38 	bl	8004fb0 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20010000 	.word	0x20010000
 800176c:	00000400 	.word	0x00000400
 8001770:	20000178 	.word	0x20000178
 8001774:	20000190 	.word	0x20000190

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c6:	f7ff ffd7 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f003 fbf7 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff f805 	bl	80007dc <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017e0:	08005bc0 	.word	0x08005bc0
  ldr r2, =_sbss
 80017e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017e8:	20000190 	.word	0x20000190

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f94f 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fe28 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f967 	bl	8001b26 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f92f 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000008 	.word	0x20000008
 800188c:	20000010 	.word	0x20000010
 8001890:	2000000c 	.word	0x2000000c

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000010 	.word	0x20000010
 80018b8:	2000017c 	.word	0x2000017c

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000017c 	.word	0x2000017c

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffde 	bl	80018bc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000010 	.word	0x20000010

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff29 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff3e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff31 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e159      	b.n	8001e10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8148 	bne.w	8001e0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d005      	beq.n	8001b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d130      	bne.n	8001bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d017      	beq.n	8001c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80a2 	beq.w	8001e0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_GPIO_Init+0x2ec>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a49      	ldr	r2, [pc, #292]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d019      	beq.n	8001d42 <HAL_GPIO_Init+0x202>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_GPIO_Init+0x2f4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x1fe>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_GPIO_Init+0x2f8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a46      	ldr	r2, [pc, #280]	; (8001e3c <HAL_GPIO_Init+0x2fc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x1f6>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a45      	ldr	r2, [pc, #276]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x1f2>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e008      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d32:	2307      	movs	r3, #7
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d36:	2303      	movs	r3, #3
 8001d38:	e004      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d42:	2300      	movs	r3, #0
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	f002 0203 	and.w	r2, r2, #3
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d54:	4935      	ldr	r1, [pc, #212]	; (8001e2c <HAL_GPIO_Init+0x2ec>)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d86:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db0:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dda:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e04:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_GPIO_Init+0x304>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	f67f aea2 	bls.w	8001b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40013c00 	.word	0x40013c00

08001e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e001      	b.n	8001e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e12b      	b.n	80020e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fb12 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001edc:	f001 fe6a 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8001ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a81      	ldr	r2, [pc, #516]	; (80020ec <HAL_I2C_Init+0x274>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d807      	bhi.n	8001efc <HAL_I2C_Init+0x84>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a80      	ldr	r2, [pc, #512]	; (80020f0 <HAL_I2C_Init+0x278>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e006      	b.n	8001f0a <HAL_I2C_Init+0x92>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <HAL_I2C_Init+0x27c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	bf94      	ite	ls
 8001f04:	2301      	movls	r3, #1
 8001f06:	2300      	movhi	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0e7      	b.n	80020e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a78      	ldr	r2, [pc, #480]	; (80020f8 <HAL_I2C_Init+0x280>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0c9b      	lsrs	r3, r3, #18
 8001f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_I2C_Init+0x274>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d802      	bhi.n	8001f4c <HAL_I2C_Init+0xd4>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	e009      	b.n	8001f60 <HAL_I2C_Init+0xe8>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_I2C_Init+0x284>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	3301      	adds	r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	495c      	ldr	r1, [pc, #368]	; (80020ec <HAL_I2C_Init+0x274>)
 8001f7c:	428b      	cmp	r3, r1
 8001f7e:	d819      	bhi.n	8001fb4 <HAL_I2C_Init+0x13c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e59      	subs	r1, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f94:	400b      	ands	r3, r1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_I2C_Init+0x138>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e59      	subs	r1, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fae:	e051      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e04f      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <HAL_I2C_Init+0x168>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e58      	subs	r0, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf0c      	ite	eq
 8001fd8:	2301      	moveq	r3, #1
 8001fda:	2300      	movne	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e012      	b.n	8002006 <HAL_I2C_Init+0x18e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	0099      	lsls	r1, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Init+0x196>
 800200a:	2301      	movs	r3, #1
 800200c:	e022      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10e      	bne.n	8002034 <HAL_I2C_Init+0x1bc>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e58      	subs	r0, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	440b      	add	r3, r1
 8002024:	fbb0 f3f3 	udiv	r3, r0, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Init+0x1dc>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	0099      	lsls	r1, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	6809      	ldr	r1, [r1, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6911      	ldr	r1, [r2, #16]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68d2      	ldr	r2, [r2, #12]
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	430b      	orrs	r3, r1
 8002096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	000186a0 	.word	0x000186a0
 80020f0:	001e847f 	.word	0x001e847f
 80020f4:	003d08ff 	.word	0x003d08ff
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	10624dd3 	.word	0x10624dd3

08002100 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	461a      	mov	r2, r3
 800210c:	460b      	mov	r3, r1
 800210e:	817b      	strh	r3, [r7, #10]
 8002110:	4613      	mov	r3, r2
 8002112:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff fbd2 	bl	80018bc <HAL_GetTick>
 8002118:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	f040 80e0 	bne.w	80022e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2319      	movs	r3, #25
 800212e:	2201      	movs	r2, #1
 8002130:	4970      	ldr	r1, [pc, #448]	; (80022f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 ff30 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	e0d3      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2C_Master_Transmit+0x50>
 800214c:	2302      	movs	r3, #2
 800214e:	e0cc      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002184:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2221      	movs	r2, #33	; 0x21
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2210      	movs	r2, #16
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	893a      	ldrh	r2, [r7, #8]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b8:	8979      	ldrh	r1, [r7, #10]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fcea 	bl	8002b98 <I2C_MasterRequestWrite>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e08d      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021e4:	e066      	b.n	80022b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	6a39      	ldr	r1, [r7, #32]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 ffaa 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00d      	beq.n	8002212 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d107      	bne.n	800220e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06b      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b04      	cmp	r3, #4
 800224e:	d11b      	bne.n	8002288 <HAL_I2C_Master_Transmit+0x188>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 ff9a 	bl	80031c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2b04      	cmp	r3, #4
 800229e:	d107      	bne.n	80022b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d194      	bne.n	80021e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e000      	b.n	80022ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
  }
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	00100002 	.word	0x00100002
 80022f8:	ffff0000 	.word	0xffff0000

080022fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4603      	mov	r3, r0
 800230c:	817b      	strh	r3, [r7, #10]
 800230e:	460b      	mov	r3, r1
 8002310:	813b      	strh	r3, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002316:	f7ff fad1 	bl	80018bc <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	f040 80d9 	bne.w	80024dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2319      	movs	r3, #25
 8002330:	2201      	movs	r2, #1
 8002332:	496d      	ldr	r1, [pc, #436]	; (80024e8 <HAL_I2C_Mem_Write+0x1ec>)
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fe2f 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
 8002342:	e0cc      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_I2C_Mem_Write+0x56>
 800234e:	2302      	movs	r3, #2
 8002350:	e0c5      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d007      	beq.n	8002378 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2221      	movs	r2, #33	; 0x21
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_I2C_Mem_Write+0x1f0>)
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ba:	88f8      	ldrh	r0, [r7, #6]
 80023bc:	893a      	ldrh	r2, [r7, #8]
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4603      	mov	r3, r0
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fc66 	bl	8002c9c <I2C_RequestMemoryWrite>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d052      	beq.n	800247c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e081      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 feb0 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00d      	beq.n	8002406 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06b      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d11b      	bne.n	800247c <HAL_I2C_Mem_Write+0x180>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d017      	beq.n	800247c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1aa      	bne.n	80023da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fe9c 	bl	80031c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b04      	cmp	r3, #4
 800249a:	d107      	bne.n	80024ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e016      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	00100002 	.word	0x00100002
 80024ec:	ffff0000 	.word	0xffff0000

080024f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800250a:	f7ff f9d7 	bl	80018bc <HAL_GetTick>
 800250e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b20      	cmp	r3, #32
 800251a:	f040 8208 	bne.w	800292e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2319      	movs	r3, #25
 8002524:	2201      	movs	r2, #1
 8002526:	497b      	ldr	r1, [pc, #492]	; (8002714 <HAL_I2C_Mem_Read+0x224>)
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fd35 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
 8002536:	e1fb      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_I2C_Mem_Read+0x56>
 8002542:	2302      	movs	r3, #2
 8002544:	e1f4      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d007      	beq.n	800256c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2222      	movs	r2, #34	; 0x22
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a5b      	ldr	r2, [pc, #364]	; (8002718 <HAL_I2C_Mem_Read+0x228>)
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ae:	88f8      	ldrh	r0, [r7, #6]
 80025b0:	893a      	ldrh	r2, [r7, #8]
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4603      	mov	r3, r0
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fc02 	bl	8002dc8 <I2C_RequestMemoryRead>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e1b0      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d113      	bne.n	80025fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e184      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	2b01      	cmp	r3, #1
 8002604:	d11b      	bne.n	800263e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e164      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	2b02      	cmp	r3, #2
 8002644:	d11b      	bne.n	800267e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002654:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	e144      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002694:	e138      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	2b03      	cmp	r3, #3
 800269c:	f200 80f1 	bhi.w	8002882 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d123      	bne.n	80026f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fdcb 	bl	8003248 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e139      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ee:	e10b      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d14e      	bne.n	8002796 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	2200      	movs	r2, #0
 8002700:	4906      	ldr	r1, [pc, #24]	; (800271c <HAL_I2C_Mem_Read+0x22c>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fc48 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e10e      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
 8002712:	bf00      	nop
 8002714:	00100002 	.word	0x00100002
 8002718:	ffff0000 	.word	0xffff0000
 800271c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002794:	e0b8      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2200      	movs	r2, #0
 800279e:	4966      	ldr	r1, [pc, #408]	; (8002938 <HAL_I2C_Mem_Read+0x448>)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fbf9 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0bf      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	2200      	movs	r2, #0
 80027fa:	494f      	ldr	r1, [pc, #316]	; (8002938 <HAL_I2C_Mem_Read+0x448>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fbcb 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e091      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002880:	e042      	b.n	8002908 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fcde 	bl	8003248 <I2C_WaitOnRXNEFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e04c      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d118      	bne.n	8002908 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f aec2 	bne.w	8002696 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	00010004 	.word	0x00010004

0800293c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	460b      	mov	r3, r1
 800294a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7fe ffb6 	bl	80018bc <HAL_GetTick>
 8002950:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	f040 8111 	bne.w	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	4988      	ldr	r1, [pc, #544]	; (8002b90 <HAL_I2C_IsDeviceReady+0x254>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fb12 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
 800297c:	e104      	b.n	8002b88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_I2C_IsDeviceReady+0x50>
 8002988:	2302      	movs	r3, #2
 800298a:	e0fd      	b.n	8002b88 <HAL_I2C_IsDeviceReady+0x24c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d007      	beq.n	80029b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2224      	movs	r2, #36	; 0x24
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a70      	ldr	r2, [pc, #448]	; (8002b94 <HAL_I2C_IsDeviceReady+0x258>)
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fad0 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0c:	d103      	bne.n	8002a16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0b6      	b.n	8002b88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe ff47 	bl	80018bc <HAL_GetTick>
 8002a2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a5e:	e025      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a60:	f7fe ff2c 	bl	80018bc <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d302      	bcc.n	8002a76 <HAL_I2C_IsDeviceReady+0x13a>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	22a0      	movs	r2, #160	; 0xa0
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2ba0      	cmp	r3, #160	; 0xa0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_I2C_IsDeviceReady+0x188>
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_I2C_IsDeviceReady+0x188>
 8002abe:	7dbb      	ldrb	r3, [r7, #22]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0cd      	beq.n	8002a60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d129      	bne.n	8002b2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	4921      	ldr	r1, [pc, #132]	; (8002b90 <HAL_I2C_IsDeviceReady+0x254>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fa44 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e036      	b.n	8002b88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e02c      	b.n	8002b88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2319      	movs	r3, #25
 8002b4e:	2201      	movs	r2, #1
 8002b50:	490f      	ldr	r1, [pc, #60]	; (8002b90 <HAL_I2C_IsDeviceReady+0x254>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fa20 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e012      	b.n	8002b88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	f4ff af32 	bcc.w	80029d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	00100002 	.word	0x00100002
 8002b94:	ffff0000 	.word	0xffff0000

08002b98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d006      	beq.n	8002bc2 <I2C_MasterRequestWrite+0x2a>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d003      	beq.n	8002bc2 <I2C_MasterRequestWrite+0x2a>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e00b      	b.n	8002bec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	2b12      	cmp	r3, #18
 8002bda:	d107      	bne.n	8002bec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f9cd 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00d      	beq.n	8002c20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c12:	d103      	bne.n	8002c1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e035      	b.n	8002c8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c28:	d108      	bne.n	8002c3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c38:	611a      	str	r2, [r3, #16]
 8002c3a:	e01b      	b.n	8002c74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	11db      	asrs	r3, r3, #7
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0306 	and.w	r3, r3, #6
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f063 030f 	orn	r3, r3, #15
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	490e      	ldr	r1, [pc, #56]	; (8002c94 <I2C_MasterRequestWrite+0xfc>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f9f3 	bl	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e010      	b.n	8002c8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <I2C_MasterRequestWrite+0x100>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f9e3 	bl	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	00010008 	.word	0x00010008
 8002c98:	00010002 	.word	0x00010002

08002c9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f960 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cec:	d103      	bne.n	8002cf6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e05f      	b.n	8002dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	492d      	ldr	r1, [pc, #180]	; (8002dc4 <I2C_RequestMemoryWrite+0x128>)
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f998 	bl	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e04c      	b.n	8002dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fa02 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d107      	bne.n	8002d5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e02b      	b.n	8002dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d68:	893b      	ldrh	r3, [r7, #8]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	e021      	b.n	8002db8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f9dc 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d107      	bne.n	8002daa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e005      	b.n	8002dba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	00010002 	.word	0x00010002

08002dc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	813b      	strh	r3, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f8c2 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e28:	d103      	bne.n	8002e32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0aa      	b.n	8002f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	6a3a      	ldr	r2, [r7, #32]
 8002e4a:	4952      	ldr	r1, [pc, #328]	; (8002f94 <I2C_RequestMemoryRead+0x1cc>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f8fa 	bl	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e097      	b.n	8002f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6a39      	ldr	r1, [r7, #32]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f964 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d107      	bne.n	8002e9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e076      	b.n	8002f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	e021      	b.n	8002ef4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	6a39      	ldr	r1, [r7, #32]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f93e 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d107      	bne.n	8002ee6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e050      	b.n	8002f8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eea:	893b      	ldrh	r3, [r7, #8]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef6:	6a39      	ldr	r1, [r7, #32]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f923 	bl	8003144 <I2C_WaitOnTXEFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d107      	bne.n	8002f1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e035      	b.n	8002f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f82b 	bl	8002f98 <I2C_WaitOnFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f56:	d103      	bne.n	8002f60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e013      	b.n	8002f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f64:	897b      	ldrh	r3, [r7, #10]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	6a3a      	ldr	r2, [r7, #32]
 8002f78:	4906      	ldr	r1, [pc, #24]	; (8002f94 <I2C_RequestMemoryRead+0x1cc>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f863 	bl	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	00010002 	.word	0x00010002

08002f98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa8:	e025      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d021      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe fc83 	bl	80018bc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d116      	bne.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e023      	b.n	800303e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10d      	bne.n	800301c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	e00c      	b.n	8003036 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d0b6      	beq.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003054:	e051      	b.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d123      	bne.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003074:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800307e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e046      	b.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d021      	beq.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe fc01 	bl	80018bc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e020      	b.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10c      	bne.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e00b      	b.n	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	43da      	mvns	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d18d      	bne.n	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003150:	e02d      	b.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8ce 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e02d      	b.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d021      	beq.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe fba7 	bl	80018bc <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e007      	b.n	80031be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d1ca      	bne.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d2:	e02d      	b.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f88d 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e02d      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d021      	beq.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ec:	f7fe fb66 	bl	80018bc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e007      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d1ca      	bne.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003254:	e042      	b.n	80032dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b10      	cmp	r3, #16
 8003262:	d119      	bne.n	8003298 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0210 	mvn.w	r2, #16
 800326c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e029      	b.n	80032ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7fe fb10 	bl	80018bc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	d1b5      	bne.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d11b      	bne.n	8003344 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003314:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e267      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d075      	beq.n	800345e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d00c      	beq.n	8003398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d112      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003396:	d10b      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	4b7e      	ldr	r3, [pc, #504]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05b      	beq.n	800345c <HAL_RCC_OscConfig+0x108>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d157      	bne.n	800345c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e242      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x74>
 80033ba:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b70      	ldr	r3, [pc, #448]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6f      	ldr	r2, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6c      	ldr	r2, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033ec:	4b69      	ldr	r3, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b66      	ldr	r3, [pc, #408]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fa56 	bl	80018bc <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fa52 	bl	80018bc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e207      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xc0>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fa42 	bl	80018bc <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fa3e 	bl	80018bc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1f3      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0xe8>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346a:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003482:	4b44      	ldr	r3, [pc, #272]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1c7      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4937      	ldr	r1, [pc, #220]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b34      	ldr	r3, [pc, #208]	; (8003598 <HAL_RCC_OscConfig+0x244>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe f9f7 	bl	80018bc <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d2:	f7fe f9f3 	bl	80018bc <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1a8      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4925      	ldr	r1, [pc, #148]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCC_OscConfig+0x244>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe f9d6 	bl	80018bc <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003514:	f7fe f9d2 	bl	80018bc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e187      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d036      	beq.n	80035ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_RCC_OscConfig+0x248>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe f9b6 	bl	80018bc <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe f9b2 	bl	80018bc <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e167      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x200>
 8003572:	e01b      	b.n	80035ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_OscConfig+0x248>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fe f99f 	bl	80018bc <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00e      	b.n	80035a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe f99b 	bl	80018bc <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d907      	bls.n	80035a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e150      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
 8003594:	40023800 	.word	0x40023800
 8003598:	42470000 	.word	0x42470000
 800359c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	4b88      	ldr	r3, [pc, #544]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ea      	bne.n	8003582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8097 	beq.w	80036e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	4b7d      	ldr	r3, [pc, #500]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a7c      	ldr	r2, [pc, #496]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b7a      	ldr	r3, [pc, #488]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b77      	ldr	r3, [pc, #476]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d118      	bne.n	8003628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b74      	ldr	r3, [pc, #464]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a73      	ldr	r2, [pc, #460]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fe f95b 	bl	80018bc <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fe f957 	bl	80018bc <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e10c      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <HAL_RCC_OscConfig+0x474>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x2ea>
 8003630:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a63      	ldr	r2, [pc, #396]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	e01c      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x30c>
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a5e      	ldr	r2, [pc, #376]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	4b5c      	ldr	r3, [pc, #368]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a5b      	ldr	r2, [pc, #364]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 8003660:	4b58      	ldr	r3, [pc, #352]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a57      	ldr	r2, [pc, #348]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
 800366c:	4b55      	ldr	r3, [pc, #340]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a54      	ldr	r2, [pc, #336]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe f91c 	bl	80018bc <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe f918 	bl	80018bc <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0cb      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b49      	ldr	r3, [pc, #292]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RCC_OscConfig+0x334>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ac:	f7fe f906 	bl	80018bc <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe f902 	bl	80018bc <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0b5      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ee      	bne.n	80036b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a38      	ldr	r2, [pc, #224]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a1 	beq.w	8003834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d05c      	beq.n	80037b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d141      	bne.n	800378a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe f8d6 	bl	80018bc <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f8d2 	bl	80018bc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e087      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	491b      	ldr	r1, [pc, #108]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fe f8ab 	bl	80018bc <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7fe f8a7 	bl	80018bc <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e05c      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x416>
 8003788:	e054      	b.n	8003834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe f894 	bl	80018bc <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe f890 	bl	80018bc <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e045      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_OscConfig+0x470>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
 80037b6:	e03d      	b.n	8003834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e038      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000
 80037cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x4ec>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d028      	beq.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d121      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d11a      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	4293      	cmp	r3, r2
 800380a:	d111      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	3b01      	subs	r3, #1
 800381a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0cc      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b68      	ldr	r3, [pc, #416]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d90c      	bls.n	8003880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b65      	ldr	r3, [pc, #404]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0b8      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b0:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038bc:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	494d      	ldr	r1, [pc, #308]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d044      	beq.n	8003964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d119      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e067      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4934      	ldr	r1, [pc, #208]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fd ffc2 	bl	80018bc <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fd ffbe 	bl	80018bc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e04f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d20c      	bcs.n	800398c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e032      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4916      	ldr	r1, [pc, #88]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	490e      	ldr	r1, [pc, #56]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ca:	f000 f821 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd ff22 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023c00 	.word	0x40023c00
 8003a00:	40023800 	.word	0x40023800
 8003a04:	08005b64 	.word	0x08005b64
 8003a08:	20000008 	.word	0x20000008
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a14:	b090      	sub	sp, #64	; 0x40
 8003a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a20:	2300      	movs	r3, #0
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d00d      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x40>
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	f200 80a1 	bhi.w	8003b7c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a42:	e09b      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a48:	e09b      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a4a:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a4e:	e098      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a50:	4b4f      	ldr	r3, [pc, #316]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a5a:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a66:	4b4a      	ldr	r3, [pc, #296]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	627a      	str	r2, [r7, #36]	; 0x24
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a7c:	fb03 f201 	mul.w	r2, r3, r1
 8003a80:	2300      	movs	r3, #0
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	4a43      	ldr	r2, [pc, #268]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a90:	460a      	mov	r2, r1
 8003a92:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a96:	4413      	add	r3, r2
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aaa:	f7fc fbf1 	bl	8000290 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab6:	e053      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab8:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	2200      	movs	r2, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	617a      	str	r2, [r7, #20]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aca:	f04f 0b00 	mov.w	fp, #0
 8003ace:	4652      	mov	r2, sl
 8003ad0:	465b      	mov	r3, fp
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae0:	0150      	lsls	r0, r2, #5
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	ebb2 080a 	subs.w	r8, r2, sl
 8003aea:	eb63 090b 	sbc.w	r9, r3, fp
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003afa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003afe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b02:	ebb2 0408 	subs.w	r4, r2, r8
 8003b06:	eb63 0509 	sbc.w	r5, r3, r9
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	00eb      	lsls	r3, r5, #3
 8003b14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b18:	00e2      	lsls	r2, r4, #3
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	461d      	mov	r5, r3
 8003b1e:	eb14 030a 	adds.w	r3, r4, sl
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	eb45 030b 	adc.w	r3, r5, fp
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	60fa      	str	r2, [r7, #12]
 8003b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b54:	f7fc fb9c 	bl	8000290 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3740      	adds	r7, #64	; 0x40
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	017d7840 	.word	0x017d7840

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a9b      	lsrs	r3, r3, #10
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08005b74 	.word	0x08005b74

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003be0:	f7ff ffdc 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08005b74 	.word	0x08005b74

08003c04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e041      	b.n	8003c9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd fc94 	bl	8001558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f000 fb3e 	bl	80042c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_TIM_PWM_Start+0x24>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e022      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d109      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x3e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e015      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d109      	bne.n	8003cfc <HAL_TIM_PWM_Start+0x58>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e008      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e068      	b.n	8003de8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x82>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	e013      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x92>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d34:	e00b      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d44:	e003      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fcc0 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_TIM_PWM_Start+0x14c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <HAL_TIM_PWM_Start+0x14c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d013      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_TIM_PWM_Start+0x150>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_TIM_PWM_Start+0x154>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_TIM_PWM_Start+0x158>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x10e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <HAL_TIM_PWM_Start+0x15c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d010      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	e007      	b.n	8003de6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40014000 	.word	0x40014000

08003e04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fc60 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <HAL_TIM_PWM_Stop+0xc4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d117      	bne.n	8003e56 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <HAL_TIM_PWM_Stop+0x52>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	f240 4344 	movw	r3, #1092	; 0x444
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_PWM_Stop+0x52>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <HAL_TIM_PWM_Stop+0x82>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	f240 4344 	movw	r3, #1092	; 0x444
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_PWM_Stop+0x82>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Stop+0x92>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e94:	e013      	b.n	8003ebe <HAL_TIM_PWM_Stop+0xba>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Stop+0xa2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea4:	e00b      	b.n	8003ebe <HAL_TIM_PWM_Stop+0xba>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_PWM_Stop+0xb2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	e003      	b.n	8003ebe <HAL_TIM_PWM_Stop+0xba>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40010000 	.word	0x40010000

08003ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d122      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11b      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0202 	mvn.w	r2, #2
 8003ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f9ba 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f9ac 	bl	8004274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f9bd 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d122      	bne.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d11b      	bne.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0204 	mvn.w	r2, #4
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f990 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f982 	bl	8004274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f993 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d122      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0208 	mvn.w	r2, #8
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f966 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f958 	bl	8004274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f969 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0210 	mvn.w	r2, #16
 8003ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f93c 	bl	8004288 <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f92e 	bl	8004274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f93f 	bl	800429c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0201 	mvn.w	r2, #1
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f908 	bl	8004260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fbce 	bl	8004818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f904 	bl	80042b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0220 	mvn.w	r2, #32
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fb98 	bl	8004804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0ae      	b.n	8004258 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	f200 809f 	bhi.w	8004248 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800410a:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004145 	.word	0x08004145
 8004114:	08004249 	.word	0x08004249
 8004118:	08004249 	.word	0x08004249
 800411c:	08004249 	.word	0x08004249
 8004120:	08004185 	.word	0x08004185
 8004124:	08004249 	.word	0x08004249
 8004128:	08004249 	.word	0x08004249
 800412c:	08004249 	.word	0x08004249
 8004130:	080041c7 	.word	0x080041c7
 8004134:	08004249 	.word	0x08004249
 8004138:	08004249 	.word	0x08004249
 800413c:	08004249 	.word	0x08004249
 8004140:	08004207 	.word	0x08004207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f93a 	bl	80043c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0208 	orr.w	r2, r2, #8
 800415e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6999      	ldr	r1, [r3, #24]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	619a      	str	r2, [r3, #24]
      break;
 8004182:	e064      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f980 	bl	8004490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6999      	ldr	r1, [r3, #24]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	619a      	str	r2, [r3, #24]
      break;
 80041c4:	e043      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f9cb 	bl	8004568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0208 	orr.w	r2, r2, #8
 80041e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0204 	bic.w	r2, r2, #4
 80041f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69d9      	ldr	r1, [r3, #28]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	61da      	str	r2, [r3, #28]
      break;
 8004204:	e023      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fa15 	bl	800463c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69d9      	ldr	r1, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	61da      	str	r2, [r3, #28]
      break;
 8004246:	e002      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
      break;
 800424c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a34      	ldr	r2, [pc, #208]	; (80043a8 <TIM_Base_SetConfig+0xe4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0x38>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0x38>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a31      	ldr	r2, [pc, #196]	; (80043ac <TIM_Base_SetConfig+0xe8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0x38>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <TIM_Base_SetConfig+0xec>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0x38>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <TIM_Base_SetConfig+0xf0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d108      	bne.n	800430e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <TIM_Base_SetConfig+0xe4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01b      	beq.n	800434e <TIM_Base_SetConfig+0x8a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d017      	beq.n	800434e <TIM_Base_SetConfig+0x8a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a22      	ldr	r2, [pc, #136]	; (80043ac <TIM_Base_SetConfig+0xe8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <TIM_Base_SetConfig+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <TIM_Base_SetConfig+0xec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00f      	beq.n	800434e <TIM_Base_SetConfig+0x8a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <TIM_Base_SetConfig+0xf0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_Base_SetConfig+0x8a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <TIM_Base_SetConfig+0xf4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0x8a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <TIM_Base_SetConfig+0xf8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0x8a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <TIM_Base_SetConfig+0xfc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <TIM_Base_SetConfig+0xe4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d103      	bne.n	8004394 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	615a      	str	r2, [r3, #20]
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40014400 	.word	0x40014400
 80043c0:	40014800 	.word	0x40014800

080043c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0302 	bic.w	r3, r3, #2
 800440c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1c      	ldr	r2, [pc, #112]	; (800448c <TIM_OC1_SetConfig+0xc8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d10c      	bne.n	800443a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0308 	bic.w	r3, r3, #8
 8004426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <TIM_OC1_SetConfig+0xc8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	621a      	str	r2, [r3, #32]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40010000 	.word	0x40010000

08004490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 0320 	bic.w	r3, r3, #32
 80044da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <TIM_OC2_SetConfig+0xd4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10d      	bne.n	800450c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a15      	ldr	r2, [pc, #84]	; (8004564 <TIM_OC2_SetConfig+0xd4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d113      	bne.n	800453c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40010000 	.word	0x40010000

08004568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <TIM_OC3_SetConfig+0xd0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10d      	bne.n	80045e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a14      	ldr	r2, [pc, #80]	; (8004638 <TIM_OC3_SetConfig+0xd0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d113      	bne.n	8004612 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	621a      	str	r2, [r3, #32]
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40010000 	.word	0x40010000

0800463c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	031b      	lsls	r3, r3, #12
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <TIM_OC4_SetConfig+0x9c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d109      	bne.n	80046b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000

080046dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e050      	b.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d018      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d013      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a13      	ldr	r2, [pc, #76]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d10c      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40014000 	.word	0x40014000

08004804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e03f      	b.n	80048be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fc fede 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800486e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f929 	bl	8004ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b08a      	sub	sp, #40	; 0x28
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d17c      	bne.n	80049e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_UART_Transmit+0x2c>
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e075      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_UART_Transmit+0x3e>
 8004900:	2302      	movs	r3, #2
 8004902:	e06e      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2221      	movs	r2, #33	; 0x21
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491a:	f7fc ffcf 	bl	80018bc <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004934:	d108      	bne.n	8004948 <HAL_UART_Transmit+0x82>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e003      	b.n	8004950 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004958:	e02a      	b.n	80049b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f840 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e036      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004988:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3302      	adds	r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e007      	b.n	80049a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1cf      	bne.n	800495a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2140      	movs	r1, #64	; 0x40
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f810 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e006      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b090      	sub	sp, #64	; 0x40
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fa:	e050      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d04c      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a0a:	f7fc ff57 	bl	80018bc <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d241      	bcs.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3a:	637a      	str	r2, [r7, #52]	; 0x34
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3314      	adds	r3, #20
 8004a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3314      	adds	r3, #20
 8004a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6e:	623a      	str	r2, [r7, #32]
 8004a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	69f9      	ldr	r1, [r7, #28]
 8004a74:	6a3a      	ldr	r2, [r7, #32]
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e5      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e00f      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d09f      	beq.n	80049fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3740      	adds	r7, #64	; 0x40
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b0c0      	sub	sp, #256	; 0x100
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	68d9      	ldr	r1, [r3, #12]
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	ea40 0301 	orr.w	r3, r0, r1
 8004af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b20:	f021 010c 	bic.w	r1, r1, #12
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	6999      	ldr	r1, [r3, #24]
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	ea40 0301 	orr.w	r3, r0, r1
 8004b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b8f      	ldr	r3, [pc, #572]	; (8004d94 <UART_SetConfig+0x2cc>)
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d005      	beq.n	8004b68 <UART_SetConfig+0xa0>
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8d      	ldr	r3, [pc, #564]	; (8004d98 <UART_SetConfig+0x2d0>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d104      	bne.n	8004b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7ff f838 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b70:	e003      	b.n	8004b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b72:	f7ff f81f 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8004b76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b84:	f040 810c 	bne.w	8004da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	1891      	adds	r1, r2, r2
 8004ba0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ba2:	415b      	adcs	r3, r3
 8004ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004baa:	4621      	mov	r1, r4
 8004bac:	eb12 0801 	adds.w	r8, r2, r1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb43 0901 	adc.w	r9, r3, r1
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bca:	4690      	mov	r8, r2
 8004bcc:	4699      	mov	r9, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	eb18 0303 	adds.w	r3, r8, r3
 8004bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bd8:	462b      	mov	r3, r5
 8004bda:	eb49 0303 	adc.w	r3, r9, r3
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	18db      	adds	r3, r3, r3
 8004bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	eb42 0303 	adc.w	r3, r2, r3
 8004c02:	657b      	str	r3, [r7, #84]	; 0x54
 8004c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c0c:	f7fb fb40 	bl	8000290 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011c      	lsls	r4, r3, #4
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c40:	4641      	mov	r1, r8
 8004c42:	eb12 0a01 	adds.w	sl, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0b01 	adc.w	fp, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c60:	4692      	mov	sl, r2
 8004c62:	469b      	mov	fp, r3
 8004c64:	4643      	mov	r3, r8
 8004c66:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	eb4b 0303 	adc.w	r3, fp, r3
 8004c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	643b      	str	r3, [r7, #64]	; 0x40
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ca2:	f7fb faf5 	bl	8000290 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	; 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd0:	441c      	add	r4, r3
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cec:	415b      	adcs	r3, r3
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d48:	460b      	mov	r3, r1
 8004d4a:	18db      	adds	r3, r3, r3
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4e:	4613      	mov	r3, r2
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d5e:	f7fb fa97 	bl	8000290 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	; 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	3332      	adds	r3, #50	; 0x32
 8004d7a:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 0207 	and.w	r2, r3, #7
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4422      	add	r2, r4
 8004d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d90:	e105      	b.n	8004f9e <UART_SetConfig+0x4d6>
 8004d92:	bf00      	nop
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	6239      	str	r1, [r7, #32]
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	1854      	adds	r4, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb43 0501 	adc.w	r5, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004de8:	464b      	mov	r3, r9
 8004dea:	eb45 0303 	adc.w	r3, r5, r3
 8004dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e0e:	4629      	mov	r1, r5
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4621      	mov	r1, r4
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4621      	mov	r1, r4
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e20:	f7fb fa36 	bl	8000290 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b60      	ldr	r3, [pc, #384]	; (8004fac <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011c      	lsls	r4, r3, #4
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	61b9      	str	r1, [r7, #24]
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e54:	4641      	mov	r1, r8
 8004e56:	1851      	adds	r1, r2, r1
 8004e58:	6139      	str	r1, [r7, #16]
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4651      	mov	r1, sl
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4642      	mov	r2, r8
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e88:	464b      	mov	r3, r9
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004eac:	4649      	mov	r1, r9
 8004eae:	008b      	lsls	r3, r1, #2
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	008a      	lsls	r2, r1, #2
 8004eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ebe:	f7fb f9e7 	bl	8000290 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <UART_SetConfig+0x4e4>)
 8004ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	2164      	movs	r1, #100	; 0x64
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	3332      	adds	r3, #50	; 0x32
 8004eda:	4a34      	ldr	r2, [pc, #208]	; (8004fac <UART_SetConfig+0x4e4>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee6:	441c      	add	r4, r3
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eec:	2200      	movs	r2, #0
 8004eee:	673b      	str	r3, [r7, #112]	; 0x70
 8004ef0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	464b      	mov	r3, r9
 8004efa:	1891      	adds	r1, r2, r2
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	415b      	adcs	r3, r3
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f06:	4641      	mov	r1, r8
 8004f08:	1851      	adds	r1, r2, r1
 8004f0a:	6039      	str	r1, [r7, #0]
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	414b      	adcs	r3, r1
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f1e:	4659      	mov	r1, fp
 8004f20:	00cb      	lsls	r3, r1, #3
 8004f22:	4651      	mov	r1, sl
 8004f24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f28:	4651      	mov	r1, sl
 8004f2a:	00ca      	lsls	r2, r1, #3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4603      	mov	r3, r0
 8004f32:	4642      	mov	r2, r8
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f38:	464b      	mov	r3, r9
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	eb42 0303 	adc.w	r3, r2, r3
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4c:	667a      	str	r2, [r7, #100]	; 0x64
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	008b      	lsls	r3, r1, #2
 8004f5e:	4641      	mov	r1, r8
 8004f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f64:	4641      	mov	r1, r8
 8004f66:	008a      	lsls	r2, r1, #2
 8004f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f6c:	f7fb f990 	bl	8000290 <__aeabi_uldivmod>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <UART_SetConfig+0x4e4>)
 8004f76:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2164      	movs	r1, #100	; 0x64
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	3332      	adds	r3, #50	; 0x32
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <UART_SetConfig+0x4e4>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4422      	add	r2, r4
 8004f9c:	609a      	str	r2, [r3, #8]
}
 8004f9e:	bf00      	nop
 8004fa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004faa:	bf00      	nop
 8004fac:	51eb851f 	.word	0x51eb851f

08004fb0 <__errno>:
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <__errno+0x8>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000014 	.word	0x20000014

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4d0b      	ldr	r5, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 fcc2 	bl	8005958 <_init>
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08005bb8 	.word	0x08005bb8
 8004ff8:	08005bb8 	.word	0x08005bb8
 8004ffc:	08005bb8 	.word	0x08005bb8
 8005000:	08005bbc 	.word	0x08005bbc

08005004 <memset>:
 8005004:	4402      	add	r2, r0
 8005006:	4603      	mov	r3, r0
 8005008:	4293      	cmp	r3, r2
 800500a:	d100      	bne.n	800500e <memset+0xa>
 800500c:	4770      	bx	lr
 800500e:	f803 1b01 	strb.w	r1, [r3], #1
 8005012:	e7f9      	b.n	8005008 <memset+0x4>

08005014 <sniprintf>:
 8005014:	b40c      	push	{r2, r3}
 8005016:	b530      	push	{r4, r5, lr}
 8005018:	4b17      	ldr	r3, [pc, #92]	; (8005078 <sniprintf+0x64>)
 800501a:	1e0c      	subs	r4, r1, #0
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	b09d      	sub	sp, #116	; 0x74
 8005020:	da08      	bge.n	8005034 <sniprintf+0x20>
 8005022:	238b      	movs	r3, #139	; 0x8b
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	f04f 30ff 	mov.w	r0, #4294967295
 800502a:	b01d      	add	sp, #116	; 0x74
 800502c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005030:	b002      	add	sp, #8
 8005032:	4770      	bx	lr
 8005034:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005038:	f8ad 3014 	strh.w	r3, [sp, #20]
 800503c:	bf14      	ite	ne
 800503e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005042:	4623      	moveq	r3, r4
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800504c:	9002      	str	r0, [sp, #8]
 800504e:	9006      	str	r0, [sp, #24]
 8005050:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005054:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005056:	ab21      	add	r3, sp, #132	; 0x84
 8005058:	a902      	add	r1, sp, #8
 800505a:	4628      	mov	r0, r5
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	f000 f889 	bl	8005174 <_svfiprintf_r>
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	bfbc      	itt	lt
 8005066:	238b      	movlt	r3, #139	; 0x8b
 8005068:	602b      	strlt	r3, [r5, #0]
 800506a:	2c00      	cmp	r4, #0
 800506c:	d0dd      	beq.n	800502a <sniprintf+0x16>
 800506e:	9b02      	ldr	r3, [sp, #8]
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e7d9      	b.n	800502a <sniprintf+0x16>
 8005076:	bf00      	nop
 8005078:	20000014 	.word	0x20000014

0800507c <siprintf>:
 800507c:	b40e      	push	{r1, r2, r3}
 800507e:	b500      	push	{lr}
 8005080:	b09c      	sub	sp, #112	; 0x70
 8005082:	ab1d      	add	r3, sp, #116	; 0x74
 8005084:	9002      	str	r0, [sp, #8]
 8005086:	9006      	str	r0, [sp, #24]
 8005088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800508c:	4809      	ldr	r0, [pc, #36]	; (80050b4 <siprintf+0x38>)
 800508e:	9107      	str	r1, [sp, #28]
 8005090:	9104      	str	r1, [sp, #16]
 8005092:	4909      	ldr	r1, [pc, #36]	; (80050b8 <siprintf+0x3c>)
 8005094:	f853 2b04 	ldr.w	r2, [r3], #4
 8005098:	9105      	str	r1, [sp, #20]
 800509a:	6800      	ldr	r0, [r0, #0]
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	a902      	add	r1, sp, #8
 80050a0:	f000 f868 	bl	8005174 <_svfiprintf_r>
 80050a4:	9b02      	ldr	r3, [sp, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	b01c      	add	sp, #112	; 0x70
 80050ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b0:	b003      	add	sp, #12
 80050b2:	4770      	bx	lr
 80050b4:	20000014 	.word	0x20000014
 80050b8:	ffff0208 	.word	0xffff0208

080050bc <__ssputs_r>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	688e      	ldr	r6, [r1, #8]
 80050c2:	429e      	cmp	r6, r3
 80050c4:	4682      	mov	sl, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	4690      	mov	r8, r2
 80050ca:	461f      	mov	r7, r3
 80050cc:	d838      	bhi.n	8005140 <__ssputs_r+0x84>
 80050ce:	898a      	ldrh	r2, [r1, #12]
 80050d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050d4:	d032      	beq.n	800513c <__ssputs_r+0x80>
 80050d6:	6825      	ldr	r5, [r4, #0]
 80050d8:	6909      	ldr	r1, [r1, #16]
 80050da:	eba5 0901 	sub.w	r9, r5, r1
 80050de:	6965      	ldr	r5, [r4, #20]
 80050e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050e8:	3301      	adds	r3, #1
 80050ea:	444b      	add	r3, r9
 80050ec:	106d      	asrs	r5, r5, #1
 80050ee:	429d      	cmp	r5, r3
 80050f0:	bf38      	it	cc
 80050f2:	461d      	movcc	r5, r3
 80050f4:	0553      	lsls	r3, r2, #21
 80050f6:	d531      	bpl.n	800515c <__ssputs_r+0xa0>
 80050f8:	4629      	mov	r1, r5
 80050fa:	f000 fb63 	bl	80057c4 <_malloc_r>
 80050fe:	4606      	mov	r6, r0
 8005100:	b950      	cbnz	r0, 8005118 <__ssputs_r+0x5c>
 8005102:	230c      	movs	r3, #12
 8005104:	f8ca 3000 	str.w	r3, [sl]
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	6921      	ldr	r1, [r4, #16]
 800511a:	464a      	mov	r2, r9
 800511c:	f000 fabe 	bl	800569c <memcpy>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	6126      	str	r6, [r4, #16]
 800512e:	6165      	str	r5, [r4, #20]
 8005130:	444e      	add	r6, r9
 8005132:	eba5 0509 	sub.w	r5, r5, r9
 8005136:	6026      	str	r6, [r4, #0]
 8005138:	60a5      	str	r5, [r4, #8]
 800513a:	463e      	mov	r6, r7
 800513c:	42be      	cmp	r6, r7
 800513e:	d900      	bls.n	8005142 <__ssputs_r+0x86>
 8005140:	463e      	mov	r6, r7
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	4632      	mov	r2, r6
 8005146:	4641      	mov	r1, r8
 8005148:	f000 fab6 	bl	80056b8 <memmove>
 800514c:	68a3      	ldr	r3, [r4, #8]
 800514e:	1b9b      	subs	r3, r3, r6
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	4433      	add	r3, r6
 8005156:	6023      	str	r3, [r4, #0]
 8005158:	2000      	movs	r0, #0
 800515a:	e7db      	b.n	8005114 <__ssputs_r+0x58>
 800515c:	462a      	mov	r2, r5
 800515e:	f000 fba5 	bl	80058ac <_realloc_r>
 8005162:	4606      	mov	r6, r0
 8005164:	2800      	cmp	r0, #0
 8005166:	d1e1      	bne.n	800512c <__ssputs_r+0x70>
 8005168:	6921      	ldr	r1, [r4, #16]
 800516a:	4650      	mov	r0, sl
 800516c:	f000 fabe 	bl	80056ec <_free_r>
 8005170:	e7c7      	b.n	8005102 <__ssputs_r+0x46>
	...

08005174 <_svfiprintf_r>:
 8005174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005178:	4698      	mov	r8, r3
 800517a:	898b      	ldrh	r3, [r1, #12]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	b09d      	sub	sp, #116	; 0x74
 8005180:	4607      	mov	r7, r0
 8005182:	460d      	mov	r5, r1
 8005184:	4614      	mov	r4, r2
 8005186:	d50e      	bpl.n	80051a6 <_svfiprintf_r+0x32>
 8005188:	690b      	ldr	r3, [r1, #16]
 800518a:	b963      	cbnz	r3, 80051a6 <_svfiprintf_r+0x32>
 800518c:	2140      	movs	r1, #64	; 0x40
 800518e:	f000 fb19 	bl	80057c4 <_malloc_r>
 8005192:	6028      	str	r0, [r5, #0]
 8005194:	6128      	str	r0, [r5, #16]
 8005196:	b920      	cbnz	r0, 80051a2 <_svfiprintf_r+0x2e>
 8005198:	230c      	movs	r3, #12
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	e0d1      	b.n	8005346 <_svfiprintf_r+0x1d2>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	616b      	str	r3, [r5, #20]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9309      	str	r3, [sp, #36]	; 0x24
 80051aa:	2320      	movs	r3, #32
 80051ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b4:	2330      	movs	r3, #48	; 0x30
 80051b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005360 <_svfiprintf_r+0x1ec>
 80051ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051be:	f04f 0901 	mov.w	r9, #1
 80051c2:	4623      	mov	r3, r4
 80051c4:	469a      	mov	sl, r3
 80051c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ca:	b10a      	cbz	r2, 80051d0 <_svfiprintf_r+0x5c>
 80051cc:	2a25      	cmp	r2, #37	; 0x25
 80051ce:	d1f9      	bne.n	80051c4 <_svfiprintf_r+0x50>
 80051d0:	ebba 0b04 	subs.w	fp, sl, r4
 80051d4:	d00b      	beq.n	80051ee <_svfiprintf_r+0x7a>
 80051d6:	465b      	mov	r3, fp
 80051d8:	4622      	mov	r2, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff ff6d 	bl	80050bc <__ssputs_r>
 80051e2:	3001      	adds	r0, #1
 80051e4:	f000 80aa 	beq.w	800533c <_svfiprintf_r+0x1c8>
 80051e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ea:	445a      	add	r2, fp
 80051ec:	9209      	str	r2, [sp, #36]	; 0x24
 80051ee:	f89a 3000 	ldrb.w	r3, [sl]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80a2 	beq.w	800533c <_svfiprintf_r+0x1c8>
 80051f8:	2300      	movs	r3, #0
 80051fa:	f04f 32ff 	mov.w	r2, #4294967295
 80051fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005202:	f10a 0a01 	add.w	sl, sl, #1
 8005206:	9304      	str	r3, [sp, #16]
 8005208:	9307      	str	r3, [sp, #28]
 800520a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800520e:	931a      	str	r3, [sp, #104]	; 0x68
 8005210:	4654      	mov	r4, sl
 8005212:	2205      	movs	r2, #5
 8005214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005218:	4851      	ldr	r0, [pc, #324]	; (8005360 <_svfiprintf_r+0x1ec>)
 800521a:	f7fa ffe9 	bl	80001f0 <memchr>
 800521e:	9a04      	ldr	r2, [sp, #16]
 8005220:	b9d8      	cbnz	r0, 800525a <_svfiprintf_r+0xe6>
 8005222:	06d0      	lsls	r0, r2, #27
 8005224:	bf44      	itt	mi
 8005226:	2320      	movmi	r3, #32
 8005228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800522c:	0711      	lsls	r1, r2, #28
 800522e:	bf44      	itt	mi
 8005230:	232b      	movmi	r3, #43	; 0x2b
 8005232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005236:	f89a 3000 	ldrb.w	r3, [sl]
 800523a:	2b2a      	cmp	r3, #42	; 0x2a
 800523c:	d015      	beq.n	800526a <_svfiprintf_r+0xf6>
 800523e:	9a07      	ldr	r2, [sp, #28]
 8005240:	4654      	mov	r4, sl
 8005242:	2000      	movs	r0, #0
 8005244:	f04f 0c0a 	mov.w	ip, #10
 8005248:	4621      	mov	r1, r4
 800524a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800524e:	3b30      	subs	r3, #48	; 0x30
 8005250:	2b09      	cmp	r3, #9
 8005252:	d94e      	bls.n	80052f2 <_svfiprintf_r+0x17e>
 8005254:	b1b0      	cbz	r0, 8005284 <_svfiprintf_r+0x110>
 8005256:	9207      	str	r2, [sp, #28]
 8005258:	e014      	b.n	8005284 <_svfiprintf_r+0x110>
 800525a:	eba0 0308 	sub.w	r3, r0, r8
 800525e:	fa09 f303 	lsl.w	r3, r9, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	9304      	str	r3, [sp, #16]
 8005266:	46a2      	mov	sl, r4
 8005268:	e7d2      	b.n	8005210 <_svfiprintf_r+0x9c>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	1d19      	adds	r1, r3, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	9103      	str	r1, [sp, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfbb      	ittet	lt
 8005276:	425b      	neglt	r3, r3
 8005278:	f042 0202 	orrlt.w	r2, r2, #2
 800527c:	9307      	strge	r3, [sp, #28]
 800527e:	9307      	strlt	r3, [sp, #28]
 8005280:	bfb8      	it	lt
 8005282:	9204      	strlt	r2, [sp, #16]
 8005284:	7823      	ldrb	r3, [r4, #0]
 8005286:	2b2e      	cmp	r3, #46	; 0x2e
 8005288:	d10c      	bne.n	80052a4 <_svfiprintf_r+0x130>
 800528a:	7863      	ldrb	r3, [r4, #1]
 800528c:	2b2a      	cmp	r3, #42	; 0x2a
 800528e:	d135      	bne.n	80052fc <_svfiprintf_r+0x188>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	9203      	str	r2, [sp, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	bfb8      	it	lt
 800529c:	f04f 33ff 	movlt.w	r3, #4294967295
 80052a0:	3402      	adds	r4, #2
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005370 <_svfiprintf_r+0x1fc>
 80052a8:	7821      	ldrb	r1, [r4, #0]
 80052aa:	2203      	movs	r2, #3
 80052ac:	4650      	mov	r0, sl
 80052ae:	f7fa ff9f 	bl	80001f0 <memchr>
 80052b2:	b140      	cbz	r0, 80052c6 <_svfiprintf_r+0x152>
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	eba0 000a 	sub.w	r0, r0, sl
 80052ba:	fa03 f000 	lsl.w	r0, r3, r0
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	4303      	orrs	r3, r0
 80052c2:	3401      	adds	r4, #1
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ca:	4826      	ldr	r0, [pc, #152]	; (8005364 <_svfiprintf_r+0x1f0>)
 80052cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052d0:	2206      	movs	r2, #6
 80052d2:	f7fa ff8d 	bl	80001f0 <memchr>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d038      	beq.n	800534c <_svfiprintf_r+0x1d8>
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <_svfiprintf_r+0x1f4>)
 80052dc:	bb1b      	cbnz	r3, 8005326 <_svfiprintf_r+0x1b2>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	3307      	adds	r3, #7
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	3308      	adds	r3, #8
 80052e8:	9303      	str	r3, [sp, #12]
 80052ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ec:	4433      	add	r3, r6
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	e767      	b.n	80051c2 <_svfiprintf_r+0x4e>
 80052f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f6:	460c      	mov	r4, r1
 80052f8:	2001      	movs	r0, #1
 80052fa:	e7a5      	b.n	8005248 <_svfiprintf_r+0xd4>
 80052fc:	2300      	movs	r3, #0
 80052fe:	3401      	adds	r4, #1
 8005300:	9305      	str	r3, [sp, #20]
 8005302:	4619      	mov	r1, r3
 8005304:	f04f 0c0a 	mov.w	ip, #10
 8005308:	4620      	mov	r0, r4
 800530a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530e:	3a30      	subs	r2, #48	; 0x30
 8005310:	2a09      	cmp	r2, #9
 8005312:	d903      	bls.n	800531c <_svfiprintf_r+0x1a8>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0c5      	beq.n	80052a4 <_svfiprintf_r+0x130>
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	e7c3      	b.n	80052a4 <_svfiprintf_r+0x130>
 800531c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005320:	4604      	mov	r4, r0
 8005322:	2301      	movs	r3, #1
 8005324:	e7f0      	b.n	8005308 <_svfiprintf_r+0x194>
 8005326:	ab03      	add	r3, sp, #12
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	462a      	mov	r2, r5
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <_svfiprintf_r+0x1f8>)
 800532e:	a904      	add	r1, sp, #16
 8005330:	4638      	mov	r0, r7
 8005332:	f3af 8000 	nop.w
 8005336:	1c42      	adds	r2, r0, #1
 8005338:	4606      	mov	r6, r0
 800533a:	d1d6      	bne.n	80052ea <_svfiprintf_r+0x176>
 800533c:	89ab      	ldrh	r3, [r5, #12]
 800533e:	065b      	lsls	r3, r3, #25
 8005340:	f53f af2c 	bmi.w	800519c <_svfiprintf_r+0x28>
 8005344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005346:	b01d      	add	sp, #116	; 0x74
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	ab03      	add	r3, sp, #12
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	462a      	mov	r2, r5
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <_svfiprintf_r+0x1f8>)
 8005354:	a904      	add	r1, sp, #16
 8005356:	4638      	mov	r0, r7
 8005358:	f000 f87a 	bl	8005450 <_printf_i>
 800535c:	e7eb      	b.n	8005336 <_svfiprintf_r+0x1c2>
 800535e:	bf00      	nop
 8005360:	08005b7c 	.word	0x08005b7c
 8005364:	08005b86 	.word	0x08005b86
 8005368:	00000000 	.word	0x00000000
 800536c:	080050bd 	.word	0x080050bd
 8005370:	08005b82 	.word	0x08005b82

08005374 <_printf_common>:
 8005374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	4616      	mov	r6, r2
 800537a:	4699      	mov	r9, r3
 800537c:	688a      	ldr	r2, [r1, #8]
 800537e:	690b      	ldr	r3, [r1, #16]
 8005380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005384:	4293      	cmp	r3, r2
 8005386:	bfb8      	it	lt
 8005388:	4613      	movlt	r3, r2
 800538a:	6033      	str	r3, [r6, #0]
 800538c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005390:	4607      	mov	r7, r0
 8005392:	460c      	mov	r4, r1
 8005394:	b10a      	cbz	r2, 800539a <_printf_common+0x26>
 8005396:	3301      	adds	r3, #1
 8005398:	6033      	str	r3, [r6, #0]
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	0699      	lsls	r1, r3, #26
 800539e:	bf42      	ittt	mi
 80053a0:	6833      	ldrmi	r3, [r6, #0]
 80053a2:	3302      	addmi	r3, #2
 80053a4:	6033      	strmi	r3, [r6, #0]
 80053a6:	6825      	ldr	r5, [r4, #0]
 80053a8:	f015 0506 	ands.w	r5, r5, #6
 80053ac:	d106      	bne.n	80053bc <_printf_common+0x48>
 80053ae:	f104 0a19 	add.w	sl, r4, #25
 80053b2:	68e3      	ldr	r3, [r4, #12]
 80053b4:	6832      	ldr	r2, [r6, #0]
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	42ab      	cmp	r3, r5
 80053ba:	dc26      	bgt.n	800540a <_printf_common+0x96>
 80053bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053c0:	1e13      	subs	r3, r2, #0
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	bf18      	it	ne
 80053c6:	2301      	movne	r3, #1
 80053c8:	0692      	lsls	r2, r2, #26
 80053ca:	d42b      	bmi.n	8005424 <_printf_common+0xb0>
 80053cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053d0:	4649      	mov	r1, r9
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d01e      	beq.n	8005418 <_printf_common+0xa4>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	68e5      	ldr	r5, [r4, #12]
 80053de:	6832      	ldr	r2, [r6, #0]
 80053e0:	f003 0306 	and.w	r3, r3, #6
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	bf08      	it	eq
 80053e8:	1aad      	subeq	r5, r5, r2
 80053ea:	68a3      	ldr	r3, [r4, #8]
 80053ec:	6922      	ldr	r2, [r4, #16]
 80053ee:	bf0c      	ite	eq
 80053f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053f4:	2500      	movne	r5, #0
 80053f6:	4293      	cmp	r3, r2
 80053f8:	bfc4      	itt	gt
 80053fa:	1a9b      	subgt	r3, r3, r2
 80053fc:	18ed      	addgt	r5, r5, r3
 80053fe:	2600      	movs	r6, #0
 8005400:	341a      	adds	r4, #26
 8005402:	42b5      	cmp	r5, r6
 8005404:	d11a      	bne.n	800543c <_printf_common+0xc8>
 8005406:	2000      	movs	r0, #0
 8005408:	e008      	b.n	800541c <_printf_common+0xa8>
 800540a:	2301      	movs	r3, #1
 800540c:	4652      	mov	r2, sl
 800540e:	4649      	mov	r1, r9
 8005410:	4638      	mov	r0, r7
 8005412:	47c0      	blx	r8
 8005414:	3001      	adds	r0, #1
 8005416:	d103      	bne.n	8005420 <_printf_common+0xac>
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
 800541c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005420:	3501      	adds	r5, #1
 8005422:	e7c6      	b.n	80053b2 <_printf_common+0x3e>
 8005424:	18e1      	adds	r1, r4, r3
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	2030      	movs	r0, #48	; 0x30
 800542a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800542e:	4422      	add	r2, r4
 8005430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005438:	3302      	adds	r3, #2
 800543a:	e7c7      	b.n	80053cc <_printf_common+0x58>
 800543c:	2301      	movs	r3, #1
 800543e:	4622      	mov	r2, r4
 8005440:	4649      	mov	r1, r9
 8005442:	4638      	mov	r0, r7
 8005444:	47c0      	blx	r8
 8005446:	3001      	adds	r0, #1
 8005448:	d0e6      	beq.n	8005418 <_printf_common+0xa4>
 800544a:	3601      	adds	r6, #1
 800544c:	e7d9      	b.n	8005402 <_printf_common+0x8e>
	...

08005450 <_printf_i>:
 8005450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005454:	7e0f      	ldrb	r7, [r1, #24]
 8005456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005458:	2f78      	cmp	r7, #120	; 0x78
 800545a:	4691      	mov	r9, r2
 800545c:	4680      	mov	r8, r0
 800545e:	460c      	mov	r4, r1
 8005460:	469a      	mov	sl, r3
 8005462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005466:	d807      	bhi.n	8005478 <_printf_i+0x28>
 8005468:	2f62      	cmp	r7, #98	; 0x62
 800546a:	d80a      	bhi.n	8005482 <_printf_i+0x32>
 800546c:	2f00      	cmp	r7, #0
 800546e:	f000 80d8 	beq.w	8005622 <_printf_i+0x1d2>
 8005472:	2f58      	cmp	r7, #88	; 0x58
 8005474:	f000 80a3 	beq.w	80055be <_printf_i+0x16e>
 8005478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800547c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005480:	e03a      	b.n	80054f8 <_printf_i+0xa8>
 8005482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005486:	2b15      	cmp	r3, #21
 8005488:	d8f6      	bhi.n	8005478 <_printf_i+0x28>
 800548a:	a101      	add	r1, pc, #4	; (adr r1, 8005490 <_printf_i+0x40>)
 800548c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005490:	080054e9 	.word	0x080054e9
 8005494:	080054fd 	.word	0x080054fd
 8005498:	08005479 	.word	0x08005479
 800549c:	08005479 	.word	0x08005479
 80054a0:	08005479 	.word	0x08005479
 80054a4:	08005479 	.word	0x08005479
 80054a8:	080054fd 	.word	0x080054fd
 80054ac:	08005479 	.word	0x08005479
 80054b0:	08005479 	.word	0x08005479
 80054b4:	08005479 	.word	0x08005479
 80054b8:	08005479 	.word	0x08005479
 80054bc:	08005609 	.word	0x08005609
 80054c0:	0800552d 	.word	0x0800552d
 80054c4:	080055eb 	.word	0x080055eb
 80054c8:	08005479 	.word	0x08005479
 80054cc:	08005479 	.word	0x08005479
 80054d0:	0800562b 	.word	0x0800562b
 80054d4:	08005479 	.word	0x08005479
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	08005479 	.word	0x08005479
 80054e0:	08005479 	.word	0x08005479
 80054e4:	080055f3 	.word	0x080055f3
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	1d1a      	adds	r2, r3, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	602a      	str	r2, [r5, #0]
 80054f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0a3      	b.n	8005644 <_printf_i+0x1f4>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	6829      	ldr	r1, [r5, #0]
 8005500:	0606      	lsls	r6, r0, #24
 8005502:	f101 0304 	add.w	r3, r1, #4
 8005506:	d50a      	bpl.n	800551e <_printf_i+0xce>
 8005508:	680e      	ldr	r6, [r1, #0]
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	2e00      	cmp	r6, #0
 800550e:	da03      	bge.n	8005518 <_printf_i+0xc8>
 8005510:	232d      	movs	r3, #45	; 0x2d
 8005512:	4276      	negs	r6, r6
 8005514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005518:	485e      	ldr	r0, [pc, #376]	; (8005694 <_printf_i+0x244>)
 800551a:	230a      	movs	r3, #10
 800551c:	e019      	b.n	8005552 <_printf_i+0x102>
 800551e:	680e      	ldr	r6, [r1, #0]
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005526:	bf18      	it	ne
 8005528:	b236      	sxthne	r6, r6
 800552a:	e7ef      	b.n	800550c <_printf_i+0xbc>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	1d19      	adds	r1, r3, #4
 8005532:	6029      	str	r1, [r5, #0]
 8005534:	0601      	lsls	r1, r0, #24
 8005536:	d501      	bpl.n	800553c <_printf_i+0xec>
 8005538:	681e      	ldr	r6, [r3, #0]
 800553a:	e002      	b.n	8005542 <_printf_i+0xf2>
 800553c:	0646      	lsls	r6, r0, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0xe8>
 8005540:	881e      	ldrh	r6, [r3, #0]
 8005542:	4854      	ldr	r0, [pc, #336]	; (8005694 <_printf_i+0x244>)
 8005544:	2f6f      	cmp	r7, #111	; 0x6f
 8005546:	bf0c      	ite	eq
 8005548:	2308      	moveq	r3, #8
 800554a:	230a      	movne	r3, #10
 800554c:	2100      	movs	r1, #0
 800554e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005552:	6865      	ldr	r5, [r4, #4]
 8005554:	60a5      	str	r5, [r4, #8]
 8005556:	2d00      	cmp	r5, #0
 8005558:	bfa2      	ittt	ge
 800555a:	6821      	ldrge	r1, [r4, #0]
 800555c:	f021 0104 	bicge.w	r1, r1, #4
 8005560:	6021      	strge	r1, [r4, #0]
 8005562:	b90e      	cbnz	r6, 8005568 <_printf_i+0x118>
 8005564:	2d00      	cmp	r5, #0
 8005566:	d04d      	beq.n	8005604 <_printf_i+0x1b4>
 8005568:	4615      	mov	r5, r2
 800556a:	fbb6 f1f3 	udiv	r1, r6, r3
 800556e:	fb03 6711 	mls	r7, r3, r1, r6
 8005572:	5dc7      	ldrb	r7, [r0, r7]
 8005574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005578:	4637      	mov	r7, r6
 800557a:	42bb      	cmp	r3, r7
 800557c:	460e      	mov	r6, r1
 800557e:	d9f4      	bls.n	800556a <_printf_i+0x11a>
 8005580:	2b08      	cmp	r3, #8
 8005582:	d10b      	bne.n	800559c <_printf_i+0x14c>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	07de      	lsls	r6, r3, #31
 8005588:	d508      	bpl.n	800559c <_printf_i+0x14c>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	6861      	ldr	r1, [r4, #4]
 800558e:	4299      	cmp	r1, r3
 8005590:	bfde      	ittt	le
 8005592:	2330      	movle	r3, #48	; 0x30
 8005594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800559c:	1b52      	subs	r2, r2, r5
 800559e:	6122      	str	r2, [r4, #16]
 80055a0:	f8cd a000 	str.w	sl, [sp]
 80055a4:	464b      	mov	r3, r9
 80055a6:	aa03      	add	r2, sp, #12
 80055a8:	4621      	mov	r1, r4
 80055aa:	4640      	mov	r0, r8
 80055ac:	f7ff fee2 	bl	8005374 <_printf_common>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d14c      	bne.n	800564e <_printf_i+0x1fe>
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	b004      	add	sp, #16
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055be:	4835      	ldr	r0, [pc, #212]	; (8005694 <_printf_i+0x244>)
 80055c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055c4:	6829      	ldr	r1, [r5, #0]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80055cc:	6029      	str	r1, [r5, #0]
 80055ce:	061d      	lsls	r5, r3, #24
 80055d0:	d514      	bpl.n	80055fc <_printf_i+0x1ac>
 80055d2:	07df      	lsls	r7, r3, #31
 80055d4:	bf44      	itt	mi
 80055d6:	f043 0320 	orrmi.w	r3, r3, #32
 80055da:	6023      	strmi	r3, [r4, #0]
 80055dc:	b91e      	cbnz	r6, 80055e6 <_printf_i+0x196>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	f023 0320 	bic.w	r3, r3, #32
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	2310      	movs	r3, #16
 80055e8:	e7b0      	b.n	800554c <_printf_i+0xfc>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f043 0320 	orr.w	r3, r3, #32
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	2378      	movs	r3, #120	; 0x78
 80055f4:	4828      	ldr	r0, [pc, #160]	; (8005698 <_printf_i+0x248>)
 80055f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055fa:	e7e3      	b.n	80055c4 <_printf_i+0x174>
 80055fc:	0659      	lsls	r1, r3, #25
 80055fe:	bf48      	it	mi
 8005600:	b2b6      	uxthmi	r6, r6
 8005602:	e7e6      	b.n	80055d2 <_printf_i+0x182>
 8005604:	4615      	mov	r5, r2
 8005606:	e7bb      	b.n	8005580 <_printf_i+0x130>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	6826      	ldr	r6, [r4, #0]
 800560c:	6961      	ldr	r1, [r4, #20]
 800560e:	1d18      	adds	r0, r3, #4
 8005610:	6028      	str	r0, [r5, #0]
 8005612:	0635      	lsls	r5, r6, #24
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	d501      	bpl.n	800561c <_printf_i+0x1cc>
 8005618:	6019      	str	r1, [r3, #0]
 800561a:	e002      	b.n	8005622 <_printf_i+0x1d2>
 800561c:	0670      	lsls	r0, r6, #25
 800561e:	d5fb      	bpl.n	8005618 <_printf_i+0x1c8>
 8005620:	8019      	strh	r1, [r3, #0]
 8005622:	2300      	movs	r3, #0
 8005624:	6123      	str	r3, [r4, #16]
 8005626:	4615      	mov	r5, r2
 8005628:	e7ba      	b.n	80055a0 <_printf_i+0x150>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	602a      	str	r2, [r5, #0]
 8005630:	681d      	ldr	r5, [r3, #0]
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	2100      	movs	r1, #0
 8005636:	4628      	mov	r0, r5
 8005638:	f7fa fdda 	bl	80001f0 <memchr>
 800563c:	b108      	cbz	r0, 8005642 <_printf_i+0x1f2>
 800563e:	1b40      	subs	r0, r0, r5
 8005640:	6060      	str	r0, [r4, #4]
 8005642:	6863      	ldr	r3, [r4, #4]
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	2300      	movs	r3, #0
 8005648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564c:	e7a8      	b.n	80055a0 <_printf_i+0x150>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	462a      	mov	r2, r5
 8005652:	4649      	mov	r1, r9
 8005654:	4640      	mov	r0, r8
 8005656:	47d0      	blx	sl
 8005658:	3001      	adds	r0, #1
 800565a:	d0ab      	beq.n	80055b4 <_printf_i+0x164>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	079b      	lsls	r3, r3, #30
 8005660:	d413      	bmi.n	800568a <_printf_i+0x23a>
 8005662:	68e0      	ldr	r0, [r4, #12]
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	4298      	cmp	r0, r3
 8005668:	bfb8      	it	lt
 800566a:	4618      	movlt	r0, r3
 800566c:	e7a4      	b.n	80055b8 <_printf_i+0x168>
 800566e:	2301      	movs	r3, #1
 8005670:	4632      	mov	r2, r6
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	47d0      	blx	sl
 8005678:	3001      	adds	r0, #1
 800567a:	d09b      	beq.n	80055b4 <_printf_i+0x164>
 800567c:	3501      	adds	r5, #1
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	9903      	ldr	r1, [sp, #12]
 8005682:	1a5b      	subs	r3, r3, r1
 8005684:	42ab      	cmp	r3, r5
 8005686:	dcf2      	bgt.n	800566e <_printf_i+0x21e>
 8005688:	e7eb      	b.n	8005662 <_printf_i+0x212>
 800568a:	2500      	movs	r5, #0
 800568c:	f104 0619 	add.w	r6, r4, #25
 8005690:	e7f5      	b.n	800567e <_printf_i+0x22e>
 8005692:	bf00      	nop
 8005694:	08005b8d 	.word	0x08005b8d
 8005698:	08005b9e 	.word	0x08005b9e

0800569c <memcpy>:
 800569c:	440a      	add	r2, r1
 800569e:	4291      	cmp	r1, r2
 80056a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a4:	d100      	bne.n	80056a8 <memcpy+0xc>
 80056a6:	4770      	bx	lr
 80056a8:	b510      	push	{r4, lr}
 80056aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b2:	4291      	cmp	r1, r2
 80056b4:	d1f9      	bne.n	80056aa <memcpy+0xe>
 80056b6:	bd10      	pop	{r4, pc}

080056b8 <memmove>:
 80056b8:	4288      	cmp	r0, r1
 80056ba:	b510      	push	{r4, lr}
 80056bc:	eb01 0402 	add.w	r4, r1, r2
 80056c0:	d902      	bls.n	80056c8 <memmove+0x10>
 80056c2:	4284      	cmp	r4, r0
 80056c4:	4623      	mov	r3, r4
 80056c6:	d807      	bhi.n	80056d8 <memmove+0x20>
 80056c8:	1e43      	subs	r3, r0, #1
 80056ca:	42a1      	cmp	r1, r4
 80056cc:	d008      	beq.n	80056e0 <memmove+0x28>
 80056ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056d6:	e7f8      	b.n	80056ca <memmove+0x12>
 80056d8:	4402      	add	r2, r0
 80056da:	4601      	mov	r1, r0
 80056dc:	428a      	cmp	r2, r1
 80056de:	d100      	bne.n	80056e2 <memmove+0x2a>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ea:	e7f7      	b.n	80056dc <memmove+0x24>

080056ec <_free_r>:
 80056ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d044      	beq.n	800577c <_free_r+0x90>
 80056f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f6:	9001      	str	r0, [sp, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f1a1 0404 	sub.w	r4, r1, #4
 80056fe:	bfb8      	it	lt
 8005700:	18e4      	addlt	r4, r4, r3
 8005702:	f000 f913 	bl	800592c <__malloc_lock>
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <_free_r+0x94>)
 8005708:	9801      	ldr	r0, [sp, #4]
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	b933      	cbnz	r3, 800571c <_free_r+0x30>
 800570e:	6063      	str	r3, [r4, #4]
 8005710:	6014      	str	r4, [r2, #0]
 8005712:	b003      	add	sp, #12
 8005714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005718:	f000 b90e 	b.w	8005938 <__malloc_unlock>
 800571c:	42a3      	cmp	r3, r4
 800571e:	d908      	bls.n	8005732 <_free_r+0x46>
 8005720:	6825      	ldr	r5, [r4, #0]
 8005722:	1961      	adds	r1, r4, r5
 8005724:	428b      	cmp	r3, r1
 8005726:	bf01      	itttt	eq
 8005728:	6819      	ldreq	r1, [r3, #0]
 800572a:	685b      	ldreq	r3, [r3, #4]
 800572c:	1949      	addeq	r1, r1, r5
 800572e:	6021      	streq	r1, [r4, #0]
 8005730:	e7ed      	b.n	800570e <_free_r+0x22>
 8005732:	461a      	mov	r2, r3
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	b10b      	cbz	r3, 800573c <_free_r+0x50>
 8005738:	42a3      	cmp	r3, r4
 800573a:	d9fa      	bls.n	8005732 <_free_r+0x46>
 800573c:	6811      	ldr	r1, [r2, #0]
 800573e:	1855      	adds	r5, r2, r1
 8005740:	42a5      	cmp	r5, r4
 8005742:	d10b      	bne.n	800575c <_free_r+0x70>
 8005744:	6824      	ldr	r4, [r4, #0]
 8005746:	4421      	add	r1, r4
 8005748:	1854      	adds	r4, r2, r1
 800574a:	42a3      	cmp	r3, r4
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	d1e0      	bne.n	8005712 <_free_r+0x26>
 8005750:	681c      	ldr	r4, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	6053      	str	r3, [r2, #4]
 8005756:	4421      	add	r1, r4
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	e7da      	b.n	8005712 <_free_r+0x26>
 800575c:	d902      	bls.n	8005764 <_free_r+0x78>
 800575e:	230c      	movs	r3, #12
 8005760:	6003      	str	r3, [r0, #0]
 8005762:	e7d6      	b.n	8005712 <_free_r+0x26>
 8005764:	6825      	ldr	r5, [r4, #0]
 8005766:	1961      	adds	r1, r4, r5
 8005768:	428b      	cmp	r3, r1
 800576a:	bf04      	itt	eq
 800576c:	6819      	ldreq	r1, [r3, #0]
 800576e:	685b      	ldreq	r3, [r3, #4]
 8005770:	6063      	str	r3, [r4, #4]
 8005772:	bf04      	itt	eq
 8005774:	1949      	addeq	r1, r1, r5
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	6054      	str	r4, [r2, #4]
 800577a:	e7ca      	b.n	8005712 <_free_r+0x26>
 800577c:	b003      	add	sp, #12
 800577e:	bd30      	pop	{r4, r5, pc}
 8005780:	20000180 	.word	0x20000180

08005784 <sbrk_aligned>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4e0e      	ldr	r6, [pc, #56]	; (80057c0 <sbrk_aligned+0x3c>)
 8005788:	460c      	mov	r4, r1
 800578a:	6831      	ldr	r1, [r6, #0]
 800578c:	4605      	mov	r5, r0
 800578e:	b911      	cbnz	r1, 8005796 <sbrk_aligned+0x12>
 8005790:	f000 f8bc 	bl	800590c <_sbrk_r>
 8005794:	6030      	str	r0, [r6, #0]
 8005796:	4621      	mov	r1, r4
 8005798:	4628      	mov	r0, r5
 800579a:	f000 f8b7 	bl	800590c <_sbrk_r>
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	d00a      	beq.n	80057b8 <sbrk_aligned+0x34>
 80057a2:	1cc4      	adds	r4, r0, #3
 80057a4:	f024 0403 	bic.w	r4, r4, #3
 80057a8:	42a0      	cmp	r0, r4
 80057aa:	d007      	beq.n	80057bc <sbrk_aligned+0x38>
 80057ac:	1a21      	subs	r1, r4, r0
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 f8ac 	bl	800590c <_sbrk_r>
 80057b4:	3001      	adds	r0, #1
 80057b6:	d101      	bne.n	80057bc <sbrk_aligned+0x38>
 80057b8:	f04f 34ff 	mov.w	r4, #4294967295
 80057bc:	4620      	mov	r0, r4
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	20000184 	.word	0x20000184

080057c4 <_malloc_r>:
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	1ccd      	adds	r5, r1, #3
 80057ca:	f025 0503 	bic.w	r5, r5, #3
 80057ce:	3508      	adds	r5, #8
 80057d0:	2d0c      	cmp	r5, #12
 80057d2:	bf38      	it	cc
 80057d4:	250c      	movcc	r5, #12
 80057d6:	2d00      	cmp	r5, #0
 80057d8:	4607      	mov	r7, r0
 80057da:	db01      	blt.n	80057e0 <_malloc_r+0x1c>
 80057dc:	42a9      	cmp	r1, r5
 80057de:	d905      	bls.n	80057ec <_malloc_r+0x28>
 80057e0:	230c      	movs	r3, #12
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	2600      	movs	r6, #0
 80057e6:	4630      	mov	r0, r6
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	4e2e      	ldr	r6, [pc, #184]	; (80058a8 <_malloc_r+0xe4>)
 80057ee:	f000 f89d 	bl	800592c <__malloc_lock>
 80057f2:	6833      	ldr	r3, [r6, #0]
 80057f4:	461c      	mov	r4, r3
 80057f6:	bb34      	cbnz	r4, 8005846 <_malloc_r+0x82>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4638      	mov	r0, r7
 80057fc:	f7ff ffc2 	bl	8005784 <sbrk_aligned>
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	4604      	mov	r4, r0
 8005804:	d14d      	bne.n	80058a2 <_malloc_r+0xde>
 8005806:	6834      	ldr	r4, [r6, #0]
 8005808:	4626      	mov	r6, r4
 800580a:	2e00      	cmp	r6, #0
 800580c:	d140      	bne.n	8005890 <_malloc_r+0xcc>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	4631      	mov	r1, r6
 8005812:	4638      	mov	r0, r7
 8005814:	eb04 0803 	add.w	r8, r4, r3
 8005818:	f000 f878 	bl	800590c <_sbrk_r>
 800581c:	4580      	cmp	r8, r0
 800581e:	d13a      	bne.n	8005896 <_malloc_r+0xd2>
 8005820:	6821      	ldr	r1, [r4, #0]
 8005822:	3503      	adds	r5, #3
 8005824:	1a6d      	subs	r5, r5, r1
 8005826:	f025 0503 	bic.w	r5, r5, #3
 800582a:	3508      	adds	r5, #8
 800582c:	2d0c      	cmp	r5, #12
 800582e:	bf38      	it	cc
 8005830:	250c      	movcc	r5, #12
 8005832:	4629      	mov	r1, r5
 8005834:	4638      	mov	r0, r7
 8005836:	f7ff ffa5 	bl	8005784 <sbrk_aligned>
 800583a:	3001      	adds	r0, #1
 800583c:	d02b      	beq.n	8005896 <_malloc_r+0xd2>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	442b      	add	r3, r5
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	e00e      	b.n	8005864 <_malloc_r+0xa0>
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	1b52      	subs	r2, r2, r5
 800584a:	d41e      	bmi.n	800588a <_malloc_r+0xc6>
 800584c:	2a0b      	cmp	r2, #11
 800584e:	d916      	bls.n	800587e <_malloc_r+0xba>
 8005850:	1961      	adds	r1, r4, r5
 8005852:	42a3      	cmp	r3, r4
 8005854:	6025      	str	r5, [r4, #0]
 8005856:	bf18      	it	ne
 8005858:	6059      	strne	r1, [r3, #4]
 800585a:	6863      	ldr	r3, [r4, #4]
 800585c:	bf08      	it	eq
 800585e:	6031      	streq	r1, [r6, #0]
 8005860:	5162      	str	r2, [r4, r5]
 8005862:	604b      	str	r3, [r1, #4]
 8005864:	4638      	mov	r0, r7
 8005866:	f104 060b 	add.w	r6, r4, #11
 800586a:	f000 f865 	bl	8005938 <__malloc_unlock>
 800586e:	f026 0607 	bic.w	r6, r6, #7
 8005872:	1d23      	adds	r3, r4, #4
 8005874:	1af2      	subs	r2, r6, r3
 8005876:	d0b6      	beq.n	80057e6 <_malloc_r+0x22>
 8005878:	1b9b      	subs	r3, r3, r6
 800587a:	50a3      	str	r3, [r4, r2]
 800587c:	e7b3      	b.n	80057e6 <_malloc_r+0x22>
 800587e:	6862      	ldr	r2, [r4, #4]
 8005880:	42a3      	cmp	r3, r4
 8005882:	bf0c      	ite	eq
 8005884:	6032      	streq	r2, [r6, #0]
 8005886:	605a      	strne	r2, [r3, #4]
 8005888:	e7ec      	b.n	8005864 <_malloc_r+0xa0>
 800588a:	4623      	mov	r3, r4
 800588c:	6864      	ldr	r4, [r4, #4]
 800588e:	e7b2      	b.n	80057f6 <_malloc_r+0x32>
 8005890:	4634      	mov	r4, r6
 8005892:	6876      	ldr	r6, [r6, #4]
 8005894:	e7b9      	b.n	800580a <_malloc_r+0x46>
 8005896:	230c      	movs	r3, #12
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	4638      	mov	r0, r7
 800589c:	f000 f84c 	bl	8005938 <__malloc_unlock>
 80058a0:	e7a1      	b.n	80057e6 <_malloc_r+0x22>
 80058a2:	6025      	str	r5, [r4, #0]
 80058a4:	e7de      	b.n	8005864 <_malloc_r+0xa0>
 80058a6:	bf00      	nop
 80058a8:	20000180 	.word	0x20000180

080058ac <_realloc_r>:
 80058ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b0:	4680      	mov	r8, r0
 80058b2:	4614      	mov	r4, r2
 80058b4:	460e      	mov	r6, r1
 80058b6:	b921      	cbnz	r1, 80058c2 <_realloc_r+0x16>
 80058b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058bc:	4611      	mov	r1, r2
 80058be:	f7ff bf81 	b.w	80057c4 <_malloc_r>
 80058c2:	b92a      	cbnz	r2, 80058d0 <_realloc_r+0x24>
 80058c4:	f7ff ff12 	bl	80056ec <_free_r>
 80058c8:	4625      	mov	r5, r4
 80058ca:	4628      	mov	r0, r5
 80058cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d0:	f000 f838 	bl	8005944 <_malloc_usable_size_r>
 80058d4:	4284      	cmp	r4, r0
 80058d6:	4607      	mov	r7, r0
 80058d8:	d802      	bhi.n	80058e0 <_realloc_r+0x34>
 80058da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058de:	d812      	bhi.n	8005906 <_realloc_r+0x5a>
 80058e0:	4621      	mov	r1, r4
 80058e2:	4640      	mov	r0, r8
 80058e4:	f7ff ff6e 	bl	80057c4 <_malloc_r>
 80058e8:	4605      	mov	r5, r0
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d0ed      	beq.n	80058ca <_realloc_r+0x1e>
 80058ee:	42bc      	cmp	r4, r7
 80058f0:	4622      	mov	r2, r4
 80058f2:	4631      	mov	r1, r6
 80058f4:	bf28      	it	cs
 80058f6:	463a      	movcs	r2, r7
 80058f8:	f7ff fed0 	bl	800569c <memcpy>
 80058fc:	4631      	mov	r1, r6
 80058fe:	4640      	mov	r0, r8
 8005900:	f7ff fef4 	bl	80056ec <_free_r>
 8005904:	e7e1      	b.n	80058ca <_realloc_r+0x1e>
 8005906:	4635      	mov	r5, r6
 8005908:	e7df      	b.n	80058ca <_realloc_r+0x1e>
	...

0800590c <_sbrk_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d06      	ldr	r5, [pc, #24]	; (8005928 <_sbrk_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	f7fb fef8 	bl	800170c <_sbrk>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_sbrk_r+0x1a>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_sbrk_r+0x1a>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000188 	.word	0x20000188

0800592c <__malloc_lock>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__malloc_lock+0x8>)
 800592e:	f000 b811 	b.w	8005954 <__retarget_lock_acquire_recursive>
 8005932:	bf00      	nop
 8005934:	2000018c 	.word	0x2000018c

08005938 <__malloc_unlock>:
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <__malloc_unlock+0x8>)
 800593a:	f000 b80c 	b.w	8005956 <__retarget_lock_release_recursive>
 800593e:	bf00      	nop
 8005940:	2000018c 	.word	0x2000018c

08005944 <_malloc_usable_size_r>:
 8005944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005948:	1f18      	subs	r0, r3, #4
 800594a:	2b00      	cmp	r3, #0
 800594c:	bfbc      	itt	lt
 800594e:	580b      	ldrlt	r3, [r1, r0]
 8005950:	18c0      	addlt	r0, r0, r3
 8005952:	4770      	bx	lr

08005954 <__retarget_lock_acquire_recursive>:
 8005954:	4770      	bx	lr

08005956 <__retarget_lock_release_recursive>:
 8005956:	4770      	bx	lr

08005958 <_init>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr

08005964 <_fini>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr
